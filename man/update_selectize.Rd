% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny-input_selectize.R
\name{update_selectize}
\alias{update_selectize}
\title{Change the value of a select input on the client}
\usage{
update_selectize(
  id,
  ...,
  label = NULL,
  choices = NULL,
  selected = NULL,
  options = list(),
  server = FALSE,
  session = get_current_session()
)
}
\arguments{
\item{id}{An input id.}

\item{...}{Ignored, included for future expansion.}

\item{label}{The label to set for the input object.}

\item{choices}{List of values to select from. If elements of the list are
named, then that name --- rather than the value --- is displayed to the
user. It's also possible to group related inputs by providing a named list
whose elements are (either named or unnamed) lists, vectors, or factors. In
this case, the outermost names will be used as the group labels (leveraging
the \verb{<optgroup>} HTML tag) for the elements in the respective sublist. See
the example section for a small demo of this feature.}

\item{selected}{The initially selected value (or multiple values if \code{multiple = TRUE}). If not specified then defaults to the first value for
single-select lists and no values for multiple select lists.}

\item{options}{A list of options. See the documentation of \pkg{selectize.js}(\url{https://selectize.dev/docs/usage})
for possible options (character option values inside \code{\link[base:AsIs]{base::I()}} will
be treated as literal JavaScript code; see \code{\link[shiny:renderDataTable]{renderDataTable()}}
for details).}

\item{server}{whether to store \code{choices} on the server side, and load
the select options dynamically on searching, instead of writing all
\code{choices} into the page at once (i.e., only use the client-side
version of \pkg{selectize.js})}

\item{session}{The \code{session} object passed to function given to
\code{shinyServer}. Default is \code{getDefaultReactiveDomain()}.}
}
\description{
Change the value of a select input on the client
}
\details{
The input updater functions send a message to the client, telling it to
change the settings of an input object. The messages are collected and sent
after all the observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the
inputs in the first place. For example, \code{\link[shiny]{numericInput}()} and
\code{updateNumericInput()} take a similar set of arguments.

Any arguments with NULL values will be ignored; they will not result in any
changes to the input object on the client.

For \code{\link[shiny]{radioButtons}()}, \code{\link[shiny]{checkboxGroupInput}()} and
\code{\link[shiny]{selectInput}()}, the set of choices can be cleared by using
\code{choices=character(0)}. Similarly, for these inputs, the selected item
can be cleared by using \code{selected=character(0)}.
}
\section{Aliased from Shiny}{
 This function is an alias for \code{shiny::updateSelectizeInput()} and is included to maintain more consistent naming conventions in Shiny apps that use \pkg{bslib}. The documentation on this page may still refer to the original function names. You can replace \code{shiny::updateSelectizeInput()} with \code{update_selectize()}.
}

\seealso{
\code{\link[=input_selectize]{input_selectize()}} to create a selectize input.

Other Shiny update aliases: 
\code{\link{update_action_button}()},
\code{\link{update_action_link}()},
\code{\link{update_checkbox}()},
\code{\link{update_checkbox_group}()},
\code{\link{update_date}()},
\code{\link{update_date_range}()},
\code{\link{update_numeric}()},
\code{\link{update_radio_buttons}()},
\code{\link{update_select}()},
\code{\link{update_slider}()},
\code{\link{update_text}()},
\code{\link{update_text_area}()}
}
\concept{Shiny update aliases}
