% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/toast.R
\name{toast}
\alias{toast}
\alias{as.tags.bslib_toast}
\title{Toast notifications}
\usage{
toast(
  body,
  header = NULL,
  ...,
  id = NULL,
  type = NULL,
  autohide = TRUE,
  duration = 5000,
  position = "top-right",
  closable = TRUE,
  class = NULL
)

\method{as.tags}{bslib_toast}(x, ...)
}
\arguments{
\item{body}{Main content of the toast. Can be text, HTML, or Shiny UI elements.}

\item{header}{Optional header content. Can be a string, or the result of
\code{\link[=toast_header]{toast_header()}}. If provided, creates a \code{.toast-header} with close button
(if \code{closable = TRUE}).}

\item{...}{Additional HTML attributes passed to the toast container.}

\item{id}{Optional unique identifier for the toast. If \code{NULL}, an ID will be
automatically generated when the toast is shown via \code{\link[=show_toast]{show_toast()}}.
Providing a stable ID allows you to update or hide the toast later.}

\item{type}{Optional semantic type. One of \code{NULL}, \code{"primary"}, \code{"secondary"},
\code{"success"}, \code{"info"}, \code{"warning"}, \code{"danger"}, \code{"light"}, or \code{"dark"}.
Applies appropriate Bootstrap background utility classes (\verb{text-bg-*}).}

\item{autohide}{Logical. Whether to automatically hide the toast after
\code{duration} milliseconds. Default \code{TRUE}.}

\item{duration}{Numeric. Time in milliseconds before auto-hiding. Default
\code{5000} (5 seconds). Ignored if \code{autohide = FALSE}.}

\item{position}{String. Where to position the toast container. One of
\code{"top-left"}, \code{"top-center"}, \code{"top-right"} (default), \code{"middle-left"},
\code{"middle-center"}, \code{"middle-right"}, \code{"bottom-left"}, \code{"bottom-center"},
or \code{"bottom-right"}.}

\item{closable}{Logical. Whether to include a close button. Default \code{TRUE}.
When \code{autohide = FALSE}, a close button is always included regardless of
this setting (for accessibility).}

\item{class}{Additional CSS classes for the toast.}

\item{x}{A \code{bslib_toast} object.}
}
\value{
A \code{bslib_toast} object that can be passed to \code{\link[=show_toast]{show_toast()}}.
}
\description{
Toast notifications are lightweight, temporary messages designed to mimic
push notifications from mobile and desktop operating systems. They are built
on Bootstrap 5's native toast component.
}
\examples{
\dontshow{if (rlang::is_interactive()) withAutoprint(\{ # examplesIf}
library(shiny)
library(bslib)

ui <- page_fluid(
  actionButton("show_toast", "Show Toast")
)

server <- function(input, output, session) {
  observeEvent(input$show_toast, {
    show_toast(
      toast(
        body = "Operation completed successfully!",
        header = "Success",
        type = "success"
      )
    )
  })
}

shinyApp(ui, server)
\dontshow{\}) # examplesIf}
}
\seealso{
\code{\link[=show_toast]{show_toast()}} to display a toast, \code{\link[=hide_toast]{hide_toast()}} to dismiss a toast,
and \code{\link[=toast_header]{toast_header()}} to create structured headers.

Other Toast components: 
\code{\link{hide_toast}()},
\code{\link{show_toast}()},
\code{\link{toast_header}()}
}
\concept{Toast components}
