% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny-input_slider.R
\name{update_slider}
\alias{update_slider}
\title{Update Slider Input Widget}
\usage{
update_slider(
  id,
  ...,
  label = NULL,
  value = NULL,
  min = NULL,
  max = NULL,
  step = NULL,
  timeFormat = NULL,
  timezone = NULL,
  session = get_current_session()
)
}
\arguments{
\item{id}{An input id.}

\item{...}{Ignored, included for future expansion.}

\item{label}{The label to set for the input object.}

\item{value}{The initial value of the slider, either a number, a date
(class Date), or a date-time (class POSIXt). A length one vector will
create a regular slider; a length two vector will create a double-ended
range slider. Must lie between \code{min} and \code{max}.}

\item{min, max}{The minimum and maximum values (inclusive) that can be
selected.}

\item{step}{Specifies the interval between each selectable value on the
slider. Either \code{NULL}, the default, which uses a heuristic to determine the
step size or a single number. If the values are dates, \code{step} is in days;
if the values are date-times, \code{step} is in seconds.}

\item{timeFormat}{Only used if the values are Date or POSIXt objects. A time
format string, to be passed to the Javascript strftime library. See
\url{https://github.com/samsonjs/strftime} for more details. The allowed
format specifications are very similar, but not identical, to those for R's
\code{\link[base:strptime]{base::strftime()}} function. For Dates, the default is \code{"\%F"}
(like \code{"2015-07-01"}), and for POSIXt, the default is \code{"\%F \%T"}
(like \code{"2015-07-01 15:32:10"}).}

\item{timezone}{Only used if the values are POSIXt objects. A string
specifying the time zone offset for the displayed times, in the format
\code{"+HHMM"} or \code{"-HHMM"}. If \code{NULL} (the default), times will
be displayed in the browser's time zone. The value \code{"+0000"} will
result in UTC time.}

\item{session}{The \code{session} object passed to function given to
\code{shinyServer}. Default is \code{getDefaultReactiveDomain()}.}
}
\description{
Change the value of a slider input on the client.
}
\details{
The input updater functions send a message to the client, telling it to
change the settings of an input object. The messages are collected and sent
after all the observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the
inputs in the first place. For example, \code{\link[shiny]{numericInput}()} and
\code{updateNumericInput()} take a similar set of arguments.

Any arguments with NULL values will be ignored; they will not result in any
changes to the input object on the client.

For \code{\link[shiny]{radioButtons}()}, \code{\link[shiny]{checkboxGroupInput}()} and
\code{\link[shiny]{selectInput}()}, the set of choices can be cleared by using
\code{choices=character(0)}. Similarly, for these inputs, the selected item
can be cleared by using \code{selected=character(0)}.
}
\section{Aliased from Shiny}{
 This function is an alias for \code{shiny::updateSliderInput()} and is included to maintain more consistent naming conventions in Shiny apps that use \pkg{bslib}. The documentation on this page may still refer to the original function names. You can replace \code{shiny::updateSliderInput()} with \code{update_slider()}.
}

\seealso{
\code{\link[=input_slider]{input_slider()}} to create a slider input.

Other Shiny update aliases: 
\code{\link{update_action_button}()},
\code{\link{update_action_link}()},
\code{\link{update_checkbox}()},
\code{\link{update_checkbox_group}()},
\code{\link{update_date}()},
\code{\link{update_date_range}()},
\code{\link{update_numeric}()},
\code{\link{update_radio_buttons}()},
\code{\link{update_select}()},
\code{\link{update_selectize}()},
\code{\link{update_text}()},
\code{\link{update_text_area}()}
}
\concept{Shiny update aliases}
