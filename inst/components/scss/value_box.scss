$bslib-value-box-enable-border: "auto" !default; // "auto" | "never" | "always"
$bslib-value-box-enable-shadow: $enable-shadows !default;
$bslib-value-box-horizontal-min-width: 300px;

// CSS variables that start with --- (3 dashes instead of 2) are private vars
// that are set by user arguments in the R calls. The CSS properties below only
// apply to the default value box style; the standard way to theme individual
// value boxes is with CSS classes on the value box container.
:root {
  --bslib-value-box-fg: inherit;
  --bslib-value-box-bg: inherit;
  --bslib-value-box-border-color: inherit;
  --bslib-value-box-border-width: inherit;
}

.bslib-value-box {
  @if ($bslib-value-box-enable-shadow) {
    box-shadow: $box-shadow;
  }

  &.default {
    color: var(--bslib-value-box-fg);
    background-color: var(--bslib-value-box-bg);
    border-color: var(--bslib-value-box-border);
    border-width: var(--bslib-value-box-border-width);
  }

  container-name: bslib-value-box;
  container-type: inline-size;

  .value-box-grid {
    grid-template-areas: "left right";
  }

  @media screen and (min-width: breakpoint-max(sm, $grid-breakpoints)) {
    @container bslib-value-box (max-width: #{$bslib-value-box-horizontal-min-width}) {
      .value-box-grid {
        // override specificity of showcase layouts for small value boxes
        grid-template-columns: 1fr !important;
        grid-template-rows: auto auto;
        grid-template-areas:
          "top"
          "bottom";

        > :first-child { // showcase
          grid-area: top !important;
        }
        > :last-child { // contents
          grid-area: bottom !important;
        }

        .value-box-area {
          justify-content: end;
        }
      }
    }
  }

  // Should also be fillable/fill (i.e., d-flex; flex: 1)
  .value-box-area {
    justify-content: center;
    padding: 1.5rem 1rem;
    font-size: .9rem;
    font-weight: 500;
    * {
      color: inherit;
      margin-bottom: 0;
      margin-top: 0;
    }
  }

  .value-box-title {
    @include bootstrap-heading($h6-font-size);
    color: inherit;
    // add a non-breaking space to ensure it's not 0 height
    &:empty::after {
      content: '\00a0 '
    }
  }

  .value-box-value {
    @include bootstrap-heading($h2-font-size);
    color: inherit;
    // add a non-breaking space to ensure it's not 0 height
    &:empty::after {
      content: '\00a0 '
    }
  }

  // Should also be fillable/fill (i.e., d-flex; flex: 1)
  .value-box-showcase {
    align-items: center;
    justify-content: center;
    margin-top: auto;
    margin-bottom: auto;
    padding: 1rem;
    overflow: hidden;

    .bi, .fa {
      opacity: .85;
      min-width: 50px;
      max-width: 125%;
    }
    // We set font size because {bsicons}/{fontawesome} both
    // set height/width to 1em by default (as an inline style)
    .bi { font-size: 5rem; }
    .fa { font-size: 4rem; }

    max-height: var(---bslib-value-box-showcase-max-h);
  }

  &[data-full-screen="true"] {
    .value-box-showcase {
      max-height: var(---bslib-value-box-showcase-max-h-fs);
    }
  }

  &.showcase-top-right {
    .value-box-grid {
      grid-template-columns: 1fr var(---bslib-value-box-showcase-w, 50%);

      > :first-child { // showcase_container
        grid-area: right;
        margin-left: auto;
      }

      > :nth-child(2) { // contents
        grid-area: left;
        align-self: end;
      }
    }

    &[data-full-screen="true"] {
      .value-box-grid {
        grid-template-columns: auto var(---bslib-value-box-showcase-w-fs, 1fr);
        > :nth-child(2) { // contents
          align-self: center;
        }
      }
    }

    .value-box-showcase {
      align-items: end;
      padding-left: 0;
      padding-bottom: 0;
    }

    &:not([data-full-screen="true"]) {
      .value-box-showcase {
        margin-top: 0;
        overflow: visible;
      }

      @container bslib-value-box (max-width: 300px) {
        .value-box-grid {
          .value-box-showcase { // reset padding on showcase_container
            padding-left: 1rem;
          }
        }
      }
    }
  }

  &.showcase-left-center {
    .value-box-grid {
      grid-template-columns: var(---bslib-value-box-showcase-w, 30%) auto;
    }

    &[data-full-screen="true"] .value-box-grid {
      grid-template-columns: var(---bslib-value-box-showcase-w-fs, 1fr) auto;
    }

    &:not([data-fill-screen="true"]) {
      .value-box-grid {
        & > :first-child { // showcase_container
          grid-area: left;
        }

        & > :nth-child(2) { // contents
          grid-area: right;
        }
      }
    }
  }
}

@if ($bslib-value-box-enable-border == "never") {
  .bslib-value-box {
    border: 0;
  }
}
@else if ($bslib-value-box-enable-border == "auto") {
  @if $bslib-value-box-enable-shadow {
    .bslib-value-box {
      border: 0;
    }
  } @else {
    .bslib-value-box:not(.border-auto) {
      border: 0;
    }
  }
}

// Override layout_inline_grid()'s preference to collapse to full-width on mobile (inside the value box)
@include media-breakpoint-down(sm) {
  .bslib-value-box.showcase-left-center .value-box-grid {
    grid-template-columns: var(---bslib-value-box-showcase-w, 30%) auto !important;
  }
  .bslib-value-box.showcase-top-right .value-box-grid {
    grid-template-columns: auto var(---bslib-value-box-showcase-w, 50%) !important;
  }
}
