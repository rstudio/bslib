{
  "version": 3,
  "sources": ["../../srcts/src/components/_utils.ts", "../../srcts/src/components/accordion.ts"],
  "sourcesContent": ["\nimport { HtmlDep } from \"rstudio-shiny/srcts/types/src/shiny/render\";\n\n// TODO: Is there a way to get an actual type for Shiny.InputBinding without having to import it?\nimport type { InputBinding as InputBindingType } from \"rstudio-shiny/srcts/types/src/bindings/input\";\nconst InputBinding = (window.Shiny ? Shiny.InputBinding : class {}) as typeof InputBindingType;\n\nfunction registerBinding(inputBindingClass: new () => InputBindingType, name: string) {\n  if (window.Shiny) {\n    Shiny.inputBindings.register(new inputBindingClass(), \"bslib.\" + name);\n  }\n}\n\nexport { InputBinding, registerBinding };\nexport type { HtmlDep };", "import { InputBinding, registerBinding, HtmlDep } from \"./_utils\";\n\ntype AccordionItem = {\n  item: Element,\n  value: string,\n  isOpen: () => boolean,\n  show: () => void,\n  hide: () => void,\n};\n\ntype HTMLContent = {\n  html: string,\n  deps?: HtmlDep[]\n};\n\ntype SetMessage = {\n  method: \"set\",\n  values: string[]\n};\n\ntype OpenMessage = {\n  method: \"open\",\n  values: string[] | true\n};\n\ntype CloseMessage = {\n  method: \"close\",\n  values: string[] | true\n};\n\ntype InsertMessage = {\n  method: \"insert\",\n  panel: HTMLContent,\n  target: string,\n  position: \"after\" | \"before\",\n};\n\ntype RemoveMessage =  { \n  method: \"remove\",\n  target: string[] \n}\n\ntype UpdateMessage = {\n  method: \"update\",\n  target: string,\n  value: string,\n  body: HTMLContent,\n  title: HTMLContent,\n  icon: HTMLContent,\n}\n\ntype MessageData = SetMessage | OpenMessage | CloseMessage | InsertMessage | RemoveMessage | UpdateMessage;\n\n\nclass accordionInputBinding extends InputBinding {\n\n  find(scope: HTMLElement) {\n    return $(scope).find(\".accordion.bslib-accordion-input\");\n  }\n\n  getValue(el: HTMLElement): string[] | null {\n    const items = this._getItemInfo(el)\n    const selected = items.filter(x => x.isOpen()).map(x => x.value);\n    return selected.length === 0 ? null : selected;\n  }\n\n  subscribe(el: HTMLElement, callback: (x: boolean) => void) {\n    $(el).on(\n      \"shown.bs.collapse.accordionInputBinding hidden.bs.collapse.accordionInputBinding\",\n      function (event) {\n        callback(true);\n      }\n    );\n  }\n\n  unsubscribe(el: HTMLElement) {\n    $(el).off(\".accordionInputBinding\");\n  }\n\n  receiveMessage(el: HTMLElement, data: MessageData) {\n    const method = data.method;\n    if (method === \"set\") {\n      this._setItems(el, data);\n    } else if (method === \"open\") {\n      this._openItems(el, data);\n    } else if (method === \"close\") {\n      this._closeItems(el, data);\n    } else if (method === \"remove\") {\n      this._removeItem(el, data);\n    } else if (method === \"insert\") {\n      this._insertItem(el, data);\n    } else if (method === \"update\") {\n      this._updateItem(el, data);\n    } else {\n      throw new Error(`Method not yet implemented: ${method}`);\n    }\n  }\n\n  protected _setItems(el: HTMLElement, data: SetMessage) {\n    const items = this._getItemInfo(el)\n    const vals = this._getValues(el, items, data.values);\n    items.forEach(x => {\n      vals.indexOf(x.value) > -1 ? x.show() : x.hide();\n    })\n  }\n\n  protected _openItems(el: HTMLElement, data: OpenMessage) {\n    const items = this._getItemInfo(el)\n    const vals = this._getValues(el, items, data.values);\n    items.forEach(x => {\n      if (vals.indexOf(x.value) > -1) x.show();\n    })\n  }\n\n  protected _closeItems(el: HTMLElement, data: CloseMessage) {\n    const items = this._getItemInfo(el)\n    const vals = this._getValues(el, items, data.values);\n    items.forEach(x => {\n      if (vals.indexOf(x.value) > -1) x.hide();\n    })\n  }\n\n  protected _insertItem(el: HTMLElement, data: InsertMessage) {\n    let targetItem = this._findItem(el, data.target);\n\n    // If no target was specified, or the target was not found, then default\n    // to the first or last item, depending on the position\n    if (!targetItem) {\n      targetItem = (data.position === \"before\" ? el.firstElementChild : el.lastElementChild) as HTMLElement;\n    }\n\n    const panel = data.panel;\n    \n    // If there is still no targetItem, then there are no items in the accordion\n    if (targetItem) {\n      Shiny.renderContent(\n        targetItem, panel,\n        data.position === \"before\" ? \"beforeBegin\" : \"afterEnd\"\n      );\n    } else {\n      Shiny.renderContent(el, panel);\n    }\n\n    // Need to add a reference to the parent id that makes autoclose to work\n    if (this._isAutoClosing(el)) {\n      const val = $(panel.html).attr(\"data-value\");\n      $(el)\n        .find(`[data-value=\"${val}\"] .accordion-collapse`)\n        .attr(\"data-bs-parent\", \"#\" + el.id);\n    }\n  }\n\n  protected _removeItem(el: HTMLElement, data: RemoveMessage) {\n    const targetItems = this._getItemInfo(el).filter(x => data.target.indexOf(x.value) > -1);\n\n    targetItems.forEach(x => x.item.remove());\n  }\n\n  protected _updateItem(el: HTMLElement, data: UpdateMessage) {\n    const target = this._findItem(el, data.target);\n\n    if (!target) {\n      throw new Error(`Unable to find an accordion_panel() with a value of ${data.target}`);\n    }\n\n    if (data.hasOwnProperty(\"value\")) {\n      target.dataset.value = data.value;\n    }\n\n    if (data.hasOwnProperty(\"body\")) {\n      const body = target.querySelector(\".accordion-body\") as HTMLElement; // always exists\n      Shiny.renderContent(body, data.body);\n    }\n\n    const header = target.querySelector(\".accordion-header\") as HTMLElement; // always exists\n\n    if (data.hasOwnProperty(\"title\")) {\n      const title = header.querySelector(\".accordion-title\") as HTMLElement; // always exists\n      Shiny.renderContent(title, data.title);\n    }\n\n    if (data.hasOwnProperty(\"icon\")) {\n      const icon = header.querySelector(\".accordion-button > .accordion-icon\") as HTMLElement; // always exists\n      Shiny.renderContent(icon, data.icon);\n    }\n  }\n\n  protected _getItemInfo(el: HTMLElement): AccordionItem[] {\n    const items = Array.from(el.querySelectorAll(\":scope > .accordion-item\")) as HTMLElement[];\n    return items.map(x => this._getSingleItemInfo(x));\n  }\n\n  protected _getSingleItemInfo(x: HTMLElement): AccordionItem {\n    const collapse = x.querySelector(\".accordion-collapse\") as HTMLElement;\n    const isOpen = () => $(collapse).hasClass(\"show\")\n    return {\n      item: x,\n      value: x.dataset.value as string,\n      isOpen: isOpen,\n      show: () => {\n        if (!isOpen()) $(collapse).collapse(\"show\")\n      },\n      hide: () => {\n        if (isOpen()) $(collapse).collapse(\"hide\")\n      }\n    };\n  }\n\n  protected _getValues(el: HTMLElement, items: AccordionItem[], values: string[] | true): string[] {\n    let vals = values !== true ? values : items.map(x => x.value);\n    const autoclose = this._isAutoClosing(el);\n    if (autoclose) {\n      vals = vals.slice(vals.length - 1, vals.length);\n    }\n    return vals;\n  }\n\n  protected _findItem(el: HTMLElement, value: string): HTMLElement | null {\n    return el.querySelector(`[data-value=\"${value}\"]`);\n  }\n\n  protected _isAutoClosing(el: HTMLElement): boolean {\n    return el.classList.contains(\"autoclose\");\n  }\n}\n\n\nregisterBinding(accordionInputBinding, \"accordion\");"],
  "mappings": "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",
  "names": ["InputBinding", "registerBinding", "inputBindingClass", "name", "accordionInputBinding", "InputBinding", "scope", "el", "selected", "x", "callback", "event", "data", "method", "items", "vals", "targetItem", "panel", "val", "target", "body", "header", "title", "icon", "collapse", "isOpen", "values", "value", "registerBinding"]
}
