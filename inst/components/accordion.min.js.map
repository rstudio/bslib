{
  "version": 3,
  "sources": ["../../srcts/src/components/accordion.ts"],
  "sourcesContent": ["import { HtmlDep } from \"rstudio-shiny/srcts/types/src/shiny/render\";\n\nconst InputBinding = (window.Shiny ? Shiny.InputBinding : class {}) as typeof Shiny.InputBinding;\n\ntype AccordionItem = {\n  item: Element,\n  value: string,\n  selected: boolean,\n  show?: boolean,\n};\n\ntype HTMLContent = {\n  html: string,\n  deps?: HtmlDep[]\n};\n\ntype SelectMessage = {\n  method: \"select\",\n  value: string[] | true,\n  close: boolean,\n};\n\ntype InsertMessage = {\n  method: \"insert\",\n  panel: HTMLContent,\n  target: string,\n  position: \"after\" | \"before\",\n};\n\ntype RemoveMessage =  { \n  method: \"remove\",\n  target: string[] \n}\n\ntype UpdateMessage = {\n  method: \"update\",\n  target: string,\n  value: string,\n  body: HTMLContent,\n  title: HTMLContent,\n  icon: HTMLContent,\n}\n\ntype MessageData = SelectMessage | InsertMessage | RemoveMessage | UpdateMessage;\n\n\nclass accordionInputBinding extends InputBinding {\n\n  find(scope: HTMLElement) {\n    return $(scope).find(\".accordion.bslib-accordion-input\");\n  }\n\n  getValue(el: HTMLElement): string[] | null {\n    const items = this._getItems(el)\n    const selected = items.filter(x => x.selected).map(x => x.value);\n    return selected.length === 0 ? null : selected;\n  }\n\n  subscribe(el: HTMLElement, callback: (x: boolean) => void) {\n    $(el).on(\n      \"shown.bs.collapse.accordionInputBinding hidden.bs.collapse.accordionInputBinding\",\n      function (event) {\n        callback(true);\n      }\n    );\n  }\n\n  unsubscribe(el: HTMLElement) {\n    $(el).off(\".accordionInputBinding\");\n  }\n\n  receiveMessage(el: HTMLElement, data: MessageData) {\n    const method = data.method;\n    if (method === \"select\") {\n      this._selectItems(el, data);\n    } else if (method === \"remove\") {\n      this._removeItem(el, data);\n    } else if (method === \"insert\") {\n      this._insertItem(el, data);\n    } else if (method === \"update\") {\n      this._updateItem(el, data);\n    } else {\n      throw new Error(`Method not yet implemented: ${method}`);\n    }\n  }\n\n  protected _selectItems(el: HTMLElement, data: SelectMessage) {\n    let items = this._getItems(el);\n\n    let selectVals = data.value !== true ? data.value : items.map(x => x.value);\n\n    // If this accordion is autoclosing, it's only possible to show/select\n    // one item at a time anyway, so just select the last item in the list.\n    const autoclose = this._isAutoClosing(el);\n    if (autoclose) {\n      selectVals = selectVals.slice(selectVals.length - 1, selectVals.length);\n    }\n\n    items = items.map(x => {\n      return {...x, show: selectVals.indexOf(x.value) > -1}\n    });\n\n    const willShow = items.some(x => x.show);\n\n    items.forEach(x => {\n      if (x.show) {\n\n        const toShow = x.item.querySelector(\".accordion-collapse:not(.show)\");\n        if (toShow) $(toShow).collapse(\"show\");\n\n      } else {\n\n        if (!data.close) {\n          return;\n        }\n\n        if (autoclose && willShow) {\n          return;\n        }\n\n        const toHide = x.item.querySelector(\".accordion-collapse.show\");\n        if (toHide) $(toHide).collapse(\"hide\");\n\n      }\n    });\n  }\n\n\n  protected _insertItem(el: HTMLElement, data: InsertMessage) {\n    let targetItem = this._findItem(el, data.target);\n\n    // If no target was specified, or the target was not found, then default\n    // to the first or last item, depending on the position\n    if (!targetItem) {\n      targetItem = (data.position === \"before\" ? el.firstElementChild : el.lastElementChild) as HTMLElement;\n    }\n\n    const panel = data.panel;\n    \n    // If there is still no targetItem, then there are no items in the accordion\n    if (targetItem) {\n      Shiny.renderContent(\n        targetItem, panel,\n        data.position === \"before\" ? \"beforeBegin\" : \"afterEnd\"\n      );\n    } else {\n      Shiny.renderContent(el, panel);\n    }\n\n    // Need to add a reference to the parent id that makes autoclose to work\n    if (this._isAutoClosing(el)) {\n      const val = $(panel.html).attr(\"data-value\");\n      $(el)\n        .find(`[data-value=\"${val}\"] .accordion-collapse`)\n        .attr(\"data-bs-parent\", \"#\" + el.id);\n    }\n  }\n\n  protected _removeItem(el: HTMLElement, data: RemoveMessage) {\n    const targetItems = this._getItems(el).filter(x => data.target.indexOf(x.value) > -1);\n\n    targetItems.forEach(x => x.item.remove());\n  }\n\n  protected _updateItem(el: HTMLElement, data: UpdateMessage) {\n    const target = this._findItem(el, data.target);\n\n    if (!target) {\n      throw new Error(`Unable to find an accordion_panel() with a value of ${data.target}`);\n    }\n\n    if (data.hasOwnProperty(\"value\")) {\n      target.dataset.value = data.value;\n    }\n    if (data.hasOwnProperty(\"body\")) {\n      const body = target.querySelector(\":scope > .accordion-body\") as HTMLElement; // always exists\n      Shiny.renderContent(body, data.body);\n    }\n\n    const header = target.querySelector(\":scope > .accordion-header\") as HTMLElement; // always exists\n\n    if (data.hasOwnProperty(\"title\")) {\n      const title = header.querySelector(\".accordion-title\") as HTMLElement; // always exists\n      Shiny.renderContent(title, data.title);\n    }\n\n    if (data.hasOwnProperty(\"icon\")) {\n      const icon = header.querySelector(\".accordion-button > .accordion-icon\") as HTMLElement; // always exists\n      Shiny.renderContent(icon, data.icon);\n    }\n  }\n\n  protected _getItems(el: HTMLElement): AccordionItem[] {\n    const items = Array.from(el.querySelectorAll(\":scope > .accordion-item\")) as HTMLElement[];\n    return items.length === 0 ? [] : items.map(x => this._getItemInfo(x));\n  }\n\n  protected _findItem(el: HTMLElement, value: string): HTMLElement | null {\n    return el.querySelector(`[data-value=\"${value}\"]`);\n  }\n\n  protected _getItemInfo(x: HTMLElement): AccordionItem {\n    const collapse = x.querySelector(\":scope > .accordion-collapse\") as HTMLElement;\n    return {\n      item: x,\n      value: x.dataset.value as string,\n      selected: collapse.classList.contains(\"show\"),\n    };\n  }\n\n  protected _isAutoClosing(el: HTMLElement): boolean {\n    return el.classList.contains(\"autoclose\");\n  }\n}\n\nif (window.Shiny) {\n  Shiny.inputBindings.register(new accordionInputBinding(), \"bslib.accordion\");\n}"],
  "mappings": "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",
  "names": ["InputBinding", "accordionInputBinding", "scope", "el", "selected", "x", "callback", "event", "data", "method", "items", "selectVals", "autoclose", "__spreadProps", "__spreadValues", "willShow", "toShow", "toHide", "targetItem", "panel", "val", "target", "body", "header", "title", "icon", "value", "collapse"]
}
