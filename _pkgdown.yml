destination: docs
url: https://rstudio.github.io/bslib/

development:
  mode: auto

toc:
  depth: 3

template:
  bootstrap: 5
  bslib:
    info: "#E6F2FD"
    base_font:
      google: {family: "Atkinson Hyperlegible", wght: [300, 400, 700], ital: [0, 1]}
    headings-color: "#206B72"
    link-color: "#216B73"
    link-color-dark: "#cef4f9"
    link-decoration: underline dotted
  params:
    footer: <b>bslib</b> is an R package developed by <a href='https://rstudio.com'>RStudio</a>
    docsearch:
      api_key: 53fd87c79a13e431b4298611470d023a
      index_name: bslib
  includes:
    in_header: >
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@latest/font/bootstrap-icons.css">

navbar:
  bg: info
  type: light
  structure:
    left:  [get-started, examples, theming, components, layouts]
    right: [reference, news, github, dark-mode]
  components:
    home: ~
    dark-mode:
      href: "#dark-mode"

    get-started:
      text: Get Started
      menu:
        - text: Shiny dashboards
          href: articles/dashboards/index.html
        - text: Any Bootstrap project
          href: articles/any-project/index.html
        - text: Theming
          href: articles/theming/index.html
    #examples:
    #  text: Examples
    #  href: articles/examples/index.html
    theming:
      text: Theming
      menu:
        - text: Theming variables
          href: articles/bs5-variables/index.html
        - text: Utility Classes
          href: articles/utility-classes/index.html
        - text: Custom components
          href: articles/custom-components/index.html
    components:
      text: Components
      menu:
        - text: Cards
          href: articles/cards/index.html
        - text: Sidebars
          href: articles/sidebars/index.html
        - text: Value Boxes
          href: articles/value-boxes/index.html
        - text: Tooltips & Popovers
          href: articles/tooltips-popovers/index.html
    layouts:
      text: Layouts
      menu:
        - text: Multiple columns
          href: articles/column-layout/index.html
        - text: Multiple panels
          href: reference/navset.html#details
        - text: Filling layout
          href: articles/filling/index.html


    reference:
      text: Reference
      href: reference/index.html

    github:
      icon: bi-github
      href: https://github.com/rstudio/bslib

news:
  releases:
  - text: "v0.6.1"
    href: https://shiny.posit.co/blog/posts/shiny-r-1.8.0/
  - text: "v0.5.1"
    href: https://shiny.posit.co/blog/posts/bslib-tooltips/
  - text: "v0.5.0"
    href: https://shiny.posit.co/blog/posts/bslib-dashboards/
  - text: "v0.4.2"
    href: https://shiny.posit.co/blog/posts/announcing-new-r-shiny-ui-components/

reference:
- title: Page Layouts
  desc: >
    Page layouts are the basic building blocks of any UI. bslib pages always
    include Bootstrap and can be themed with bslib's [theming capabilities](#theming).
- subtitle: Dashboard layouts
  desc: >
    These page layouts work best for dashboards. For a single-page dashboards
    with an optional sidebar, try `page_sidebar()`. For multi-tab dashboards
    organized as pages in a navbar, also with an optional sidebar, try
    `page_navbar()`. For a full-page dashboard with items that fill the screen,
    try `page_fillable()`.
- contents:
    - page_sidebar
    - page_navbar
    - page_fillable
- subtitle: Basic page layouts
  desc: >
    bslib variants of classic Shiny page layouts.
- contents:
    - page

- title: User Interface Layouts
  desc: >
    These functions help you layout the user interface (UI) elements of your
    app.
- subtitle: Multiple columns
  desc: |
    Organize UI elements into Bootstrap's
    [12-column CSS grid](https://getbootstrap.com/docs/5.3/layout/css-grid/)
    with `layout_columns()`. Or organize elements into a grid of equal-width
    columns with `layout_column_wrap()`. Both functions can layout an arbitrary
    number of elements without needing to specify the number of columns, but
    `layout_columns()` can be used to create more complex layouts whereas
    `layout_column_wrap()` creates a grid of equal column and row sizes.
  contents:
    - layout_columns
    - layout_column_wrap
- subtitle: Multiple panels
  desc: >
    Create tabbed sections of content. First, choose the style of navigation
    container. Then add navigation panels or items to the container. You can
    programmatically control or update the navigation containers with
    server-side logic.
  contents:
    - navset
    - nav-items
    - nav_select
- subtitle: Sidebar layout
  desc: >
    Place input controls or additional context in a sidebar next to the main
    contents. Sidebar layouts combine well with [cards](#cards) and are built
    into the `page_sidebar()` and `page_navbar()` page layouts.
  contents:
    - layout_sidebar

- title: Components
  desc: >
    bslib brings a collection of Bootstrap components to Shiny. These components
    require the latest version of Bootstrap and work best when used with the
    [page functions listed above](#page-layouts).
- subtitle: Cards
  desc: |
    Cards are a great way to group content into a single, contained unit. Cards
    combine nicely with many other functions in bslib. They can be added to
    [dashboard page layouts](#dashboard-layouts), laid out with helpers like
    `layout_columns()`, or have sidebars when used with `layout_sidebar()`. You
    can even create [tabbed card interfaces](#navigation) with the `navset_card_*()` functions.
  contents:
    - card
    - as.card_item
- subtitle: Value box
  desc: |
    Value boxes are a special type of card that highlight a single piece of
    information, optionally showcasing an icon or plot. They are often used in
    [dashboard layouts](#dashboard-layouts) to highlight key metrics.
  contents:
    - value_box
- subtitle: Accordions
  desc: |
    Create collapsible sections of content. Each collapsible section is defined
    with `accordion_panel()` and the collection of sections are grouped together
    within an `accordion()`.
  contents:
    - accordion
    - accordion_panel_set
- subtitle: Tooltips & Popovers
  desc: |
    Provide details on demand. In general, tooltips are ephemeral and provide a
    little extra information when the user hovers over or focuses on an element.
    Popovers are more persistent and are triggered by a click or via the
    keyboard. Popovers can include more content than tooltips -- even Shiny
    inputs and outputs!
  contents:
    - tooltip
    - popover
- subtitle: Miscellaneous inputs
  desc: |
    UI controls for capturing user input
  contents:
    - input_switch
    - input_dark_mode
    - input_task_button
    - bind_task_button

- title: Theming
  desc: >
    bslib provides a flexible interface for customizing Bootstrap themes. You
    can create your own Bootstrap themes, customize existing themes, or create
    dynamic themes that can even be modified at runtime.
- subtitle: Create a Bootstrap theme
  desc: |
    Tools for creating customized Bootstrap themes. Create your own, highly
    customized theme, or use a preset theme -- either built into bslib or
    provided by [Bootswatch](https://bootswatch.com/).
  contents:
    - bs_theme
    - bs_add_variables
    - font_face
- subtitle: Interactive theming
  desc: >
    Preview and interactively modify Bootstrap themes. Use `bs_theme_preview()`
    for a preview of your theme in a Shiny app with many example components. Use
    `run_with_themer()` to run an existing Shiny app with the theme editor or
    `bs_themer()` to add the theme editor UI to your app or R Markdown document.
  contents:
    - bs_theme_preview
    - run_with_themer
    - bs_themer
- subtitle: Dynamic theming
  desc: |
    For package developers or advanced app authors, bslib provides tools for
    creating dynamically themable HTML widgets.
  contents:
    - bs_dependency
    - bs_dependency_defer
    - bs_theme_dependencies
    - bs_current_theme
- subtitle: Global theme creation
  desc: |
    Use Bootstrap themes globally.
  contents:
    - bs_global_theme
    - bs_global_add_variables
- subtitle: Theme subsetting
  desc: |
    Reduce the final CSS bundle size by removing unwanted portions of a Sass
    bundle.
  contents:
    - bs_remove

- title: Utility Functions
- subtitle: Fill items and fillable containers
  desc: |
    Create and test for fill items and fillable containers.
  contents:
    - as_fill_carrier
- subtitle: Theming utility functions
  contents:
    - bs_get_variables
    - theme_version
    - theme_bootswatch
    - bootswatch_themes
    - builtin_themes
    - version_default
- subtitle: Other utility functions
  contents:
    - breakpoints


redirects:
  - ["reference/nav.html", "reference/nav-items.html"]
  - ["reference/navs.html", "reference/navset.html"]
  - ["articles/custom-theming.html", "articles/theming/index.html"]
  - ["articles/bslib.html", "articles/any-project/index.html"]
  - ["articles/any-project.html", "articles/any-project/index.html"]
  - ["articles/bs4-variables.html", "articles/bs4-variables/index.html"]
  - ["articles/bs5-variables.html", "articles/bs5-variables/index.html"]
  - ["articles/cards.html", "articles/cards/index.html"]
  - ["articles/column-layout.html", "articles/column-layout/index.html"]
  - ["articles/custom-components.html", "articles/custom-components/index.html"]
  - ["articles/dashboards.html", "articles/dashboards/index.html"]
  - ["articles/filling.html", "articles/filling/index.html"]
  - ["articles/sidebars.html", "articles/sidebars/index.html"]
  - ["articles/theming.html", "articles/theming/index.html"]
  - ["articles/utility-classes.html", "articles/utility-classes/index.html"]
  - ["articles/value-boxes.html", "articles/value-boxes/index.html"]
  - ["articles/why-sass.html", "articles/why-sass/index.html"]
