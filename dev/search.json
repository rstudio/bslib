[{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://rstudio.github.io/bslib/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://rstudio.github.io/bslib/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://rstudio.github.io/bslib/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://rstudio.github.io/bslib/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://rstudio.github.io/bslib/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://rstudio.github.io/bslib/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://rstudio.github.io/bslib/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://rstudio.github.io/bslib/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://rstudio.github.io/bslib/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://rstudio.github.io/bslib/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://rstudio.github.io/bslib/dev/PULL_REQUEST_TEMPLATE.html","id":"pull-request","dir":"","previous_headings":"","what":"Pull Request","title":"NA","text":"submit pull request, please ensure ’ve completed following checklist Ensure already open relevant GitHub issue describing problem detail ’ve already received indication maintainers welcome contribution fix problem. helps us prevent wasting anyone’s time. Add unit tests tests/testthat directory. project uses roxygen2 documentation. ’ve made changes documentation, run devtools::document(). Run devtools::check() (, equivalently, click Build->Check Package RStudio IDE) make sure change add messages, warnings, errors. Note decent chance tests already failing changes. Just make sure haven’t introduced new ones. Ensure code changes follow style outlined http://r-pkgs..co.nz/style.html Add entry NEWS.md concisely describing changed.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/any-project/index.html","id":"shiny","dir":"Articles > Any-project","previous_headings":"","what":"Shiny","title":"Any project","text":"bslib provides handful page_*() functions can used drop-replacements shiny::*Page(). first important difference page_*() provides latest version Bootstrap (default). example: addition, bslib’s page_*() functions provide new capabilities. importantly, cover Shiny dashboards, page_navbar() page_sidebar() provide deep integration sidebar layouts, filling layouts, navbar customizations, theming, . Another new important page_*() function page_fillable(). function provides new approach filling layouts forms foundation higher-level abstractions page_sidebar() page_navbar(). See filling layouts (especially Practice section) learn page_fillable().","code":"library(shiny)  # Same as fluidPage(), but with latest Bootstrap ui <- page_fluid(   h2(\"Hello world\") )  shinyApp(ui, function(...) {})"},{"path":"https://rstudio.github.io/bslib/dev/articles/any-project/index.html","id":"without-shiny","dir":"Articles > Any-project","previous_headings":"","what":"Without Shiny","title":"Any project","text":"page_*() functions offer means getting started Shiny can also used create static HTML pages (.e., HTML file server-side code). Probably intriguing use case crosstalk (.e., htmlwidgets can linked together). example: since result static HTML, can save HTML file share others email, Slack, etc.: Also, clear, static HTML can also useful without crosstalk. example, can use page_fillable() layout numerous htmlwidgets:","code":"library(crosstalk) library(leaflet)  # Use crosstalk to create a client-side filter between the map and slider quake_dat <- SharedData$new(quakes) map_filter <- filter_slider(\"mag\", \"Magnitude\", quake_dat, ~mag) map_quakes <- leaflet(quake_dat) |> addTiles() |> addCircleMarkers()  page_sidebar(   title = \"Client-side filtering\",   sidebar = map_filter,   # Can also put other bslib components here   # like cards, value boxes, etc.   map_quakes ) htmltools::save_html(.Last.value, \"index.html\") plot_card <- card(   full_screen = TRUE,   card_header(\"Plot\"),   plotly::plot_ly() )  page_fillable(   layout_columns(plot_card, plot_card),   plot_card )"},{"path":"https://rstudio.github.io/bslib/dev/articles/any-project/index.html","id":"r-markdown","dir":"Articles > Any-project","previous_headings":"","what":"R Markdown","title":"Any project","text":"Use theme parameter compatible output format1 get started R Markdown. supplying bslib: true parameter, ’ll get latest “stock” version Bootstrap (akin using page_*() Shiny). Alternatively, can supply bs_theme() parameters theme parameter specify Bootstrap version, add Bootswatch theme, customize theming colors (Getting Started Theming covers depth). bslib also provides R Markdown templates can accessed RStudio going File -> New File -> R Markdown -> Template: <img src=“rstudio-templates.png” alt=“RStudio”New Template” dialog showing three theming-related templates bslib.” width=“582” style=“display: block; margin: auto;” /> addition rmarkdown::html_document, least R Markdown projects compatible bslib. cases, can get started projects pretty similar fashion rmarkdown::html_document. See following articles learn : flexdashboard, pkgdown, bookdown.","code":"--- output:   html_document:     theme:       bslib: true --- --- output:   html_document:     theme:       version: 5       bootswatch: minty       primary: \"#6CC3D4\" ---"},{"path":"https://rstudio.github.io/bslib/dev/articles/any-project/index.html","id":"in-production","dir":"Articles > Any-project","previous_headings":"","what":"In production","title":"Any project","text":"deploying bslib project production, ’s wise “hard-code” version Bootstrap used developed. reduces chance project breaking bslib updates ’s Bootstrap dependency. , call version_default() get current version Bootstrap, pass value relevant theme object.","code":"library(shiny)  ui <- page_fluid(   theme = bs_theme(version = 5),   ... )  shinyApp(ui, function(...) {}) --- output:   html_document:     theme:       version: 5 ---"},{"path":"https://rstudio.github.io/bslib/dev/articles/brand-yml/index.html","id":"what-is-brand-yml","dir":"Articles > Brand-yml","previous_headings":"","what":"What is brand.yml?","title":"Unified theming with brand.yml","text":"brand.yml specification managing visual branding single YAML file. simplifies brand management theming consolidating visual identity—colors, typography, styling—one easy--maintain location. basic, _brand.yml file includes metadata (meta) company brand, logos (logo), color palette, theme, fonts typography settings used brand. ’s simple _brand.yml file: file can used theme Shiny apps well Quarto projects. brand.yml isn’t just corporate branding—can also use brand.yml create custom themes personal team-specific projects. Create _brand.yml file match specific journal conference style. used bslib, simply place _brand.yml file project directory, bslib automatically apply branding Shiny app.","code":"meta:   name: brand.yml   link: https://posit-dev.github.io/brand-yml  logo:   small: brand-yml-icon.svg   medium: brand-yml-tall.svg   large: brand-yml-wide.svg  color:   palette:     orange: \"#FF6F20\"     pink: \"#FF3D7F\"   primary: orange   danger: pink  typography:   fonts:     - family: Open Sans       source: google   base: Open Sans"},{"path":"https://rstudio.github.io/bslib/dev/articles/brand-yml/index.html","id":"try-brand-yml","dir":"Articles > Brand-yml","previous_headings":"","what":"Try brand.yml","title":"Unified theming with brand.yml","text":"bslib includes example app can use try brand.yml features can helpful develop _brand.yml file. run app use shiny::runExample(). use app template, create new directory app copy bslib example app directory created, open app.R _brand.yml editing.","code":"shiny::runExample(\"brand.yml\", package = \"bslib\") new_app_dir <- \"my-brand\" # path to your app template <- fs::path_package(\"bslib\", \"examples-shiny/brand\")  # Copy the template files into your new app directory fs::dir_copy(template, new_app_dir) file.edit(fs::path(new_app_dir, \"app.R\")) file.edit(fs::path(new_app_dir, \"_brand.yml\"))"},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/articles/brand-yml/index.html","id":"automatic-discovery","dir":"Articles > Brand-yml","previous_headings":"Basic usage","what":"Automatic discovery","title":"Unified theming with brand.yml","text":"use brand.yml file like example , save file _brand.yml include directory containing Shiny app. app uses uses theme = bs_theme(), bslib::page_*() functions, bslib theming --hood, bslib automatically search _brand.yml file current directory _brand/ brand/ directory, found, check parent directories _brand.yml file (possibly also _brand/ brand/), apply branded theming _brand.yml file found.","code":"# Automatically find `_brand.yml` in app directory or its parent directories ui <- page_fluid(   theme = bs_theme()  # No additional configuration needed )"},{"path":"https://rstudio.github.io/bslib/dev/articles/brand-yml/index.html","id":"explicit-configuration","dir":"Articles > Brand-yml","previous_headings":"Basic usage","what":"Explicit configuration","title":"Unified theming with brand.yml","text":"can also explicit brand.yml usage. Ensure branding Direct path Inline brand Ignore branding Use brand = TRUE find _brand.yml app dir parents, fail otherwise. Provide brand direct path brand.yml file, useful file special name stored central location. Use list define brand settings inline, useful quickly theme small app. Finally, can ignore existing _brand.yml file apply branding.","code":"ui <- page_sidebar(   theme = bs_theme(brand = TRUE) ) ui <- page_sidebar(   theme = bs_theme(brand = \"path/to/brand.yml\") ) ui <- page_sidebar(   theme = bs_theme(     brand = list(       color = list(primary = \"#FF6F20\", danger = \"#FF3D7F\"),       typography = list(         fonts = list(           list(family = \"Open Sans\", source = \"google\")         ),         base = \"Open Sans\"       )     )   ) ) ui <- page_sidebar(   theme = bs_theme(brand = FALSE) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/brand-yml/index.html","id":"brand-yml-in-r-markdown","dir":"Articles > Brand-yml","previous_headings":"Basic usage","what":"brand.yml in R Markdown","title":"Unified theming with brand.yml","text":"Many places across R Markdown ecosystem use bslib theming. Anywhere theme passed bslib, can use techniques mentioned , even YAML. Theming brand.yml works best Bootstrap 5. best results, sure include version: 5 theme. Automatic Ensure branding Direct path Inline brand Ignore branding basic case, place _brand.yml project folder ensure document uses Bootstrap 5. Use brand: TRUE automatically find _brand.yml throw error found within project. Provide brand direct path brand.yml file. Define brand settings directly inline brand key. Ignore existing _brand.yml file apply branding brand: false. approaches apply pkgdown, brand provided template.bslib: store _pkgdown.yml file _brand.yml file pkgdown subdirectory repository, bslib’s automatic _brand.yml file detection start looking package root. case, ’ll need provide brand relative path _brand.yml file:","code":"output:   html_document:     theme:       version: 5 output:   html_document:     theme:       version: 5       brand: true output:   html_document:     theme:       version: 5       brand: \"path/to/brand.yml\" output:   html_document:     theme:       version: 5       brand:         color:           primary: \"#FF6F20\"           danger: \"#FF3D7F\"         typography:           fonts:             - family: \"Open Sans\"             source: \"google\"           base: \"Open Sans\" output:   html_document:     theme:       version: 5       brand: false # _pkgdown.yml template:   bslib:     version: 5     brand: _brand.yml # pkgdown/_pkgdown.yml template:   bslib:     version: 5     brand: pkgdown/_brand.yml"},{"path":"https://rstudio.github.io/bslib/dev/articles/brand-yml/index.html","id":"learn-more","dir":"Articles > Brand-yml","previous_headings":"","what":"Learn more","title":"Unified theming with brand.yml","text":"article barely scratched surface information customizations brand.yml includes. encourage learn brand.yml features official brand.yml website. also invite leave feedback ask questions brand.yml discussion board. Visit pages learn using brand.yml projects: Quarto - Multiformat branding _brand.yml Shiny - Branded theming Shiny Python apps brand new project, large language models (LLMs) don’t know anything brand.yml (yet), can still useful right prompt. ’ve created small complete description brand.yml can use help teach LLM brand.yml. Read Creating brand.yml LLM article brand.yml website.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"setup-code","dir":"Articles > Cards","previous_headings":"","what":"Setup code","title":"Cards","text":"demonstrate bslib cards work outside Shiny (.e., R Markdown, static HTML, etc), ’ll make repeated use statically rendered htmlwidgets like plotly leaflet. ’s code create widgets: Cards work equally well Shiny. examples , replace plotly_widget plotlyOutput() leaflet_widget leafletOutput() adapt Shiny server-rendered plots/maps.","code":"library(bslib) library(shiny) library(htmltools) library(plotly) library(leaflet)  plotly_widget <- plot_ly(x = diamonds$cut) %>%   config(displayModeBar = FALSE) %>%   layout(margin = list(t = 0, b = 0, l = 0, r = 0))  leaflet_widget <- leafletOptions(attributionControl = FALSE) %>%   leaflet(options = .) %>%   addTiles()"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"hello-card","dir":"Articles > Cards","previous_headings":"","what":"Hello card()","title":"Cards","text":"card() designed handle number “known” card items (e.g., card_header(), card_body(), etc) unnamed arguments (.e., children). ’ll see shortly, card() also useful named arguments (e.g., full_screen, height, etc). core, card() card items just HTML div() special Bootstrap class, can use Bootstrap’s utility classes customize things like colors, text, borders, etc. text link","code":"card(   card_header(     class = \"bg-dark\",     \"A header\"   ),   card_body(     markdown(\"Some text with a [link](https://github.com)\")   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"implicit-card_body","dir":"Articles > Cards","previous_headings":"","what":"Implicit card_body()","title":"Cards","text":"find using card_body() without changing defaults, consider dropping altogether since direct children card() aren’t “known” card() items, wrapped together implicit card_body() call.1 example, code right generates HTML identical previous example: text link.","code":"card(   card_header(     class = \"bg-dark\",     \"A header\"   ),   markdown(\"Some text with a [link](https://github.com).\") )"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"restricting-growth","dir":"Articles > Cards","previous_headings":"","what":"Restricting growth","title":"Cards","text":"default, card()’s size grows accommodate size contents. Thus, card_body() contains large amount text, tables, etc., may want specify height max_height. said, laying multiple cards, ’s likely best specify height card(), instead, let layout determine height layout_column_wrap(). Although scrolling convenient reducing amount space required park lots content, can also nuisance user. help reduce need scrolling, consider pairing scrolling full_screen = TRUE (adds icon expand card’s size browser window). Notice , card expanded full-screen, max_height/height won’t effect full-screen size card. Dolor odio etiam tristique aenean, cubilia ligula leo pulvinar fermentum vestibulum. Hac erat aenean eros dis, integer, ad ultrices ultricies erat rhoncus? Dictumst integer aptent suscipit arcu, turpis, per ultrices, commodo convallis morbi. Proin integer ultrices viverra iaculis cum ut ante ullamcorper. Nulla maecenas molestie. Lorem cursus eu laoreet donec, pulvinar massa non purus, egestas iaculis! Quisque suscipit sociosqu ac, himenaeos eleifend tincidunt auctor elementum enim id netus nibh curabitur. Habitant bibendum – aenean pellentesque neque commodo augue nam. Ullamcorper leo dictumst fermentum , ullamcorper dui aliquet suspendisse dis lacinia facilisis nisl varius? Nullam cum. Dolor faucibus ultricies est suspendisse vestibulum. Ad ultrices elementum luctus montes, sociosqu facilisis primis; senectus augue vulputate eget! Accumsan aliquet auctor, eget sagittis enim; eleifend ornare blandit eros – magnis fusce? Dapibus lacus netus sed id duis nulla quam maecenas feugiat fames senectus dictum cubilia. Mauris arcu lacinia.","code":"card(   max_height = 250,   full_screen = TRUE,   card_header(     \"A long, scrolling, description\"   ),   lorem::ipsum(paragraphs = 3, sentences = 5) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"filling-outputs","dir":"Articles > Cards","previous_headings":"","what":"Filling outputs","title":"Cards","text":"card()’s default behavior optimized facilitating filling layouts. specifically, fill item (e.g., plotly_widget), appears direct child card_body(), resizes fit card()s specified height. means, specifying height = 250 ’ve effectively shrunk plot’s height default 400 200 pixels. , expanded full_screen, plot grows match card()’s new size. htmlwidgets (e.g., plotly, leaflet, etc) Shiny output bindings (e.g, plotOutput(), imageOutput(), etc) fill items default, behavior “just works” scenarios. , situations, ’s helpful remove card_body()’s padding, can done via spacing & alignment utility classes. Fill item(s) aren’t limited much grow shrink, can problematic card becomes small. work around , consider adding min_height card_body() container. example, try using handle lower-right portion card example make card taller/smaller. interactive example bit contrived ’re using CSS resize demonstrate make plots don’t shrink beyond certain point, concept becomes quite useful implementing page-level filling layouts (.e., page_fillable()) multiple cards. ’ll learn filling layouts, fill item loses ability fill wrapped additional UI element isn’t fillable container. fix situation, use as_fill_carrier() allow additional element carry potential fill card_body() fill item.","code":"card(   height = 250,   full_screen = TRUE,   card_header(\"A filling plot\"),   card_body(plotly_widget) ) card(   height = 275,   full_screen = TRUE,   card_header(\"A filling map\"),   card_body(     class = \"p-0\",     leaflet_widget   ),   card_footer(     class = \"fs-6\",     \"Copyright 2023 RStudio, PBC\"   ) ) card(   height = 300,   style = \"resize:vertical;\",   card_header(\"Plots that grow but don't shrink\"),   card_body(     min_height = 250,     plotly_widget,     plotly_widget   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"multiple-card_body","dir":"Articles > Cards","previous_headings":"","what":"Multiple card_body()","title":"Cards","text":"card() can multiple card_body()s, especially useful : Combining resizable non-resizable contents (.e., fill items non-fill). Allowing card_body() styling (via inline styles /utility classes) resizing limits (e.g., min_height). example, pairing filling output scrolling content, may want min_height filling output since scrolling content force shrink: Elit sagittis ante pharetra ligula tincidunt sapien dapibus volutpat. Cursus nam nisl penatibus luctus, eu, praesent suspendisse sagittis curabitur, rhoncus sollicitudin venenatis elementum! Felis habitasse pretium ultricies, arcu lacus: habitant curae, dis venenatis! Interdum fames eros scelerisque cursus: orci phasellus enim sapien aliquam! Est fusce dignissim, commodo iaculis tincidunt fringilla, donec class morbi – elementum auctor scelerisque neque justo netus habitasse. Consectetur proin sodales venenatis, ultricies luctus eget bibendum. Venenatis dis conubia aliquam pretium venenatis habitasse egestas. Dui natoque dui eu aliquet mauris: risus, gravida vitae nunc arcu potenti? Nullam bibendum scelerisque nostra rutrum aenean turpis sagittis orci! Interdum fermentum feugiat eu gravida integer, parturient eros cursus inceptos aenean augue iaculis posuere lacinia tempor ad? Lorem dictumst metus ultricies morbi mus: ullamcorper mus duis. Mauris consequat congue feugiat litora suscipit. Rutrum aliquam ante accumsan inceptos vulputate cum torquent curabitur commodo et lacinia. Fames quisque senectus, vestibulum natoque lacinia. Tortor dis est enim fusce nec. Elit mi dictumst nullam habitasse dis, imperdiet, placerat elementum vivamus. Libero fermentum quis facilisi auctor fermentum fusce potenti eros aliquet arcu. Tempor parturient dui – vulputate metus ultrices consequat: ridiculus molestie cum condimentum. Ad quis montes ridiculus vivamus, dapibus tortor? Na tortor. Elit torquent taciti, sapien ante felis tempus vestibulum lacinia interdum! Vitae magna rhoncus, nunc nisl, etiam magnis mattis aenean fames. Praesent natoque quam nam suspendisse dignissim; pretium, malesuada, massa congue nisi? Cras potenti dis, senectus elementum lacus dapibus natoque laoreet bibendum lacus. Na lacus. Ipsum sodales cubilia torquent leo massa himenaeos erat dignissim. Condimentum sed diam elementum justo congue, luctus curae. Sodales inceptos facilisis ullamcorper, proin odio maecenas natoque ornare iaculis. Placerat scelerisque viverra porta dignissim fermentum eros congue tincidunt et eget! Suspendisse aliquet sem sed donec ultrices convallis nulla penatibus, eget nec laoreet viverra orci eget pharetra; rutrum habitant. Lorem fringilla pulvinar mauris risus ornare . Congue ultricies non platea, neque nisi viverra, class sapien. Libero netus fusce platea parturient auctor taciti molestie egestas lacinia nulla. Sociis natoque curae metus penatibus arcu. Etiam et blandit scelerisque curabitur elementum sagittis etiam, ut quam nascetur fames. Amet porttitor vulputate feugiat – luctus senectus taciti convallis: mauris metus aenean. Mollis malesuada suscipit nam tristique, rhoncus maecenas porttitor nullam? Porta montes rutrum nostra pellentesque taciti proin nibh, nam sem ultricies. Et pulvinar fermentum neque viverra sagittis hendrerit, rhoncus venenatis himenaeos! Facilisis pulvinar venenatis, habitant egestas tortor tincidunt lobortis. Lorem netus mauris dapibus, scelerisque euismod nunc venenatis varius. Sagittis metus habitant, mattis auctor suspendisse suspendisse, orci habitasse? Nam inceptos nisl pellentesque senectus tempor facilisi quam metus mollis, aliquet nec faucibus luctus. Massa cras justo nam id ad ullamcorper porttitor; quisque diam. Viverra sociis. Consectetur convallis senectus accumsan; id cursus porta sem eros. Viverra dignissim, enim ultricies purus sem neque tellus curabitur. Posuere porta orci arcu, fringilla conubia himenaeos urna lacus. Mauris sed aptent, aenean lacinia malesuada turpis justo sagittis class? Na class! Also, content fixed size, allowed scroll, set fill = FALSE: caption","code":"card(   height = 375,   full_screen = TRUE,   card_header(     \"Filling plot, scrolling description\"   ),   card_body(     min_height = 200,     plotly_widget   ),   card_body(     class = \"lead container\",     lorem::ipsum(paragraphs = 10, sentences = 5)   ) ) card(   height = 350,   full_screen = TRUE,   card_header(     \"Filling plot, short description\"   ),   plotly_widget,   card_body(     fill = FALSE, gap = 0,     card_title(\"A subtitle\"),     p(class = \"text-muted\", \"And a caption\")   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"multiple-columns","dir":"Articles > Cards","previous_headings":"","what":"Multiple columns","title":"Cards","text":"’ll learn column-based layouts, layout_column_wrap() great multi-column layouts responsive accommodate filling output. equal-width 2-column layout using width = 1/2, ’s also possible varying column widths. Dolor nullam gravida tincidunt fringilla ultricies eleifend magna enim. Aptent nisi ornare dictum aliquet penatibus arcu duis euismod? Ornare rutrum suspendisse convallis velit ridiculus, velit tempus est fermentum torquent pellentesque. Eleifend metus, laoreet natoque, primis massa facilisi magnis. Cubilia egestas aptent rutrum pretium interdum , neque, netus inceptos pellentesque. Dolor urna ultrices porttitor cras – taciti magna pharetra penatibus. Cubilia rhoncus dapibus, sodales condimentum arcu proin natoque gravida. Accumsan gravida justo orci lacinia convallis augue condimentum habitant. Curae mattis proin tincidunt dignissim et praesent nunc fusce ultrices litora lacinia! Tincidunt tincidunt euismod platea molestie? Adipiscing cum porta accumsan, fusce hac porta porta. Pharetra suscipit bibendum suscipit pellentesque quisque: purus porta magna. Netus quis cras rutrum mi ultrices: torquent senectus! Mauris varius tincidunt cras habitasse metus ut nisi! Felis erat faucibus vel iaculis ridiculus odio quis nullam quam pulvinar nunc litora!","code":"card(   height = 350,   full_screen = TRUE,   card_header(\"A multi-column filling layout\"),   card_body(     min_height = 200,     layout_column_wrap(       width = 1/2,       plotOutput(\"p1\"),       plotOutput(\"p2\")     )   ),   lorem::ipsum(paragraphs = 3, sentences = 5) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"multiple-cards","dir":"Articles > Cards","previous_headings":"","what":"Multiple cards","title":"Cards","text":"layout_column_wrap() especially nice laying multiple cards since card particular row height (default). Learn column-based layouts.","code":"layout_column_wrap(   width = 1/2,   height = 300,   card(full_screen = TRUE, card_header(\"A filling plot\"), plotly_widget),   card(full_screen = TRUE, card_header(\"A filling map\"), card_body(class = \"p-0\", leaflet_widget)) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"multiple-tabs","dir":"Articles > Cards","previous_headings":"","what":"Multiple tabs","title":"Cards","text":"navset_card_tab() navset_card_pill() make possible create cards multiple tabs pills. functions full_screen capabilities normal card()s well options like title (since natural place card_header() used). Note , nav_panel() object similar card(). , direct children aren’t already card items (e.g., card_title()), get implicitly wrapped card_body(). Plotly Leaflet  Learn htmlwidgets","code":"library(leaflet) navset_card_tab(   height = 450,   full_screen = TRUE,   title = \"HTML Widgets\",   nav_panel(     \"Plotly\",     card_title(\"A plotly plot\"),     plotly_widget   ),   nav_panel(     \"Leaflet\",     card_title(\"A leaflet plot\"),     leaflet_widget   ),   nav_panel(     shiny::icon(\"circle-info\"),     markdown(\"Learn more about [htmlwidgets](http://www.htmlwidgets.org/)\")   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"sidebars","dir":"Articles > Cards","previous_headings":"","what":"Sidebars","title":"Cards","text":"’ll learn sidebar layouts, layout_sidebar() just works placed inside card(). case, want fill items (e.g., plotly_widget) still fill card like ’ve seen , ’ll need set fillable = TRUE layout_sidebar().","code":"card(   height = 300,   full_screen = TRUE,   card_header(\"A sidebar layout inside a card\"),   layout_sidebar(     fillable = TRUE,     sidebar = sidebar(       actionButton(\"btn\", \"A button\")     ),     plotly_widget   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"static-images","dir":"Articles > Cards","previous_headings":"","what":"Static images","title":"Cards","text":"card_image() makes easy embed static (.e., pre-generated) images card. Provide URL href make clickable. case multiple card_image()s, consider laying multiple cards layout_column_wrap() produce grid clickable thumbnails. Brought RStudio.","code":"card(   height = 300,   full_screen = TRUE,   card_image(     file = \"shiny-hex.svg\",     alt = \"Shiny's hex sticker\",     href = \"https://github.com/rstudio/shiny\"   ),   card_body(     fill = FALSE,     card_title(\"Shiny for R\"),     p(       class = \"fw-light text-muted\",       \"Brought to you by RStudio.\"     )   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"flexbox","dir":"Articles > Cards","previous_headings":"","what":"Flexbox","title":"Cards","text":"card() card_body() default fillable = TRUE (, CSS flexbox containers), works wonders facilitating filling outputs, also leads surprising behavior inline tags (e.g., actionButton(), span(), strings, etc). Specifically, inline tag placed new line, “normal” layout flow (fillable = FALSE), inline tags render inline. said, sometimes working flexbox layout quite useful, even working inline tags. leverage flexbox’s gap property control spacing plot, (full-width) button, paragraph. Note , using markdown() paragraph, wraps results <p> tag, means contents paragraph longer subject flexbox layout. wanted, something similar render actionButton() inline wrapping div(). simple hyperlink. addition gap, flexbox really nice ways handling otherwise difficult spacing alignment issues. , thanks Bootstrap’s flex utility classes, can easily opt-customize defaults.","code":"card(   card_body(     fillable = TRUE,     \"Here's some\", tags$i(\"inline\"), \"text\",     actionButton(\"btn1\", \"A button\")   ),   card_body(     fillable = FALSE,     \"Here's some\", tags$i(\"inline\"), \"text\",     actionButton(\"btn2\", \"A button\")   ) ) card(   height = 325, full_screen = TRUE,   card_header(\"A plot with an action links\"),   card_body(     class = \"gap-2 container\",     plotly_widget,     actionButton(       \"go_btn\", \"Action button\",       class = \"btn-primary rounded-0\"     ),     markdown(\"Here's a _simple_ [hyperlink](https://www.google.com/).\")   ) ) card(   height = 300, full_screen = TRUE,   card_header(     class = \"d-flex justify-content-between\",     \"Centered plot\",     checkboxInput(\"check\", \" Check me\", TRUE)   ),   card_body(     class = \"align-items-center\",     plotOutput(\"id\", width = \"75%\")   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"shiny","dir":"Articles > Cards","previous_headings":"","what":"Shiny","title":"Cards","text":"Since article statically rendered, examples use statically rendered content/widgets, card() functionality works dynamically rendered content via Shiny (e.g., plotOutput(), plotlyOutput(), etc). additional benefit comes using shiny ability use getCurrentOutputInfo() render new/different content output container becomes large enough, particularly useful card(full_screen = T, ...). example, may want additional captions/labels plot large, additional controls table, etc (see value boxes article clever use ).","code":"# UI logic ui <- page_fluid(   card(     max_height = 200,     full_screen = TRUE,     card_header(\"A dynamically rendered plot\"),     plotOutput(\"plot_id\")   ) )  # Server logic server <- function(input, output, session) {   output$plot_id <- renderPlot({     info <- getCurrentOutputInfo()     if (info$height() > 600) {       # code for \"large\" plot     } else {       # code for \"small\" plot     }   }) }  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/cards/index.html","id":"appendix","dir":"Articles > Cards","previous_headings":"","what":"Appendix","title":"Cards","text":"following CSS used give plotOutput() background color; ’s necessary documentation page actually hooked Shiny app, can’t show real plot.","code":".shiny-plot-output {   background-color: #216B7288;   height: 400px;   width: 100%; }"},{"path":"https://rstudio.github.io/bslib/dev/articles/column-layout/index.html","id":"uniform-width-and-height","dir":"Articles > Column-layout","previous_headings":"","what":"Uniform width and height","title":"Column-based layout","text":"displaying multiple cards (value boxes, etc) , ’s often visually appealing displayed grid-like layout card height width. layout_column_wrap() optimizes design principle, demands width column (number columns). event cards columns available, cards wrapped new row (default, rows height, can easily vary row height).","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/column-layout/index.html","id":"fixed-number-of-columns","dir":"Articles > Column-layout","previous_headings":"Uniform width and height","what":"Fixed number of columns","title":"Column-based layout","text":"fixed number columns, provide width = 1/n, n number columns.1 animation (except mobile devices) shows, width layout_column_wrap() container changes, card grows shrinks maintain 1/2 width. Dolor odio etiam tristique aenean, cubilia ligula leo pulvinar fermentum vestibulum. Hac erat aenean eros dis, integer, ad ultrices ultricies erat rhoncus? Dictumst integer aptent suscipit arcu, turpis, per ultrices, commodo convallis morbi. Proin integer ultrices viverra iaculis cum ut ante ullamcorper. Nulla maecenas molestie. Lorem cursus eu laoreet donec, pulvinar massa non purus, egestas iaculis! Quisque suscipit sociosqu ac, himenaeos eleifend tincidunt auctor elementum enim id netus nibh curabitur. Habitant bibendum – aenean pellentesque neque commodo augue nam. Ullamcorper leo dictumst fermentum , ullamcorper dui aliquet suspendisse dis lacinia facilisis nisl varius? Nullam cum. Dolor faucibus ultricies est suspendisse vestibulum. Ad ultrices elementum luctus montes, sociosqu facilisis primis; senectus augue vulputate eget! Accumsan aliquet auctor, eget sagittis enim; eleifend ornare blandit eros – magnis fusce? Dapibus lacus netus sed id duis nulla quam maecenas feugiat fames senectus dictum cubilia. Mauris arcu lacinia. One potential issue fixed number columns , medium sized screens, card width may become small. happens problem, specifying “responsive” number columns may preferable.","code":"layout_column_wrap(   width = 1/2, height = 300,   card1, card2, card3 ) |>   anim_width(\"100%\", \"67%\")"},{"path":"https://rstudio.github.io/bslib/dev/articles/column-layout/index.html","id":"responsive-number-of-columns","dir":"Articles > Column-layout","previous_headings":"Uniform width and height","what":"Responsive number of columns","title":"Column-based layout","text":"responsive number columns (.e., number columns depends window size), provide width valid CSS unit, like 200 pixels. case (three cards), 3rd card gets wrapped onto new line viewport less 600 pixels, wider screens, cards equally distribute free space. Dolor odio etiam tristique aenean, cubilia ligula leo pulvinar fermentum vestibulum. Hac erat aenean eros dis, integer, ad ultrices ultricies erat rhoncus? Dictumst integer aptent suscipit arcu, turpis, per ultrices, commodo convallis morbi. Proin integer ultrices viverra iaculis cum ut ante ullamcorper. Nulla maecenas molestie. Lorem cursus eu laoreet donec, pulvinar massa non purus, egestas iaculis! Quisque suscipit sociosqu ac, himenaeos eleifend tincidunt auctor elementum enim id netus nibh curabitur. Habitant bibendum – aenean pellentesque neque commodo augue nam. Ullamcorper leo dictumst fermentum , ullamcorper dui aliquet suspendisse dis lacinia facilisis nisl varius? Nullam cum. Dolor faucibus ultricies est suspendisse vestibulum. Ad ultrices elementum luctus montes, sociosqu facilisis primis; senectus augue vulputate eget! Accumsan aliquet auctor, eget sagittis enim; eleifend ornare blandit eros – magnis fusce? Dapibus lacus netus sed id duis nulla quam maecenas feugiat fames senectus dictum cubilia. Mauris arcu lacinia.","code":"layout_column_wrap(   width = \"200px\", height = 300,   card1, card2, card3 ) |>   anim_width(\"100%\", \"67%\")"},{"path":"https://rstudio.github.io/bslib/dev/articles/column-layout/index.html","id":"fixed-column-width","dir":"Articles > Column-layout","previous_headings":"Uniform width and height","what":"Fixed column width","title":"Column-based layout","text":"keep width column fixed (don’t allow cards grow take free space), set fixed_width = TRUE. Dolor odio etiam tristique aenean, cubilia ligula leo pulvinar fermentum vestibulum. Hac erat aenean eros dis, integer, ad ultrices ultricies erat rhoncus? Dictumst integer aptent suscipit arcu, turpis, per ultrices, commodo convallis morbi. Proin integer ultrices viverra iaculis cum ut ante ullamcorper. Nulla maecenas molestie. Lorem cursus eu laoreet donec, pulvinar massa non purus, egestas iaculis! Quisque suscipit sociosqu ac, himenaeos eleifend tincidunt auctor elementum enim id netus nibh curabitur. Habitant bibendum – aenean pellentesque neque commodo augue nam. Ullamcorper leo dictumst fermentum , ullamcorper dui aliquet suspendisse dis lacinia facilisis nisl varius? Nullam cum. Dolor faucibus ultricies est suspendisse vestibulum. Ad ultrices elementum luctus montes, sociosqu facilisis primis; senectus augue vulputate eget! Accumsan aliquet auctor, eget sagittis enim; eleifend ornare blandit eros – magnis fusce? Dapibus lacus netus sed id duis nulla quam maecenas feugiat fames senectus dictum cubilia. Mauris arcu lacinia.","code":"layout_column_wrap(   width = \"200px\", height = 300,   fixed_width = TRUE,   card1, card2, card3 ) |>   anim_width(\"100%\", \"67%\")"},{"path":"https://rstudio.github.io/bslib/dev/articles/column-layout/index.html","id":"varying-heights","dir":"Articles > Column-layout","previous_headings":"","what":"Varying heights","title":"Column-based layout","text":"default, layout_column_wrap() wraps columns onto new row, rows given equal height.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/column-layout/index.html","id":"by-row","dir":"Articles > Column-layout","previous_headings":"Varying heights","what":"By row","title":"Column-based layout","text":"allow height row different, set heights_equal = \"row\": Dolor odio etiam tristique aenean, cubilia ligula leo pulvinar fermentum vestibulum. Hac erat aenean eros dis, integer, ad ultrices ultricies erat rhoncus? Dictumst integer aptent suscipit arcu, turpis, per ultrices, commodo convallis morbi. Proin integer ultrices viverra iaculis cum ut ante ullamcorper. Nulla maecenas molestie. Lorem cursus eu laoreet donec, pulvinar massa non purus, egestas iaculis! Quisque suscipit sociosqu ac, himenaeos eleifend tincidunt auctor elementum enim id netus nibh curabitur. Habitant bibendum – aenean pellentesque neque commodo augue nam. Ullamcorper leo dictumst fermentum , ullamcorper dui aliquet suspendisse dis lacinia facilisis nisl varius? Nullam cum. Dolor faucibus ultricies est suspendisse vestibulum. Ad ultrices elementum luctus montes, sociosqu facilisis primis; senectus augue vulputate eget! Accumsan aliquet auctor, eget sagittis enim; eleifend ornare blandit eros – magnis fusce? Dapibus lacus netus sed id duis nulla quam maecenas feugiat fames senectus dictum cubilia. Mauris arcu lacinia.","code":"layout_column_wrap(   width = 1/2,   heights_equal = \"row\",   card1, card3, card2 ) |>   anim_height(300, 450)"},{"path":"https://rstudio.github.io/bslib/dev/articles/column-layout/index.html","id":"by-cell","dir":"Articles > Column-layout","previous_headings":"Varying heights","what":"By cell","title":"Column-based layout","text":"Since card fill item default (.e., fill = TRUE), card grows/shrinks fill available vertical space particular row. can prevented setting fill = FALSE particular card. Dolor odio etiam tristique aenean, cubilia ligula leo pulvinar fermentum vestibulum. Hac erat aenean eros dis, integer, ad ultrices ultricies erat rhoncus? Dictumst integer aptent suscipit arcu, turpis, per ultrices, commodo convallis morbi. Proin integer ultrices viverra iaculis cum ut ante ullamcorper. Nulla maecenas molestie. Lorem cursus eu laoreet donec, pulvinar massa non purus, egestas iaculis! Quisque suscipit sociosqu ac, himenaeos eleifend tincidunt auctor elementum enim id netus nibh curabitur. Habitant bibendum – aenean pellentesque neque commodo augue nam. Ullamcorper leo dictumst fermentum , ullamcorper dui aliquet suspendisse dis lacinia facilisis nisl varius? Nullam cum. Dolor faucibus ultricies est suspendisse vestibulum. Ad ultrices elementum luctus montes, sociosqu facilisis primis; senectus augue vulputate eget! Accumsan aliquet auctor, eget sagittis enim; eleifend ornare blandit eros – magnis fusce? Dapibus lacus netus sed id duis nulla quam maecenas feugiat fames senectus dictum cubilia. Mauris arcu lacinia.","code":"layout_column_wrap(   width = \"200px\",   card1, card3,    card(fill = FALSE,     card_header(\"Nothing much here\"),     \"This is it.\"   ) ) |>   anim_height(300, 450)"},{"path":"https://rstudio.github.io/bslib/dev/articles/column-layout/index.html","id":"varying-widths","dir":"Articles > Column-layout","previous_headings":"","what":"Varying widths","title":"Column-based layout","text":"Set width NULL provide custom grid-template-columns property (possibly CSS grid properties) accomplish complex layouts, like varying column widths. particular layout gives 1st 3rd card twice much space 2nd: Dolor odio etiam tristique aenean, cubilia ligula leo pulvinar fermentum vestibulum. Hac erat aenean eros dis, integer, ad ultrices ultricies erat rhoncus? Dictumst integer aptent suscipit arcu, turpis, per ultrices, commodo convallis morbi. Proin integer ultrices viverra iaculis cum ut ante ullamcorper. Nulla maecenas molestie. Lorem cursus eu laoreet donec, pulvinar massa non purus, egestas iaculis! Quisque suscipit sociosqu ac, himenaeos eleifend tincidunt auctor elementum enim id netus nibh curabitur. Habitant bibendum – aenean pellentesque neque commodo augue nam. Ullamcorper leo dictumst fermentum , ullamcorper dui aliquet suspendisse dis lacinia facilisis nisl varius? Nullam cum. Dolor faucibus ultricies est suspendisse vestibulum. Ad ultrices elementum luctus montes, sociosqu facilisis primis; senectus augue vulputate eget! Accumsan aliquet auctor, eget sagittis enim; eleifend ornare blandit eros – magnis fusce? Dapibus lacus netus sed id duis nulla quam maecenas feugiat fames senectus dictum cubilia. Mauris arcu lacinia.","code":"layout_column_wrap(   width = NULL, height = 300, fill = FALSE,   style = css(grid_template_columns = \"2fr 1fr 2fr\"),   card1, card2, card3 ) |>   anim_height(300, 450)"},{"path":"https://rstudio.github.io/bslib/dev/articles/column-layout/index.html","id":"nested-layouts","dir":"Articles > Column-layout","previous_headings":"","what":"Nested layouts","title":"Column-based layout","text":"complex layouts can achieved leveraging fact layout_column_wrap() can appear within another layout_column_wrap()s. example Dolor odio etiam tristique aenean, cubilia ligula leo pulvinar fermentum vestibulum. Hac erat aenean eros dis, integer, ad ultrices ultricies erat rhoncus? Dictumst integer aptent suscipit arcu, turpis, per ultrices, commodo convallis morbi. Proin integer ultrices viverra iaculis cum ut ante ullamcorper. Nulla maecenas molestie. Lorem cursus eu laoreet donec, pulvinar massa non purus, egestas iaculis! Quisque suscipit sociosqu ac, himenaeos eleifend tincidunt auctor elementum enim id netus nibh curabitur. Habitant bibendum – aenean pellentesque neque commodo augue nam. Ullamcorper leo dictumst fermentum , ullamcorper dui aliquet suspendisse dis lacinia facilisis nisl varius? Nullam cum. Dolor faucibus ultricies est suspendisse vestibulum. Ad ultrices elementum luctus montes, sociosqu facilisis primis; senectus augue vulputate eget! Accumsan aliquet auctor, eget sagittis enim; eleifend ornare blandit eros – magnis fusce? Dapibus lacus netus sed id duis nulla quam maecenas feugiat fames senectus dictum cubilia. Mauris arcu lacinia.","code":"layout_column_wrap(   width = 1/2,   height = 300,   card1,   layout_column_wrap(     width = 1,     heights_equal = \"row\",     card2, card3   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/column-layout/index.html","id":"other-grid-based-layouts","dir":"Articles > Column-layout","previous_headings":"","what":"Other grid-based layouts","title":"Column-based layout","text":"layout_column_wrap() provides simplified interface CSS grid won’t accommodate everything can . case, recommend using {gridlayout} /Shiny UI editor produce layout.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/column-layout/index.html","id":"appendix","dir":"Articles > Column-layout","previous_headings":"","what":"Appendix","title":"Column-based layout","text":"spirit reproducibility, section discloses custom CSS R code used examples . following CSS used give plotOutput() background color; ’s necessary documentation page actually hooked Shiny app, can’t show real plot. R functions add animation-related CSS class styles whatever tags give . CSS animation rules power anim_width anim_height R functions.","code":".shiny-plot-output {   background-color: #216B7288;   height: 400px;   width: 100%; } library(htmltools)  anim_width <- function(x, width1, width2) {   x |> tagAppendAttributes(     class = \"animate-width\",     style = css(       `--width1` = validateCssUnit(width1),       `--width2` = validateCssUnit(width2),     ),   ) }  anim_height <- function(x, height1, height2) {   # Wrap in a div fixed at the height of height2, so the rest of   # the content on the page doesn't shift up and down   div(style = css(height = validateCssUnit(height2)),     x |> tagAppendAttributes(       class = \"animate-height\",       style = css(         `--height1` = validateCssUnit(height1),         `--height2` = validateCssUnit(height2),       ),     )   ) } @keyframes changewidth {   from { width: var(--width1); }   25% { width: var(--width1); }   50% { width: var(--width2); }   75% { width: var(--width2); }   to { width: var(--width1); } } .animate-width {   animation-duration: 6s;   animation-name: changewidth;   animation-iteration-count: infinite;   border-right: 2px solid #DDD;   padding-right: 1rem;   padding-bottom: 3rem; }  @keyframes changeheight {   from { height: var(--height1); }   25% { height: var(--height1); }   50% { height: var(--height2); }   75% { height: var(--height2); }   to { height: var(--height1); } } .animate-height {   height: 600px;   animation-duration: var(--anim-duration, 6s);   animation-name: changeheight;   animation-iteration-count: infinite;   padding-bottom: 3rem; }"},{"path":"https://rstudio.github.io/bslib/dev/articles/custom-components/index.html","id":"a-basic-themeable-component","dir":"Articles > Custom-components","previous_headings":"","what":"A basic themeable component","title":"Custom components","text":"going full-blown dynamically themeable custom component, let’s start relatively straight-forward example implementing custom person() component. Say following R function generate HTML classes ’ll write custom Sass/CSS styles : ’s custom Sass style classes. Since Sass rules listen Bootstrap Sass variables like $gray-600, person() styles works great different bs_theme() input: save Sass rules file named person.scss, can bs_add_rules() bs_theme() use themeable person() component like :","code":"person <- function(name, title, company) {   div(     class = \"person\",     h3(class = \"name\", name),     div(class = \"title\", title),     div(class = \"company\", company)   ) } .person {   display: inline-block;   padding: $spacer;   border: $border-width solid $border-color;   @include border-radius;   @include box-shadow;   outline: 0;   width: 300px;   .title {     font-weight: bold;   }   .title, .company {     color: $gray-600;   }   margin: $grid-gutter-width;   margin-right: 0;   // On mobile, span entire width   @include media-breakpoint-down(sm) {     display: block;     width: auto;     margin-right: $grid-gutter-width;   } } .person:last-of-type {   margin-right: $grid-gutter-width; } ui <- fluidPage(   theme = bs_theme(bg = \"#002B36\", fg = \"#EEE8D5\") %>%     bs_add_rules(sass::sass_file(\"person.scss\")),   person(\"Andrew Carnegie\", \"Owner\", \"Carnegie Steel Company\"),   person(\"John D. Rockefeller\", \"Chairman\", \"Standard Oil\") ) shinyApp(ui, function(input, output) {})"},{"path":"https://rstudio.github.io/bslib/dev/articles/custom-components/index.html","id":"dynamically-themeable-component","dir":"Articles > Custom-components","previous_headings":"","what":"Dynamically themeable component","title":"Custom components","text":"make custom person() component dynamically themeable (.e., make work session$setCurrentTheme()), need R function generates htmltools::htmlDependency() given theme. required, suppose function, person_dependency, lives R package called {mypkg} includes person.scss (pre-compiled person.css) file inst/ directory. following: Note theme bs_theme() object, person.scss compiled Bootstrap Sass variables mixins included via bs_dependency() (returns compiled CSS htmlDependency()). Otherwise, theme bs_theme() object, person() used context bslib relevant, pre-compiled CSS file returned instead. Pre-complied CSS isn’t necessarily requirement, ’s good idea increasing performance reducing software dependencies end users.","code":"name <- \"person\" version <- \"1.0.0\" person_dependency <- function(theme) {   if (is_bs_theme(theme)) {     scss <- system.file(package = \"mypkg\", \"person.scss\")     bs_dependency(       input = sass::sass_file(scss),       theme = theme,       name = name,       version = version     )   } else {     htmlDependency(       name = name,       version = version,       stylesheet = \"person.css\",       package = \"mypkg\",       all_files = FALSE     )   } }  #' @export person <- function(name, title, company) {   div(     class = \"person\",     h3(class = \"name\", name),     div(class = \"title\", title),     div(class = \"company\", company),     bs_dependency_defer(person_dependency)   ) }"},{"path":"https://rstudio.github.io/bslib/dev/articles/custom-components/index.html","id":"html-widgets","dir":"Articles > Custom-components","previous_headings":"","what":"HTML widgets","title":"Custom components","text":"htmlwidgets can themed via CSS, recommend supplying bs_dependency_defer() dependencies argument createWidget() (similar person() component last section), make widget dynamically themeable. widgets can themed via CSS, best option may query active theme inside preRenderHook() via bs_current_theme(), translate relevant information widget’s instance data, example:","code":"my_widget <- function(...) {   createWidget(     name = \"mywidget\", ...,     preRenderHook = my_widget_hook   ) } my_widget_hook <- function(instance) {   theme <- bslib::bs_current_theme()   if (!bslib::is_bs_theme(theme)) {     return(instance)   }   instance$x$theme <- modifyList(     instance$x$theme, as.list(       bslib::bs_get_variables(theme, c(\"bg\", \"fg\"))     )   )   instance }"},{"path":"https://rstudio.github.io/bslib/dev/articles/dashboards/index.html","id":"hello-dashboards","dir":"Articles > Dashboards","previous_headings":"","what":"Hello dashboards","title":"Dashboards","text":"Quickly create dashboard providing title, sidebar, main area contents page_sidebar().  sidebar main content areas can hold arbitrary collection UI elements, ’s good practice keep inputs sidebar outputs main content area. Also, consider wrapping outputs card() sidebar contents sidebar() object add title /customize styling, positioning, etc. Let’s start basic yet interesting example customizable histogram numeric variables palmerpenguins dataset.  Throughout rest article, ’ll cover layout multiple outputs, add multiple pages, . , ’ll useful reusable outputs inputs. , let’s create list cards, plotOutput() container numeric variable interest, plus color_by input control color histograms species, island, sex. Now, quick example, let’s pass color_by directly sidebar cards main content area. default, card placed new row, cards allowed grow/shrink fit browser window (browser window wide enough). next section, ’ll cover customize layout.","code":"library(shiny) library(bslib)  ui <- page_sidebar(   title = \"My dashboard\",   sidebar = \"Sidebar\",   \"Main content area\" )  shinyApp(ui, function(input, output) {}) library(ggplot2) data(penguins, package = \"palmerpenguins\")  ui <- page_sidebar(   title = \"Penguins dashboard\",   sidebar = sidebar(     title = \"Histogram controls\",     varSelectInput(       \"var\", \"Select variable\",       dplyr::select_if(penguins, is.numeric)     ),     numericInput(\"bins\", \"Number of bins\", 30)   ),   card(     card_header(\"Histogram\"),     plotOutput(\"p\")   ) )  server <- function(input, output) {   output$p <- renderPlot({     ggplot(penguins) +       geom_histogram(aes(!!input$var), bins = input$bins) +       theme_bw(base_size = 20)   }) }  shinyApp(ui, server) cards <- list(   card(     full_screen = TRUE,     card_header(\"Bill Length\"),     plotOutput(\"bill_length\")   ),   card(     full_screen = TRUE,     card_header(\"Bill depth\"),     plotOutput(\"bill_depth\")   ),   card(     full_screen = TRUE,     card_header(\"Body Mass\"),     plotOutput(\"body_mass\")   ) )  color_by <- varSelectInput(   \"color_by\", \"Color by\",   penguins[c(\"species\", \"island\", \"sex\")],   selected = \"species\" ) ui <- page_sidebar(   title = \"Penguins dashboard\",   sidebar = color_by,   !!!cards )  server <- function(input, output) {   gg_plot <- reactive({     ggplot(penguins) +       geom_density(aes(fill = !!input$color_by), alpha = 0.2) +       theme_bw(base_size = 16) +       theme(axis.title = element_blank())   })    output$bill_length <- renderPlot(gg_plot() + aes(bill_length_mm))   output$bill_depth <- renderPlot(gg_plot() + aes(bill_depth_mm))   output$body_mass <- renderPlot(gg_plot() + aes(body_mass_g)) }  shinyApp(ui, server)"},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/articles/dashboards/index.html","id":"multi-column","dir":"Articles > Dashboards","previous_headings":"Layouts","what":"Multi-column","title":"Dashboards","text":"Create multi-column layouts layout_columns(). col_widths specified, divides space evenly among UI elements row.  vector column widths may also supplied allocate given number columns (12) element. , elements go beyond 12 column mark, get wrapped onto new row. default, row heights equal, can customized row_heights argument (numeric values interpreted fractional units, fixed length units also supported).  Negative col_widths may also provided easily create negative/empty space:  Although don’t show , layout_columns() also supports different col_widths row_heights different breakpoints(). useful creating responsive layouts adapt different screen sizes. learn , visit layout_columns().","code":"ui <- page_sidebar(   title = \"Penguins dashboard\",   sidebar = color_by,   layout_columns(cards[[1]], cards[[2]]),   cards[[3]] )  shinyApp(ui, server) ui <- page_sidebar(   title = \"Penguins dashboard\",   sidebar = color_by,   layout_columns(     col_widths = c(4, 8, 12),     row_heights = c(1, 2),     cards[[1]],     cards[[2]],     cards[[3]]   ) )  shinyApp(ui, server) ui <- page_sidebar(   title = \"Penguins dashboard\",   sidebar = color_by,   layout_columns(     col_widths = c(4, 8, -2, 8, -2),     cards[[1]],     cards[[2]],     cards[[3]]   ) )  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/dashboards/index.html","id":"multi-page","dir":"Articles > Dashboards","previous_headings":"Layouts","what":"Multi-page","title":"Dashboards","text":"add multiple pages, change page_sidebar() page_navbar() use nav_panel() supply title content page. can also take advantage bslib’s nav_spacer() nav_item() control alignment UI elements navbar (e.g., external hyperlink).  wary page_navbar()’s sidebar argument puts sidebar every page, may may desirable. sidebar article, ’ll learn strategies keeping sidebar’s contents close elements affect. Specifically, article covers : (1) hide/show sidebar contents particular pages, (2) put particular sidebar() given page, even (3) put sidebar layouts inside card().","code":"ui <- page_navbar(   title = \"Penguins dashboard\",   sidebar = color_by,   nav_spacer(),   nav_panel(\"Bill Length\", cards[[1]]),   nav_panel(\"Bill Depth\", cards[[2]]),   nav_panel(\"Body Mass\", cards[[3]]),   nav_item(tags$a(\"Posit\", href = \"https://posit.co\")) )  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/dashboards/index.html","id":"multi-panel","dir":"Articles > Dashboards","previous_headings":"Layouts","what":"Multi-panel","title":"Dashboards","text":"Multiple nav_panel()s don’t necessarily need go directly page_navbar(). can also consumed navset_*() component, including navset_card_underline().  See learn multi-panel layout options.","code":"ui <- page_sidebar(   title = \"Penguins dashboard\",   sidebar = color_by,   navset_card_underline(     title = \"Histograms by species\",     nav_panel(\"Bill Length\", plotOutput(\"bill_length\")),     nav_panel(\"Bill Depth\", plotOutput(\"bill_depth\")),     nav_panel(\"Body Mass\", plotOutput(\"body_mass\"))   ) )  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/dashboards/index.html","id":"scrolling-vs-filling","dir":"Articles > Dashboards","previous_headings":"Layouts","what":"Scrolling vs filling","title":"Dashboards","text":"page_sidebar() page_navbar() default filling layout, meaning outputs like plotOutput(), htmlwidgets, etc. encouraged grow/shrink fit browser window. result, contents large intrinsic minimum height (e.g., long textual description), filling layout may cause cards/outputs grow/shrink beyond desirable. combat , consider setting height card()s shouldn’t grow/shrink min_height/max_height card()s shouldn’t shrink/grow beyond certain point.  Filling layout may desirable lot outputs display single page. case, consider setting fillable = FALSE prevent growing/shrinking altogether. page layout fillable, outputs fall back intrinsic height, usually 400px. Users able scroll page outputs take vertical space height window.  Like page_sidebar(), page_navbar() also fillable argument also defaults TRUE, makes every page (.e., nav_panel()) fillable. make just subset pages fillable, pass vector page names fillable (e.g., fillable = c(\"Bill Length\", \"Bill Depth\")). make pages non-fillable, set fillable = FALSE.","code":"ui <- page_sidebar(   title = \"Penguins dashboard\",   sidebar = color_by,   card(min_height = 200, plotOutput(\"bill_length\")),   card(height = 200, lorem::ipsum(15)) )  shinyApp(ui, server) ui <- page_sidebar(   title = \"Penguins dashboard\",   sidebar = color_by,   fillable = FALSE,   !!!cards )  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/dashboards/index.html","id":"mobile-layout","dir":"Articles > Dashboards","previous_headings":"Layouts","what":"Mobile layout","title":"Dashboards","text":"default, filling layout enabled mobile devices, meaning fillable effectively FALSE case. enable filling layout mobile devices, set fillable_mobile = TRUE. case, ’s good practice set min_height card()s prevent growing/shrinking beyond desirable. Also, sidebars collapsed default mobile devices, can opened via sidebar()’s open argument.","code":"ui <- page_sidebar(   title = \"Penguins dashboard\",   sidebar = color_by,   fillable_mobile = TRUE,   card(min_height = 200, plotOutput(\"bill_length\")),   card(height = 200, lorem::ipsum(15)) )  shinyApp(ui, server)"},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/articles/dashboards/index.html","id":"value-boxes","dir":"Articles > Dashboards","previous_headings":"Components","what":"Value boxes","title":"Dashboards","text":"value_box() special kind card designed highlighting value along title showcase placeholder (typically bsicons icon). covered detail value boxes article, ’s palmerpenguins example:","code":"means <- colMeans(   penguins[c(\"bill_length_mm\", \"bill_depth_mm\", \"body_mass_g\")],   na.rm = TRUE )  ui <- page_sidebar(   title = \"Penguins dashboard\",   sidebar = color_by,   layout_columns(     fill = FALSE,     value_box(       title = \"Average bill length\",       value = scales::unit_format(unit = \"mm\")(means[[1]]),       showcase = bsicons::bs_icon(\"align-bottom\")     ),     value_box(       title = \"Average bill depth\",       value = scales::unit_format(unit = \"mm\")(means[[2]]),       showcase = bsicons::bs_icon(\"align-center\")     ),     value_box(       title = \"Average body mass\",       value = scales::unit_format(unit = \"g\", big.mark = \",\")(means[[3]]),       showcase = bsicons::bs_icon(\"handbag\")     )   ),   layout_columns(     cards[[1]], cards[[2]]   ),   cards[[3]] )  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/dashboards/index.html","id":"accordions","dir":"Articles > Dashboards","previous_headings":"Components","what":"Accordions","title":"Dashboards","text":"accordion() uses vertical collapsing provide scalable navigation many sections content. Accordions can placed anywhere page, including sidebar, convenient grouping sections input controls. Learn accordions reference page.","code":"ui <- page_sidebar(   title = \"Penguins dashboard\",    sidebar = sidebar(     bg = \"white\",     accordion(       accordion_panel(         \"Primary controls\",         color_by       ),       accordion_panel(         \"Other controls\",         \"Other controls go here\"       )     )   ),    accordion(     open = c(\"Bill Length\", \"About\"),     accordion_panel(       \"Bill Length\",       plotOutput(\"bill_length\")     ),     accordion_panel(       \"Bill Depth\",       plotOutput(\"bill_depth\")     ),     accordion_panel(       \"Body Mass\",       plotOutput(\"body_mass\")     )   ) )  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/dashboards/index.html","id":"cards-with-sidebars","dir":"Articles > Dashboards","previous_headings":"Components","what":"Cards with sidebars","title":"Dashboards","text":"’ve already seen sidebar argument page_sidebar() page_navbar() yields “page-level” sidebar layout, can also made “component-level” via layout_sidebar(). especially useful keeping input controls near outputs affect complex apps. layout_sidebar() also works inside card(), making easy add headers, footers, full_screen behavior, etc. learn , visit cards sidebars articles.","code":"ui <- page_sidebar(   title = \"Penguins dashboard\",   sidebar = sidebar(     title = \"Global controls\",     color_by   ),   card(     full_screen = TRUE,     card_header(\"Bill Length\"),     layout_sidebar(       sidebar = sidebar(         title = \"Local controls\",         position = \"right\",         \"...\"       ),       plotOutput(\"bill_length\")     )   ),   cards[[2]],   cards[[3]], )  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/dashboards/index.html","id":"theming","dir":"Articles > Dashboards","previous_headings":"","what":"Theming","title":"Dashboards","text":"getting started theming article, ’ll learn general theming strategies also translate dashboards. , passing bs_theme() object theme argument page_sidebar() (page_navbar()), can add Bootswatch theme, easily use Google Fonts, customize 100s theming variables, much . Keep mind, however, bs_theme() customizes CSS styles. , want plotOutput()s match CSS, consider using thematic package translate styles ggplot2::theme() settings. , also aware “complete” ggplot2 themes (e.g., theme_bw()) work sensibly setting globally (.e., theme_set(theme_bw())).","code":"ui <- page_sidebar(   title = \"Penguins dashboard\",   sidebar = color_by,   theme = bs_theme(     bootswatch = \"darkly\",     base_font = font_google(\"Inter\"),     navbar_bg = \"#25443B\"   ),   !!!cards )  # Enable thematic thematic::thematic_shiny(font = \"auto\")  # Change ggplot2's default \"gray\" theme theme_set(theme_bw(base_size = 16))  # New server logic (removes the `+ theme_bw()` part) server <- function(input, output) {   gg_plot <- reactive({     ggplot(penguins) +       geom_density(aes(fill = !!input$color_by), alpha = 0.2) +       theme(axis.title = element_blank())   })    output$bill_length <- renderPlot(gg_plot() + aes(bill_length_mm))   output$bill_depth <- renderPlot(gg_plot() + aes(bill_depth_mm))   output$body_mass <- renderPlot(gg_plot() + aes(body_mass_g)) }  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/dashboards/index.html","id":"in-production","dir":"Articles > Dashboards","previous_headings":"","what":"In production","title":"Dashboards","text":"deploying dashboard production, ’s wise “hard-code” version Bootstrap used developed. reduces chance dashboard breaking bslib updates ’s Bootstrap dependency. , call version_default() get current version Bootstrap, pass value bs_theme(version = ...) (pass theme object theme argument relevant page_*() function).","code":"library(shiny)  ui <- page_sidebar(   theme = bs_theme(version = 5),   ... )  shinyApp(ui, function(...) {})"},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/articles/examples/index.html","id":"multi-page","dir":"Articles > Examples","previous_headings":"Sidebar layouts","what":"Multi-page","title":"Examples","text":"","code":"# source(\"example_gallery/multi_page\")"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"activating-fill","dir":"Articles > Filling","previous_headings":"In theory","what":"Activating fill","title":"Filling layouts","text":"Just like HTML container, fillable container’s default height depends height ’s children. , example, ’s single fill item defined height 400px (default Shiny outputs), fillable container’s height also 400px (plus padding, border, etc). Defining height fillable container activates immediate children’s potential fill. , example, fillable container’s height set 200px, fill child shrink 200px: multiple fill items immediate children fillable container, ’d keep shrinking (case, 100px ): Adding non-fill item (e.g., htmltools::p()-aragraph text) won’t cause particular item grow/shrink, fill items divvy remaining space (careful: non-fill item(s) larger fillable container, fill items won’t visible!). big reason card()s min_height argument (prevent fill items shrinking much). Notice resizing handle lower-right hand corner fillable container . Use change size fillable container compare behavior fill non-fill items.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"carrying-fill","dir":"Articles > Filling","previous_headings":"In theory","what":"Carrying fill","title":"Filling layouts","text":"previous section focuses fairly simple case one parent container. However, practice, ’ll likely working multiple levels parents, quickly complicates things, especially : Fill items require immediate parent fillable container order fill. “raw” HTML tags (e.g., div(), p(), etc.) well many Shiny UI elements (e.g., wellPanel(), etc.) neither fillable fill (.e., ’ll call non-fill elements). result, common way (1) breaks non-fill element, like div(), comes fillable fill. fact, ’ll run exact behavior using uiOutput() insert dynamically rendered fill item fillable container (see section concrete example). Assuming goal fill item fit fillable container, ’s useful coerce non-fill element fill item fillable container, call fill carriers. UI element can coerced fill carrier as_fill_carrier(). concept fill carrier especially useful relevant cards. cases, card numerous children like header body, body commonly contains fill item(s) (ensure fill items). card_body() defaults fillable = TRUE (fill = TRUE). might wonder, want need fillable = FALSE fill = FALSE card_body()? One big reason fillable containers powered CSS flexbox, changes way ’s children rendered. , although changes nice “stretchy” children, downsides rendering inline elements. , ’s , ’s recommended use multiple card bodies combining fill non-fill","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"in-practice","dir":"Articles > Filling","previous_headings":"","what":"In practice","title":"Filling layouts","text":"section puts practice learned theory fillable containers fill items.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"setup-code","dir":"Articles > Filling","previous_headings":"In practice","what":"Setup code","title":"Filling layouts","text":"example sub-sections follow assume ’ve ran following code. ’re using plotly create list fill items, concepts extend htmlwidgets (e.g., leaflet) Shiny outputs like plotOutput().2","code":"library(plotly) plots <- list(   plot_ly(diamonds) |> add_histogram(x = ~price),   plot_ly(diamonds) |> add_histogram(x = ~carat),   plot_ly(diamonds) |> add_histogram(x = ~cut, color = ~clarity) ) plots <- lapply(plots, function(x) {   config(x, displayModeBar = FALSE) |>     layout(margin = list(t = 0, b = 0, l = 0, r = 0)) })"},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"filling-the-window","dir":"Articles > Filling","previous_headings":"In practice","what":"Filling the window","title":"Filling layouts","text":"Perhaps important fillable container page_fillable(), sets ’s height equal browser window. Thus, fill items appear direct children, ’ll fill window. page_fillable() also defaults fillable_mobile = FALSE, means height isn’t set equal viewport mobile. result, fill items use defined height (instead viewport size) mobile, often better behavior showing multiple outputs. Notice resizing handle lower-right hand corner example . Use change size “window” see behavior filling plots ’re worried plots becoming small, consider putting card_body() min_height (like later ). Also, don’t want card border, can card(class = \"border-0\", ...)","code":"page_fillable(   h2(\"Diamond plots\"),   plots[[1]], plots[[2]], plots[[3]] )"},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"multiple-columns","dir":"Articles > Filling","previous_headings":"In practice","what":"Multiple columns","title":"Filling layouts","text":"Since layout_columns() fill item (default), grows/shrinks just like fill item. also defaults fillable = TRUE, case, means column gets wrapped fillable container. ’s , example, plots[[1]] plots[[1]] also grow/shrink match size layout_columns() container.","code":"page_fillable(   h2(\"Diamond plots\"),   layout_columns(plots[[1]], plots[[2]]),   plots[[3]] )"},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"value-boxes","dir":"Articles > Filling","previous_headings":"In practice","what":"Value boxes","title":"Filling layouts","text":"Since value_box() fill item (default), grows/shrinks just like fill item. especially useful keeping common baseline multi-column layout. said, multi-layout column holds value boxes probably doesn’t want default fill = TRUE behavior, since value boxes given /less space window becomes larger/smaller: learn layout_columns(), see article.","code":"boxes <- layout_columns(   fill = FALSE,   value_box(     \"Total diamonds\",     scales::comma(nrow(diamonds)),     showcase = bsicons::bs_icon(\"gem\", size = NULL)   ),   value_box(     \"Average price\",     scales::dollar(mean(diamonds$price), accuracy = 1),     showcase = bsicons::bs_icon(\"coin\", size = NULL),     theme_color = \"success\"   ),   value_box(     \"Average carat\",     scales::number(mean(diamonds$carat), accuracy = .1),     showcase = bsicons::bs_icon(\"search\", size = NULL),     theme_color = \"dark\"   ) )  page_fillable(   boxes,   layout_columns(plots[[1]], plots[[2]]),   plots[[3]] )"},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"full-screen-cards","dir":"Articles > Filling","previous_headings":"In practice","what":"Full-screen cards","title":"Filling layouts","text":"alluded Carrying fill section, card() card_body() fill carriers (, fillable fill, default). Therefore, wrapping plot card, card grows/shrinks (since fill), also retain plot’s ability grow/shrink (since fillable). Note , changed page_fillable() page_fluid() (page_fixed()), plot render ’s default height (400px) since longer fillable specified height. said, even case, expand card full-screen, plot still grows fit full screen card (since card() fillable container specified height, card_body() fill carrier, plot fill item).","code":"plot_card <- function(header, ...) {   card(     full_screen = TRUE,     card_header(header, class = \"bg-dark\"),     card_body(..., min_height = 150)   ) }  page_fillable(   layout_columns(     plot_card(\"Diamond price\", plots[[1]]),     plot_card(\"Diamond carat\", plots[[2]])   ),   plot_card(\"Diamond cut by clarity\", plots[[3]]) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"sidebar-layouts","dir":"Articles > Filling","previous_headings":"In practice","what":"Sidebar layouts","title":"Filling layouts","text":"Similar ’ve seen outputs card()s, layout_sidebar() also fill item (default), placing direct child page_fillable() makes fit window. Also, main content’s container defaults fillable container, behavior undesirable, set fillable = FALSE layout_sidebar(). learn layout_sidebar(), see article.","code":"page_fillable(   padding = 0,   layout_sidebar(     border = FALSE,     fillable = FALSE,     sidebar = sidebar(       title = \"Diamond plots\",       \"Input controls here...\"     ),     layout_columns(       plot_card(\"Diamond price\", plots[[1]]),       plot_card(\"Diamond carat\", plots[[2]])     ),     plot_card(\"Diamond cut by clarity\", plots[[3]])   ) )"},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"ui-output","dir":"Articles > Filling","previous_headings":"Other advice","what":"Dynamic UI","title":"Filling layouts","text":"alluded Carrying fill section, uiOutput() puts additional UI element around renderUI()’s return value. , order carry potential fill fill item (e.g., plot_ly()), mark uiOutput() fill carrier.","code":"library(plotly)  ui <- page_fluid(   card(     full_screen = TRUE,     max_height = 300,     card_header(\"My plot\"),     uiOutput(\"plot\", as_fill_carrier())   ) )  server <- function(input, output) {   output$plot <- renderUI({     plot_ly(diamonds, x = ~price)   }) }  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"dt-tables","dir":"Articles > Filling","previous_headings":"Other advice","what":"DT tables","title":"Filling layouts","text":"DT’s datatable() ’s unique interface filling container. Specifically, make sure set datatable(fillContainer = TRUE) order table grow/shrink ’d expect .","code":"library(DT)  ui <- page_fluid(   card(     full_screen = TRUE,     max_height = 350,     card_header(\"My table\"),     dataTableOutput(\"dt\")   ) )  server <- function(input, output) {   output$dt <- renderDataTable({     datatable(       mtcars, fillContainer = TRUE     )   }) }  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"other-htmlwidgets","dir":"Articles > Filling","previous_headings":"Other advice","what":"Other htmlwidgets","title":"Filling layouts","text":"Broadly speaking, htmlwidgets like plotly leaflet fill items default, might always case. Also, sometimes, might want particular widget treated fill item. Shiny case, able control fill argument output container (e.g., plotlyOutput(\"id\", fill = FALSE)), fill argument available can also use bslib’s as_fill() API opt /. non-Shiny case, can control fill widget’s htmlwidgets::sizingPolicy() (e.g., leaflet()$sizingPolicy$fill).","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/filling/index.html","id":"avoid-fluidrowcolumn","dir":"Articles > Filling","previous_headings":"Other advice","what":"Avoid fluidRow()/column()","title":"Filling layouts","text":"Modern versions Bootstrap Grid currently use CSS Flexbox way filling layout mostly incompatible fluidRow()/column(). Instead, use layout_columns() implement multi-column filling layouts","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"overview","dir":"Articles > Sidebars","previous_headings":"","what":"Overview","title":"Sidebars","text":"three main types sidebar layouts: floating, filling, multi-page/tab.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"floating-layout","dir":"Articles > Sidebars","previous_headings":"Overview","what":"Floating layout","title":"Sidebars","text":"Use layout_sidebar() create sidebar layout can go anywhere page. layout approach great visually grouping together semantically related inputs output(s). can also paired card() leverage full_screen expansion, add header/footer, .","code":"layout_sidebar(   sidebar = sidebar(\"Sidebar\"),   \"Main contents\" ) card(   full_screen = TRUE,   card_header(\"Title\"),   layout_sidebar(     sidebar = sidebar(\"Sidebar\"),     \"Main contents\"   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"filling-layout","dir":"Articles > Sidebars","previous_headings":"Overview","what":"Filling layout","title":"Sidebars","text":"Getting Started dashboards article, saw page_sidebar() yields sidebar layout fills page. Underneath hood, page_sidebar() just simple wrapper around page_fillable() layout_sidebar(). Understanding unlocks potential (number ) sidebar layouts within filling layout.","code":"page_fillable(   layout_sidebar(     sidebar = sidebar(\"Sidebar area\"),     \"Main area\"   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"multi-page-layout","dir":"Articles > Sidebars","previous_headings":"Overview","what":"Multi-page layout","title":"Sidebars","text":"multi-page (multi-tab) layout, use sidebar argument page_navbar() (navset_card_tab()). case, get sidebar fills page, sidebar remains visible every page/tab. Later , ’ll explore put multiple, varied, layouts different pages; also keep mind, actually desirable sidebar every page, often helps hide/show sidebar contents certain pages via conditionalPanel(). Page 1 Page 2 Tab 1 Tab 2","code":"page_navbar(   sidebar = sidebar(\"Sidebar\"),   nav_panel(\"Page 1\", \"Page 1 content\"),   nav_panel(\"Page 2\", \"Page 2 content\") ) navset_card_tab(   sidebar = sidebar(\"Sidebar\"),   nav_panel(\"Tab 1\", \"Tab 1 content\"),   nav_panel(\"Tab 2\", \"Tab 2 content\") )"},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"a-real-example","dir":"Articles > Sidebars","previous_headings":"","what":"A real example","title":"Sidebars","text":"Now ’ve enumerated bslib’s sidebar layout options, lets use real data1 create real inputs outputs, explore additional features sidebar layouts. Shiny app2, ’ll probably want use inputs like selectInput(), sliderInput(), etc., sidebar, ’re reading article static website, ’ll use crosstalk input widgets.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"setup-code","dir":"Articles > Sidebars","previous_headings":"A real example","what":"Setup code","title":"Sidebars","text":"Throughout section, ’ll make repeated use following widgets plotly leaflet. details widgets work alongside crosstalk create linked views isn’t important understanding sidebar layouts, keep mind give us list filters plots (views diamonds dataset), well map_filter map_quakes (views quakes dataset).","code":"library(bslib) library(shiny) library(crosstalk) library(plotly) library(leaflet)  # Creates the \"filter link\" between the controls and plots dat <- SharedData$new(dplyr::slice_sample(diamonds, n = 1000))  # Sidebar elements (e.g., filter controls) filters <- list(   filter_select(\"cut\", \"Cut\", dat, ~cut),   filter_select(\"color\", \"Color\", dat, ~color),   filter_select(\"clarity\", \"Clarity\", dat, ~clarity) )  # plotly visuals plots <- list(   plot_ly(dat) |> add_histogram(x = ~price),   plot_ly(dat) |> add_histogram(x = ~carat),   plot_ly(dat) |> add_histogram(x = ~cut, color = ~clarity) ) plots <- lapply(plots, \\(x) config(x, displayModeBar = FALSE))  # map filter and visual quake_dat <- SharedData$new(quakes) map_filter <- filter_slider(\"mag\", \"Magnitude\", quake_dat, ~mag) map_quakes <- leaflet(quake_dat) |>   addTiles() |>   addCircleMarkers()"},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"hello-sidebar","dir":"Articles > Sidebars","previous_headings":"A real example","what":"Hello layout_sidebar()","title":"Sidebars","text":"layout_sidebar() behaves lot like card. example, used inside page_fillable() ’ll also grow/shrink fit page (default fill = TRUE). also default fillable = TRUE allows fill items main content area (e.g., plots[[1]]) also grow/shrink fit container. also behave lot like card_body() can put directly inside card() (useful adding header/footer, full_screen = TRUE, etc.). example resizable. Try using handle lower-right corner change “window” size notice plot grow/shrink fit window (fillable = TRUE). learn fillable containers fill items work, see article filling layouts.","code":"sidebar_diamonds <- layout_sidebar(   sidebar = filters[[1]],   plots[[1]] )  sidebar_quakes <- layout_sidebar(   sidebar = map_filter,   map_quakes )  page_fillable(   sidebar_diamonds,   card(     card_header(\"Earthquakes\"),     sidebar_quakes   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"multi-page-example","dir":"Articles > Sidebars","previous_headings":"A real example","what":"Multi-page varied layout","title":"Sidebars","text":"covered Getting Started dashboards, sidebar argument page_navbar() puts sidebar page fills window. However, sometimes ’s better particular pages sidebar layout. acheive , just provide layout_sidebar() “root” element fillable page. example, let’s put “page-level” sidebar page dedicated Earthquakes, put multiple sidebar layouts page dedicated Diamonds (one plot). case, ’ve allowed Earthquakes page fillable since multiple plots Diamonds page (also keep Diamonds page fillable put min_height cards prevent shrinking much). Just like page_navbar(), navset_card_tab() also sidebar argument puts sidebar tab. approach (.e., putting layout_sidebar() within nav_panel()) can used put different sidebars different tabs.","code":"page_navbar(   title = \"Sidebar demo\",   fillable = \"Earthquakes\",   nav_panel(\"Earthquakes\", sidebar_quakes),   nav_panel(     \"Diamonds\",     Map(       function(filter, plot) {         card(           full_screen = TRUE,           layout_sidebar(sidebar = filter, plot)         )       },       filters, plots     )   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"restricting-growth","dir":"Articles > Sidebars","previous_headings":"A real example","what":"Restricting growth","title":"Sidebars","text":"Just like cards, filling layout isn’t enforcing size layout_sidebar(), allow ’s contents decide big . Thus, large amount sidebar/main contents, consider specifying height max_height via card() (well full_screen = TRUE reduce need scrolling).","code":"page_fixed(   h1(\"Sidebar demo\", class = \"lead mt-3\"),   card(     height = 400,     full_screen = TRUE,     layout_sidebar(sidebar = filters, plots)   ),   card(     full_screen = TRUE,     layout_sidebar(sidebar = map_filter, map_quakes)   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"shiny","dir":"Articles > Sidebars","previous_headings":"","what":"Shiny","title":"Sidebars","text":"Although sidebars work just fine outside Shiny, using Shiny provides additional useful features.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"conditional-contents","dir":"Articles > Sidebars","previous_headings":"Shiny","what":"Conditional contents","title":"Sidebars","text":"Sometimes multiple page/tab setting, ’s useful sidebar every page/tab, changes ’s contents based page/tab active.3 Thanks conditionalPanel(), can done fairly easily Shiny app page_navbar() (navset_card_tab()/navset_tab_pill()). trick provide id page_navbar() reference id conditionalPanel():","code":"shinyApp(   page_navbar(     title = \"Conditional sidebar\",     id = \"nav\",     sidebar = sidebar(       conditionalPanel(         \"input.nav === 'Page 1'\",         \"Page 1 sidebar\"       ),       conditionalPanel(         \"input.nav === 'Page 2'\",         \"Page 2 sidebar\"       )     ),     nav_panel(\"Page 1\", \"Page 1 contents\"),     nav_panel(\"Page 2\", \"Page 2 contents\")   ),   server = function(...) {     # no server logic required   } )"},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"reactive-updates","dir":"Articles > Sidebars","previous_headings":"Shiny","what":"Reactive updates","title":"Sidebars","text":"programmatically update (/re-actively read) open/closed state sidebar(), provide id reference id server code. reference use id programmatically open sidebar 2nd page.","code":"library(shiny)  ui <- page_navbar(   title = \"Sidebar updates\",   id = \"nav\",   sidebar = sidebar(     id = \"sidebar\",     open = FALSE,     \"Sidebar\"   ),   nav_panel(\"Page 1\", \"Sidebar closed. Go to Page 2 to open.\"),   nav_panel(\"Page 2\", \"Sidebar open. Go to Page 1 to close.\") )  server <- function(input, output) {   observe({     sidebar_toggle(       id = \"sidebar\",       open = input$nav == \"Page 2\"     )   }) }  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"accordions","dir":"Articles > Sidebars","previous_headings":"","what":"Accordions","title":"Sidebars","text":"sidebars special treatment accordions. accordion() appears directly within sidebar() (immediate child sidebar), accordion panels render flush sidebar, providing convenient way group multiple related input controls collapsible section. example depends objects setup code section.","code":"accordion_filters <- accordion(   accordion_panel(     \"Dropdowns\", icon = bsicons::bs_icon(\"menu-app\"),     !!!filters   ),   accordion_panel(     \"Numerical\", icon = bsicons::bs_icon(\"sliders\"),     filter_slider(\"depth\", \"Depth\", dat, ~depth),     filter_slider(\"table\", \"Table\", dat, ~table)   ) )  card(   card_header(\"Groups of diamond filters\"),   layout_sidebar(     sidebar = accordion_filters,     plots[[1]]   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"nested-sidebars","dir":"Articles > Sidebars","previous_headings":"","what":"Nested sidebars","title":"Sidebars","text":"’s possible nest sidebar layouts, means can effectively number left /right sidebars given layout. , ’ll want main content area every layout_sidebar() contains layout_sidebar() fillable zero padding (class = \"p-0\").","code":"page_fillable(   h1(\"Left and right sidebar\", class = \"px-3 my-3\"),   layout_sidebar(     sidebar = sidebar(\"Left sidebar\"),     layout_sidebar(         sidebar = sidebar(\"Right sidebar\", position = \"right\", open = FALSE),         \"Main contents\",         border = FALSE     ),     border_radius = FALSE,     fillable = TRUE,     class = \"p-0\"   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/sidebars/index.html","id":"styling-and-customization","dir":"Articles > Sidebars","previous_headings":"","what":"Styling and customization","title":"Sidebars","text":"sections ’ve focused primarily variety interface layouts sidebars can used. Along way, ’ve touched named arguments sidebar() layout_sidebar() helpful customizing styling behavior sidebar main content areas. However, handful arguments customize look feel sidebar layout. sidebar() layout_sidebar() allow specific background color (via bg), applied sidebar area main content area respectively. bg provided, bslib automatically provides high-contrast foreground color ensure readability (fg color may also provided). functions also include class argument works well Bootstrap utility classes style argument inline styles. aware layout_sidebar(), bg, class style attributes applied main content area’s container overall layout container. add additional classes layout container, use htmltools::tagAppendAttributes(). Also note layout_sidebar() derives ’s default style Bootstrap CSS variables (e.g., --bs-card-border-color), enables theming component-level (theming via bs_theme() works page-level). following example combines concepts create sidebar dark background. Utility classes used make sidebar text monospace bold, used tagAppendAttributes() tweak border color sidebar layout match sidebar background.","code":"library(htmltools) library(leaflet)  squake <- SharedData$new(quakes)  container <- layout_sidebar(   class = \"p-0\",   sidebar = sidebar(     title = \"Earthquakes off Fiji\",     bg = \"#1E1E1E\",     width = \"35%\",     class = \"fw-bold font-monospace\",     filter_slider(\"mag\", \"Magnitude\", squake, ~mag)   ),   leaflet(squake) |> addTiles() |> addCircleMarkers() )  tagAppendAttributes(container, style = css(\"--bs-card-border-color\" = \"#1E1E1E\"))"},{"path":"https://rstudio.github.io/bslib/dev/articles/theming/index.html","id":"real-time","dir":"Articles > Theming","previous_headings":"","what":"Real-time theming","title":"Theming","text":"get started theming, consider overlaying real-time theming widget Shiny app (runtime: shiny R Markdown document). great way experiment different Bootswatch themes, main colors, fonts, . add widget, call bs_themer() Shiny runtime content (.e., within server function) also make sure app/document uses {bslib} ’s Bootstrap dependency. don’t particular app document mind, can also use bs_theme_preview() create demo Shiny app theming widget already overlayed (see hosted version):  running theming widget locally, ’ll see output like R console (R Markdown, ’ll see YAML output instead R code) reproduce theming changes:","code":"# Shiny example ui <- page_sidebar(   title = \"My app\" )  server <- function(input, output) {   bs_themer()  }  shinyApp(ui, server) # R Markdown example --- runtime: shiny output:   html_document:     theme:       bslib: true ---  ```{r} bslib::bs_themer() ``` bs_theme_preview()"},{"path":"https://rstudio.github.io/bslib/dev/articles/theming/index.html","id":"bootswatch","dir":"Articles > Theming","previous_headings":"","what":"Bootswatch themes","title":"Theming","text":"Bootswatch theme available bs_theme()’s bootswatch argument. may already familiar using “pre-packaged” themes via shinythemes package (via theme parameter R Markdown). older approaches provide Bootswatch 3 themes, bslib, can use newer themes like minty zephyr.","code":"# Shiny example page_sidebar(   theme = bs_theme(bootswatch = \"minty\") ) # R Markdown example --- output:   html_document:     theme:       bootswatch: minty ---"},{"path":"https://rstudio.github.io/bslib/dev/articles/theming/index.html","id":"main-colors","dir":"Articles > Theming","previous_headings":"","what":"Main colors & fonts","title":"Theming","text":"bs_theme() also provides named arguments customizing main background color (bg), foreground color (fg), accent colors (primary, secondary, etc), fonts (base_font, heading_font, code_font, etc). ’s example using subset named arguments implement dark mode custom fonts:  Among coloring options bs_theme(), bg, fg, primary far influential effect nearly every color page. fact, bg fg alone impact 100s defaults — everything text color, card()s, accordion()s, much . accent colors don’t impact nearly much, primary control color important things like hyperlinks, navset_pill() links, accent/focus colors inputs, . said, accent colors can handy customizing things like shiny::actionButton() (defaults secondary color), shiny::showNotification() , generally HTML content leverages Color Utility Classes. choosing bg fg colors, keep mind ’s generally good idea pick colors similar hue large difference luminance. bs_theme() also provides 3 named arguments main fonts: base_font, heading_font, code_font. using web safe font combinations, ’s ok provide character string (comma-separated) font families arguments (e.g., bs_theme(base_font = '\"Times New Roman\", Times, serif'). Otherwise, use one font_google(), font_link(), /font_face() helpers include relevant file(s) client’s browser may render font(s). font_link() font_face() fairly low-level interfaces CSS web font API, font_google() additional ability download cache font file(s), making internet connection needed first time particular font used. choosing fonts, keep mind ’s generally good practice put serif fonts base_font, sans-serif fonts heading_font, monospace fonts code_font. aren’t sure start, fontpair.co nice gallery Google Font pairings.","code":"# Shiny example page_sidebar(   title = \"My app\",   bs_theme(     bg = \"#101010\",     fg = \"#FFF\",     primary = \"#E69F00\",     secondary = \"#0072B2\",     success = \"#009E73\",     base_font = font_google(\"Inter\"),     code_font = font_google(\"JetBrains Mono\")   ),   ... ) # R Markdown example --- output:   html_document:     theme:       bg: \"#101010\"       fg: \"#FFF\"       primary: \"#E69F00\"       secondary: \"#0072B2\"       success: \"#009E73\"       base_font:         google: \"Prompt\"       code_font:         google: \"JetBrains Mono\" ---"},{"path":"https://rstudio.github.io/bslib/dev/articles/theming/index.html","id":"theming-variables","dir":"Articles > Theming","previous_headings":"","what":"Theming variables","title":"Theming","text":"bs_theme() also provides access 100s specific theming options considering anything passed ’s ... argument new Bootstrap Sass variable defaults. allows get targetted theming; example, let’s set $progress-bar-bg Sass variable 'orange' (CSS color).  addition CSS values (e.g., \"orange\"), variable can valid Sass expression, quite useful leveraging Sass’ built-module’s (e.g., mix() mixing colors) Underneath hood, bs_theme() works placing Sass variable defaults Bootstrap’s variable defaults. ’s something like bs_theme(primary = \"red\") “just works” sense provides $primary new default value, also passes value variables default $primary (e.g. $progress-bar-bg). Since bs_theme() defines variables Bootstrap, must define variables differently want reference Bootstrap’s Sass code. example, wanted $progress-bar-bg default $secondary instead $primary? Thankfully bs_add_variables() provides workaround. default, bs_add_variables() works just like bs_theme() (puts variable definitions Sass code), .= \"declarations\", can place definition Bootstrap: ’s currently easy way define variables way R Markdown (using !expr pass bs_theme() object directly theme)","code":"# Shiny example bs_theme(   bg = \"#002B36\", fg = \"#EEE8D5\",   \"progress-bar-bg\" = \"orange\" ) # R Markdown example --- output:   html_document:     theme:       bg: \"#002B36\"       fg: \"#EEE8D5\"       progress-bar-bg: \"orange\" --- bs_theme(\"progress-bar-bg\" = \"mix(white, orange, 20%)\") #> $progress-bar-bg: mix(white, orange, 20%) !default; #> @import \"scss/_variables.scss\"; # Reduced version of the Sass code behind `bs_theme(primary = \"red\")` sass::sass(\"   $primary: red !default; // First one wins   $primary: blue !default;   $progress-bar-bg: $primary !default;   @debug $primary, $progress-bar-bg; \") #> red, red bs_theme(\"progress-bar-bg\" = \"$secondary\") |>   sass::sass() #> Error: Undefined variable: \"$secondary\". bs_theme()  |>   bs_add_variables(     \"progress-bar-bg\" = \"$secondary\",     .where = \"declarations\"   ) #> @import \"scss/_variables.scss\"; #> $progress-bar-bg: $secondary; output:   html_document:     theme: !expr bslib::bs_add_variables(bslib::bs_theme(), \"progress-bar-bg\" = \"$secondary\", .where = \"declarations\")"},{"path":"https://rstudio.github.io/bslib/dev/articles/theming/index.html","id":"add-rules","dir":"Articles > Theming","previous_headings":"","what":"Adding rules","title":"Theming","text":"good amount theming possible customizing Bootstrap Sass variables bs_theme(), sometimes may also want add additional Sass/CSS rules. bs_add_rules() function makes easy Shiny usage generally accepts valid Sass/CSS (see sass::as_sass()). example, ’s one add local SCSS/CSS files /Sass/CSS code string (CSS file case taken nes.css)  R Markdown case, ’s recommended additional CSS (Sass) rules come css parameter, may also use bslib engine. bs_add_rules(), rules can reference Bootstrap Sass variables well utilize convenient Sass mixins functions like color-contrast(), mix(), etc.","code":"bs_theme(   bg = \"#e5e5e5\", fg = \"#0d0c0c\", primary = \"#dd2020\",   base_font = font_google(\"Press Start 2P\"),   code_font = font_google(\"Press Start 2P\"),   \"font-size-base\" = \"0.75rem\", \"enable-rounded\" = FALSE ) %>%   bs_add_rules(     list(       sass::sass_file(\"nes.min.css\"),       sass::sass_file(\"custom.scss\"),       \"body { background-color: $body-bg; }\"     )   ) --- output:   html_document:     theme:       bslib: true     css: my-rules.scss ---  ```{bslib} $custom-bg: rgba($primary, 0.3); .custom {   background-color: $custom-bg;   color: color-contrast(opaque($body-bg, $custom-bg)) } ```  ::: {.custom} Hello custom block with custom styles! :::"},{"path":"https://rstudio.github.io/bslib/dev/articles/theming/index.html","id":"utility-classes","dir":"Articles > Theming","previous_headings":"","what":"Utility Classes","title":"Theming","text":"Utility classes primarily helpful styling component (rather page) level, particularly handy things like spacing, border, colors, . See article Utility Classes useful examples specific Shiny R Markdown.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/theming/index.html","id":"component-support","dir":"Articles > Theming","previous_headings":"","what":"Component support","title":"Theming","text":"list known--themeable HTML components “just work” well custom real-time themes: “core” Shiny UI (e.g., sliderInput(), selectInput(), etc.) one exception plotOutput(), case, {thematic} package can used essentially translate CSS R plot theming defaults. Just put thematic_shiny() Shiny apps thematic_rmd() R Markdown documents. rmarkdown::html_document() specific features well {flexdashboard}. un-styled HTML content (e.g., tags$input(type = \"checkbox\")). htmlwidgets like DT plotly (ggplotly() supported thematic right now) time, ’re hoping list grows package authors developers embrace bslib’s tools making themeable custom components.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/theming/index.html","id":"dynamic","dir":"Articles > Theming","previous_headings":"","what":"Dynamic theming","title":"Theming","text":"functionality behind real-time theming can leveraged Shiny app (runtime:shiny Rmd doc) implement custom theming widget (via session$setCurrentTheme()), like dark mode switch:  See sections setCurrentTheme getCurrentTheme learn .","code":"light <- bs_theme() dark <- bs_theme(bg = \"black\", fg = \"white\", primary = \"purple\") ui <- fluidPage(   theme = light,   checkboxInput(\"dark_mode\", \"Dark mode\") ) server <- function(input, output, session) {   observe(session$setCurrentTheme(     if (isTRUE(input$dark_mode)) dark else light   )) } shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"motivation","dir":"Articles > Tooltips-popovers","previous_headings":"","what":"Motivation","title":"Tooltips & Popovers","text":"Tooltips popovers useful means displaying (tooltips) interacting (popovers) additional information non-obtrusive way. motivating example applies components achieve useful patterns: Attaches tooltip() “tip” icon card_header(), allowing user learn data visualized. Attaches popover() “settings” icon card_header(), allowing user control parameters visualization Attaches popover() link card_footer(), facilitates display information, also allowing interaction information (e.g., hyperlink).","code":"library(shiny) library(bslib) library(palmerpenguins) library(ggplot2)  ui <- page_fillable(   card(     card_header(       \"Penguin body mass\",       tooltip(         bsicons::bs_icon(\"question-circle\"),         \"Mass measured in grams.\",         placement = \"right\"       ),       popover(         bsicons::bs_icon(\"gear\", class = \"ms-auto\"),         selectInput(\"yvar\", \"Split by\", c(\"sex\", \"species\", \"island\")),         selectInput(\"color\", \"Color by\", c(\"species\", \"island\", \"sex\"), \"island\"),         title = \"Plot settings\"       ),       class = \"d-flex align-items-center gap-1\"     ),     plotOutput(\"plt\"),     card_footer(       \"Source: Gorman KB, Williams TD, Fraser WR (2014).\",       popover(         a(\"Learn more\", href = \"#\"),         markdown(           \"Originally published in: Gorman KB, Williams TD, Fraser WR (2014) Ecological Sexual Dimorphism and Environmental Variability within a Community of Antarctic Penguins (Genus Pygoscelis). PLoS ONE 9(3): e90081. [doi:10.1371/journal.pone.0090081](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0090081)\"         )       )     )   ) )  server <- function(input, output, session) {   output$plt <- renderPlot({     ggplot(penguins, aes(x = body_mass_g, y = !!sym(input$yvar), fill = !!sym(input$color))) +       ggridges::geom_density_ridges(scale = 0.9, alpha = 0.5) +       coord_cartesian(clip = \"off\") +       labs(x = NULL, y = NULL) +       ggokabeito::scale_fill_okabe_ito() +       theme_minimal(base_size = 20) +       theme(legend.position = \"top\")   }) }  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"get-started","dir":"Articles > Tooltips-popovers","previous_headings":"","what":"Get started","title":"Tooltips & Popovers","text":"terms ’re implemented, tooltips popovers quite similar. require UI element serve “trigger” (.e., UI user must interact toggle visibility) well message show. tooltip() popover() treat 1st argument trigger, whereas unnamed arguments go message. Optionally, popover(), title may also provided. terms UX applications, tooltips popovers quite different. Tooltips toggled via focus / hover whereas popovers toggled via click. result, popovers much “persistent” (.e., harder open/close), thus used tooltips interaction may needed. put another way, use tooltips small “read-” messages, popovers user able interact message .","code":"actionButton(   \"btn_tip\",   \"Focus/hover here for tooltip\" ) |>   tooltip(\"Tooltip message\") actionButton(   \"btn_pop\",    \"Click here for popover\" ) |>   popover(     \"Popover message\",     title = \"Popover title\"   )"},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"icons","dir":"Articles > Tooltips-popovers","previous_headings":"Examples","what":"Icons","title":"Tooltips & Popovers","text":"general, icons probably ubiquitous trigger tooltip() (popover()). ’re small, unobtrusive, provide clear affordance ’s information available. ’d like display icon inline text, also treat text part trigger, wrap icon text span(). Alternatively, wanted just icon trigger, bring tooltip() modifier inside span() (.e., containing element text). Another way replace span() 1st example list() (tagList()), happens work since tooltip() popover() use last HTML element 1st argument trigger.","code":"tooltip(   span(     \"This text does trigger\",     bs_icon(\"info-circle\")   ),   \"Tooltip message\",   placement = \"bottom\" ) span(   \"This text doesn't trigger\",   tooltip(     bs_icon(\"info-circle\"),     \"Tooltip message\",     placement = \"bottom\"   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"input-labels","dir":"Articles > Tooltips-popovers","previous_headings":"Examples","what":"Input labels","title":"Tooltips & Popovers","text":"Input labels great place apply learned icons. ’re already common place provide information input, adding tooltip popover natural place provide additional context.","code":"textInput(   \"txt\",   label = tooltip(     trigger = list(       \"Input label\",       bs_icon(\"info-circle\")     ),     \"Tooltip message\"   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"cards","dir":"Articles > Tooltips-popovers","previous_headings":"Examples","what":"Cards","title":"Tooltips & Popovers","text":"Cards provide wealth opportunity apply learned icons. specifically, tooltips/popovers often work well inside card_header()/card_footer() since ’re already designed providing additional information output(s). next sections explore useful patterns.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"simple-tooltip","dir":"Articles > Tooltips-popovers","previous_headings":"Examples > Cards","what":"Simple tooltip","title":"Tooltips & Popovers","text":"Often times ’s useful provide additional information card’s header, especially header contains acronyms jargon. case, tooltip() can help non-expert users gain context data visualized.","code":"card(   card_header(     \"Card header\",     tooltip(       bs_icon(\"info-circle\"),       \"Tooltip message\"     )   ),   \"Card body...\" )"},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"input-toolbar","dir":"Articles > Tooltips-popovers","previous_headings":"Examples > Cards","what":"Input toolbar","title":"Tooltips & Popovers","text":"app “secondary” inputs specific given card, can useful “hideaway” inputs popover() attached card’s header. especially useful inputs just meant tweak parameters /relevant subset users. case, can useful provide “settings” icon card’s header, clicked, opens popover() containing inputs.","code":"gear <- popover(   bs_icon(\"gear\"),   textInput(\"txt\", NULL, \"Enter input\"),   title = \"Input controls\" )  card(   card_header(     \"Card header\", gear,     class = \"d-flex justify-content-between\"   ),   \"Card body...\" )"},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"popover-with-hyperlink","dir":"Articles > Tooltips-popovers","previous_headings":"Examples > Cards","what":"Popover with hyperlink","title":"Tooltips & Popovers","text":"popover()s useful creating input toolbars, can also useful non-input situations, like providing context along hyperlinks. Taking inspiration motivating example, can provide popover() attached actionLink() card’s footer.1","code":"foot <- popover(   actionLink(\"link\", \"Card footer\"),   \"Here's a \",   a(\"hyperlink\", href = \"https://google.com\") )  card(   card_header(\"Card header\"),   \"Card body...\",   card_footer(foot) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"editable-header","dir":"Articles > Tooltips-popovers","previous_headings":"Examples > Cards","what":"Editable header","title":"Tooltips & Popovers","text":"Combining idea input toolbar Shiny’s uiOutput()/renderUI() (.e., dynamic UI) pattern, can create editable header. case, ’ll use popover() attached uiOutput() card’s header, clicked, opens textInput().","code":"ui <- page_fixed(   card(     card_header(       popover(         uiOutput(\"card_title\", inline = TRUE),         title = \"Provide a new title\",         textInput(\"card_title\", NULL, \"An editable title\")       )     ),      \"The card body...\"   ) )  server <- function(input, output) {   output$card_title <- renderUI({     list(       input$card_title,        bsicons::bs_icon(\"pencil-square\")     )   }) }  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"shiny","dir":"Articles > Tooltips-popovers","previous_headings":"","what":"Shiny","title":"Tooltips & Popovers","text":"Shiny, ’s possible programmatically show, hide, update contents tooltip() popover(). can useful creating dynamic apps, tooltip/popover’s contents dependent user input. next sections explore useful patterns.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"readupdate-visibility","dir":"Articles > Tooltips-popovers","previous_headings":"Shiny","what":"Read/update visibility","title":"Tooltips & Popovers","text":"Use toggle_tooltip()/toggle_popover() programmatically show/hide tooltip()/popover(). useful want tooltip shown page load /tooltip shown response user input (e.g., button click).","code":"library(shiny)  ui <- page_fixed(   \"Here's a tooltip:\",   tooltip(     bsicons::bs_icon(\"info-circle\"),     \"Tooltip message\",      id = \"tooltip\"   ),   actionButton(\"show_tooltip\", \"Show tooltip\"),   actionButton(\"hide_tooltip\", \"Hide tooltip\") )  server <- function(input, output) {   observeEvent(input$show_tooltip, {     toggle_tooltip(\"tooltip\", show = TRUE)   })    observeEvent(input$hide_tooltip, {     toggle_tooltip(\"tooltip\", show = FALSE)   }) }  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"update-contents","dir":"Articles > Tooltips-popovers","previous_headings":"Shiny","what":"Update contents","title":"Tooltips & Popovers","text":"Use update_tooltip()/update_popover() programmatically update contents tooltip()/popover(). especially useful tooltip/popover reflect user input (e.g., text input).","code":"library(shiny)  ui <- page_fixed(   \"Here's a tooltip:\",   tooltip(     bsicons::bs_icon(\"info-circle\"),     \"Tooltip message\",     id = \"tooltip\"   ),   textInput(\"tooltip_msg\", NULL, \"Tooltip message\") )  server <- function(input, output) {   observeEvent(input$tooltip_msg, {     update_tooltip(\"tooltip\", input$tooltip_msg)   }) }  shinyApp(ui, server)"},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"additional-options","dir":"Articles > Tooltips-popovers","previous_headings":"Appendix","what":"Additional options","title":"Tooltips & Popovers","text":"tooltip() popover() support number additional options covered article, documented respective reference pages (?tooltip ?popover).","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"popovers-vs-modals","dir":"Articles > Tooltips-popovers","previous_headings":"Appendix","what":"Popovers vs modals","title":"Tooltips & Popovers","text":"already familiar Shiny’s modalDialog()/showModal() might wonder popover() appropriate. general, modalDialog()s appropriate “blocking” interactions (.e., user must interact modal interact anything else). contrast, popover()s appropriate “non-blocking” interactions (.e., user can interact popover UI elements time). said, popovers don’t always scale well larger messages/menus. cases, consider offcanvas menu (bslib doesn’t currently support offcanvas menus, ’s roadmap).","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/tooltips-popovers/index.html","id":"popovers-on-hyperlinks","dir":"Articles > Tooltips-popovers","previous_headings":"Appendix","what":"Popovers on hyperlinks","title":"Tooltips & Popovers","text":"general, ’s recommended use hyperlink trigger popover(). ’s , typical click action hyperlink (.e., navigating new page) conflicts click action popover(). reason, popover() changes trigger interaction hover/focus attached hyperlink (.e., acts like tooltip() case), least makes popover content visible. said, still bit confusing UX, thus avoided. Instead, consider using icon (next hyperlink) trigger popover().","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/utility-classes/index.html","id":"add-margin","dir":"Articles > Utility-classes","previous_headings":"","what":"Add margin","title":"Utility classes","text":"look source theme demo app, actionButton() logic makes use margin spacing (m-2) add spacing buttons (also make use button modifier classes achieve different background colors). ’s worth noting actionButton(), like many core shiny UI components, doesn’t actually explicit class argument, route implicit arguments (.e., ...) top-level HTML tag, actionButton(..., class = \"btn-primary\") add class appropriate place. Another place top-level class can useful customizing body tabPanel().","code":"actionButton(\"primary\", \"Primary\", icon(\"product-hunt\"), class = \"btn-primary m-2\") actionButton(\"secondary\", \"Secondary (default)\", class = \"m-2\") actionButton(\"success\", \"Success\", icon(\"check\"), class = \"btn-success m-2\")"},{"path":"https://rstudio.github.io/bslib/dev/articles/utility-classes/index.html","id":"add-padding-borders-and-alignment","dir":"Articles > Utility-classes","previous_headings":"","what":"Add padding, borders, and alignment","title":"Utility classes","text":"default, tabset panels don’t come padding border(s) around body’s content, can make appears though content just floating space:  can help solve issue adding padding tab’s content (p-3) well nice border matches tab’s borders.  tabsetPanel(type=\"pills\") , looks bit better full, rounded, border:  ’s also worth noting can also add classes rmarkdown tabsets, like :   Unfortunately, can’t always rely class argument placing HTML tag need achieve styling goals. example, can’t simply tabsetPanel(class = \"justify-content-center\", ...) horizontally center tabset. can, however, leverage Sass’s @extend rule essentially add utility classes relevant HTML element(s):","code":"tabsetPanel(   tabPanel(\"One\", \"No padding\"),   tabPanel(\"Two\", \"Very sad!\") ) tab <- function(...) {   shiny::tabPanel(..., class = \"p-3 border border-top-0 rounded-bottom\") } tabsetPanel(   tab(\"One\", \"With padding\"),   tab(\"Two\", \"Nice!\") ) pill <- function(...) {   shiny::tabPanel(..., class = \"p-3 border rounded\") } tabsetPanel(   type = \"pills\",   pill(\"One\", \"With padding\"),   pill(\"Two\", \"Nice!\") ) fluidPage(   theme = bs_theme() %>%     bs_add_rules(\"#my-nav { @extend .justify-content-center }\"),   tabsetPanel(     type = \"pills\", id = \"my-nav\",     pill(\"One\", \"With padding\"),     pill(\"Two\", \"Nice!\")   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/utility-classes/index.html","id":"add-background-color","dir":"Articles > Utility-classes","previous_headings":"","what":"Add background color","title":"Utility classes","text":"Add bg-* class HTML element set background color theme color (e.g., primary, secondary, etc), note ’ll also make sure foreground color properly contrasts background color (.e., foreground switches white/black intelligently based dark/light background). use bg-primary card component containing {DT} table.","code":"bs4_card <- function(body, title) {   div(     class = \"card\",     div(class = \"card-header bg-primary\", title),     div(class = \"card-body d-flex justify-content-center\", body)   ) }  shinyApp(   fluidPage(     theme = bslib::bs_theme(primary = \"orange\"),     uiOutput(\"dat\")   ),   function(input, output) {     output$dat <- renderUI({       table <- DT::datatable(mtcars, fillContainer = TRUE, style = \"bootstrap4\", rownames = FALSE)       bs4_card(table, \"The mtcars dataset\")     })   } )"},{"path":"https://rstudio.github.io/bslib/dev/articles/utility-classes/index.html","id":"create-new-utility-classes","dir":"Articles > Utility-classes","previous_headings":"","what":"Create new utility classes","title":"Utility classes","text":"Bootstrap Sass also handful Sass maps allow easy creation /modification utility classes. One case creating background color utility classes, say bg-flair via $theme-colors map. useful wanted let $primary default $blue, use bg-flair instead bg-primary color card’s title:","code":"bs_theme(\"theme-colors\" = \"('flair': orange)\")"},{"path":"https://rstudio.github.io/bslib/dev/articles/value-boxes/index.html","id":"build-a-box-app","dir":"Articles > Value-boxes","previous_headings":"","what":"Build a Box App","title":"Value boxes","text":"Want explore value_box() options layouts interactive app? Check Build Box App! Use app quickly choose right layout theme value boxes, copy code right app.","code":""},{"path":"https://rstudio.github.io/bslib/dev/articles/value-boxes/index.html","id":"hello-value_box","dir":"Articles > Value-boxes","previous_headings":"","what":"Hello value_box()","title":"Value boxes","text":"value_box() 4 main parts: value: text value. title: Optional text display value. showcase: Optional UI element(s) display alongside value. theme: Optional theme change appearance value box. ...: text/UI elements appear value. ’ll see later, one can clever goes showcase, many cases icon provides enough visual context box feel “complete”. recommend using new bsicons package since ’s designed Bootstrap mind, also use fontawesome {icons}. value box can showcase plot icon, choosing one three values showcase_layout: \"left center\", \"top right\", \"bottom\". See Showcase Layouts section value_box() documentation details. overall appearance value box may customized theme argument, can choose wide variety themes — Themes section value_box() documentation lays options. Left center Top Right got 99 problems bslib ain't one hit got 99 problems bslib ain't one hit ","code":"value_box(   title = \"I got\",   value = \"99 problems\",   showcase = bs_icon(\"music-note-beamed\"),   p(\"bslib ain't one\", bs_icon(\"emoji-smile\")),   p(\"hit me\", bs_icon(\"suit-spade\")) ) value_box(   title = \"I got\",   value = \"99 problems\",   showcase = bs_icon(\"music-note-beamed\"),   showcase_layout = \"top right\",   theme = \"secondary\",   p(\"bslib ain't one\", bs_icon(\"emoji-smile\")),   p(\"hit me\", bs_icon(\"suit-spade\")) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/value-boxes/index.html","id":"dynamic-rendering-shiny","dir":"Articles > Value-boxes","previous_headings":"","what":"Dynamic rendering (Shiny)","title":"Value boxes","text":"using Shiny dynamically render value_box() contents, ’s good practice use textOutput() serve placeholder value, title, etc. way, value takes moment compute, value box appear value ready, thus reduces “layout shift” value actually rendered.","code":"ui <- page_fixed(   value_box(     title = \"The current time\",     value = textOutput(\"time\"),     showcase = bs_icon(\"clock\")   ) )  server <- function(input, output) {   output$time <- renderText({     invalidateLater(1000)     format(Sys.time())   }) }  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/bslib/dev/articles/value-boxes/index.html","id":"multiple-value-boxes","dir":"Articles > Value-boxes","previous_headings":"","what":"Multiple value boxes","title":"Value boxes","text":"layout multiple value boxes, ’s recommended use layout_column_wrap() (layout_columns()), ensures uniform height width (least default) across boxes. 1st value 123 1st detail 2nd value 456 2nd detail 3rd detail 3rd value 789 4th detail 5th detail 6th detail  , incorporating multiple value boxes larger filling layout, ’s good practice set fill = FALSE layout container since ’ll prevent boxes using space really need. example, try resizing following example vertically. Notice height value boxes don’t change, height plot (isn’t allowed shrink 200 pixels):","code":"vbs <- list(   value_box(     title = \"1st value\",     value = \"123\",     showcase = bs_icon(\"bar-chart\"),     theme = \"purple\",     p(\"The 1st detail\")   ),   value_box(     title = \"2nd value\",     value = \"456\",     showcase = bs_icon(\"graph-up\"),     theme = \"teal\",     p(\"The 2nd detail\"),     p(\"The 3rd detail\")   ),   value_box(     title = \"3rd value\",     value = \"789\",     showcase = bs_icon(\"pie-chart\"),     theme = \"pink\",     p(\"The 4th detail\"),     p(\"The 5th detail\"),     p(\"The 6th detail\")   ) )  layout_column_wrap(   width = \"250px\",   !!!vbs ) page_fillable(   layout_column_wrap(     width = \"250px\",     fill = FALSE,     vbs[[1]], vbs[[2]]   ),   card(     min_height = 200,     plotly::plot_ly(x = rnorm(100))   ) )"},{"path":"https://rstudio.github.io/bslib/dev/articles/value-boxes/index.html","id":"expandable-sparklines","dir":"Articles > Value-boxes","previous_headings":"","what":"Expandable sparklines","title":"Value boxes","text":"--hood, value_box() implemented using card(), mainly inherit ’s full_screen capabilities. Expanding value_box() full screen isn’t useful showcase something simple like icon, becomes quite compelling something like “expandable sparkline”. code right demonstrates one way might go plotly. Note , since example statically rendered (outside Shiny), make use htmlwidgets::onRender() add JavaScript effectively says: “Show xaxis chart ’s taller 200 pixels; otherwise, hide ”. aren’t wanting write JavaScript can achieve similar behavior (.e., displaying different chart depending ’s size) via shiny::getCurrentOutputInfo(), mentioned article cards. fact, ’s source code Shiny app effectively thing without JavaScript (note also leverages getCurrentOutputInfo() values avoid hard coding \"white\" colors sparklines). Personal Savings Rate 7.6% Started 12.6% Averaged 8.6% period Peaked 17.3% May 1975","code":"library(plotly)  sparkline <- plot_ly(economics) %>%   add_lines(     x = ~date, y = ~psavert,     color = I(\"white\"), span = I(1),     fill = 'tozeroy', alpha = 0.2   ) %>%   layout(     xaxis = list(visible = F, showgrid = F, title = \"\"),     yaxis = list(visible = F, showgrid = F, title = \"\"),     hovermode = \"x\",     margin = list(t = 0, r = 0, l = 0, b = 0),     font = list(color = \"white\"),     paper_bgcolor = \"transparent\",     plot_bgcolor = \"transparent\"   ) %>%   config(displayModeBar = F) %>%   htmlwidgets::onRender(     \"function(el) {       el.closest('.bslib-value-box')         .addEventListener('bslib.card', function(ev) {           Plotly.relayout(el, {'xaxis.visible': ev.detail.fullScreen});         })     }\"   )   value_box(   title = \"Personal Savings Rate\",   value = \"7.6%\",   p(\"Started at 12.6%\"),   p(\"Averaged 8.6% over that period\"),   p(\"Peaked 17.3% in May 1975\"),   showcase = sparkline,   full_screen = TRUE,   theme = \"success\" )"},{"path":"https://rstudio.github.io/bslib/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carson Sievert. Author, maintainer. Joe Cheng. Author. Garrick Aden-Buie. Author. Posit Software, PBC. Copyright holder, funder. Bootstrap contributors. Contributor.           Bootstrap library Twitter, Inc. Copyright holder.           Bootstrap library Javi Aguilar. Contributor, copyright holder.           Bootstrap colorpicker library Thomas Park. Contributor, copyright holder.           Bootswatch library PayPal. Contributor, copyright holder.           Bootstrap accessibility plugin","code":""},{"path":"https://rstudio.github.io/bslib/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sievert C, Cheng J, Aden-Buie G (2025). bslib: Custom 'Bootstrap' 'Sass' Themes 'shiny' 'rmarkdown'. R package version 0.9.0.9000, https://github.com/rstudio/bslib, https://rstudio.github.io/bslib/.","code":"@Manual{,   title = {bslib: Custom 'Bootstrap' 'Sass' Themes for 'shiny' and 'rmarkdown'},   author = {Carson Sievert and Joe Cheng and Garrick Aden-Buie},   year = {2025},   note = {R package version 0.9.0.9000, https://github.com/rstudio/bslib},   url = {https://rstudio.github.io/bslib/}, }"},{"path":"https://rstudio.github.io/bslib/dev/index.html","id":"bslib-","dir":"","previous_headings":"","what":"Custom Bootstrap Sass Themes for shiny and rmarkdown","title":"Custom Bootstrap Sass Themes for shiny and rmarkdown","text":"bslib R package provides modern UI toolkit Shiny R Markdown based Bootstrap. facilitates: underlying UI components (e.g., cards, value boxes, sidebars, etc) also designed work contexts (e.g., R Markdown). Apps can even themed interactively real-time. Shiny R Markdown currently default Bootstrap 3 may continue maintain backwards compatibility.","code":""},{"path":"https://rstudio.github.io/bslib/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Custom Bootstrap Sass Themes for shiny and rmarkdown","text":"Install bslib package CRAN follows:","code":"install.packages(\"bslib\")"},{"path":"https://rstudio.github.io/bslib/dev/index.html","id":"an-example","dir":"","previous_headings":"","what":"An example","title":"Custom Bootstrap Sass Themes for shiny and rmarkdown","text":"quickest way see bslib can run bslib::bs_theme_preview() console. launches demo app containing bslib shiny UI components well theming widget (bslib::bs_themer()) overlaid app. See real-time theming learn .","code":""},{"path":"https://rstudio.github.io/bslib/dev/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Custom Bootstrap Sass Themes for shiny and rmarkdown","text":"Since bslib covers wide array uses, numerous getting started articles, focusing particular interest: Shiny dashboards Bootstrap project Theming","code":""},{"path":"https://rstudio.github.io/bslib/dev/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Custom Bootstrap Sass Themes for shiny and rmarkdown","text":"two main places get help bslib: RStudio community friendly place ask questions (sure add bslib tag creating topic). Stack Overflow great source answers common bslib questions. also great place get help, created reproducible example illustrates problem. Use tags [r][bslib] ask question. Add tag [bslib] using Shiny runtime.","code":""},{"path":"https://rstudio.github.io/bslib/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Custom Bootstrap Sass Themes for shiny and rmarkdown","text":"Please note bslib project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/accordion.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vertically collapsing accordion — accordion","title":"Create a vertically collapsing accordion — accordion","text":"accordion can used organize UI elements content limited space. comprises multiple, vertically stacked panels expand collapse clicked, providing compact layout works well grouping input elements sidebar() organizing detailed context-specific information.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/accordion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vertically collapsing accordion — accordion","text":"","code":"accordion(   ...,   id = NULL,   open = NULL,   multiple = TRUE,   class = NULL,   width = NULL,   height = NULL )  accordion_panel(title, ..., value = title, icon = NULL)"},{"path":"https://rstudio.github.io/bslib/dev/reference/accordion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vertically collapsing accordion — accordion","text":"... Named arguments become attributes <div class=\"accordion\"> element. Unnamed arguments accordion_panel()s. id provided, can use input$id server logic determine accordion_panel()s currently active. value correspond accordion_panel()'s value argument. open character vector accordion_panel() values open (.e., show) default. default value NULL open first accordion_panel(). Use value TRUE open (FALSE open none) items. possible open one panel multiple=TRUE. multiple Whether multiple accordion_panel() can open . class Additional CSS classes include accordion div. width, height valid CSS unit; example, height=\"100%\". title title appear accordion_panel()'s header. value character string uniquely identifies panel. icon htmltools::tag child (e.g., bsicons::bs_icon()) positioned just title.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/accordion.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a vertically collapsing accordion — accordion","text":"bslib's accordion component derived Bootstrap Accordion component. Accordions also featured bslib website: Get Started: Dashboards Sidebars: Accordions","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/accordion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vertically collapsing accordion — accordion","text":"","code":"if (FALSE) { # rlang::is_interactive() items <- lapply(LETTERS, function(x) {   accordion_panel(paste(\"Section\", x), paste(\"Some narrative for section\", x)) })  # First shown by default accordion(!!!items) # Nothing shown by default accordion(!!!items, open = FALSE) # Everything shown by default accordion(!!!items, open = TRUE)  # Show particular sections accordion(!!!items, open = \"Section B\") accordion(!!!items, open = c(\"Section A\", \"Section B\"))  # Provide an id to create a shiny input binding library(shiny)  ui <- page_fluid(   accordion(!!!items, id = \"acc\") )  server <- function(input, output) {   observe(print(input$acc)) }  shinyApp(ui, server) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/accordion_panel_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamically update accordions — accordion_panel_set","title":"Dynamically update accordions — accordion_panel_set","text":"Dynamically update/modify accordion()s Shiny app. updated programmatically, accordion() must id. functions require active Shiny session work running Shiny app.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/accordion_panel_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamically update accordions — accordion_panel_set","text":"","code":"accordion_panel_set(id, values, session = get_current_session())  accordion_panel_open(id, values, session = get_current_session())  accordion_panel_close(id, values, session = get_current_session())  accordion_panel_insert(   id,   panel,   target = NULL,   position = c(\"after\", \"before\"),   session = get_current_session() )  accordion_panel_remove(id, target, session = get_current_session())  accordion_panel_update(   id,   target,   ...,   title = NULL,   value = NULL,   icon = NULL,   session = get_current_session() )"},{"path":"https://rstudio.github.io/bslib/dev/reference/accordion_panel_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamically update accordions — accordion_panel_set","text":"id character string matches existing accordion()'s id. values either character string (used identify particular accordion_panel()s value) TRUE (.e., values). session shiny session object (default almost always used). panel accordion_panel(). target value existing panel insert next . removing: value accordion_panel() remove. position panel added target? target NULL (default), \"\" append last panel \"\" prepend first panel. ... Elements become new content panel. title title appear accordion_panel()'s header. value character string uniquely identifies panel. icon htmltools::tag child (e.g., bsicons::bs_icon()) positioned just title.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/accordion_panel_set.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Dynamically update accordions — accordion_panel_set","text":"accordion_panel_set(): accordion_panel_open(), except also closes currently open panels. accordion_panel_open(): open accordion_panel()s. accordion_panel_close(): close accordion_panel()s. accordion_panel_insert(): insert new accordion_panel() accordion_panel_remove(): remove accordion_panel()s. accordion_panel_update(): update accordion_panel().","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/as.tags.bslib_sidebar.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a sidebar as HTML tags — as.tags.bslib_sidebar","title":"Render a sidebar as HTML tags — as.tags.bslib_sidebar","text":"Renders sidebar element collapse toggle elements sidebar() layout_sidebar() context.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/as.tags.bslib_sidebar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a sidebar as HTML tags — as.tags.bslib_sidebar","text":"","code":"# S3 method for class 'bslib_sidebar' as.tags(x, ...)"},{"path":"https://rstudio.github.io/bslib/dev/reference/as.tags.bslib_sidebar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a sidebar as HTML tags — as.tags.bslib_sidebar","text":"x sidebar() object. ... Additional arguments passed htmltools::.tags().","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/as_fill_carrier.html","id":null,"dir":"Reference","previous_headings":"","what":"Test and/or coerce fill behavior — as_fill_carrier","title":"Test and/or coerce fill behavior — as_fill_carrier","text":"Filling layouts bslib built foundation fillable containers fill items (fill carriers fillable fill). bslib components (e.g., card(), card_body(), layout_sidebar()) possess fillable fill arguments (control fill behavior). However, sometimes useful add, remove, /test fillable/fill properties arbitrary htmltools::tag(), functions designed .","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/as_fill_carrier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test and/or coerce fill behavior — as_fill_carrier","text":"","code":"as_fill_carrier(   x,   ...,   min_height = NULL,   max_height = NULL,   gap = NULL,   class = NULL,   style = NULL,   css_selector = NULL )  as_fillable_container(   x,   ...,   min_height = NULL,   max_height = NULL,   gap = NULL,   class = NULL,   style = NULL,   css_selector = NULL )  as_fill_item(   x,   ...,   min_height = NULL,   max_height = NULL,   class = NULL,   style = NULL,   css_selector = NULL )  remove_all_fill(x)  is_fill_carrier(x)  is_fillable_container(x)  is_fill_item(x)"},{"path":"https://rstudio.github.io/bslib/dev/reference/as_fill_carrier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test and/or coerce fill behavior — as_fill_carrier","text":"x htmltools::tag(). ... Currently ignored. min_height, max_height valid CSS unit (e.g., 150). gap valid CSS unit. class character vector class names add tag. style character vector CSS properties add tag. css_selector character string containing CSS selector targeting particular (inner) tag(s) interest. details selector(s) supported, see htmltools::tagAppendAttributes().","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/as_fill_carrier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test and/or coerce fill behavior — as_fill_carrier","text":"as_fill(), as_fillable(), as_fill_carrier(): tagified version x, relevant tags modified possess relevant fill properties. is_fill(), is_fillable(), is_fill_carrier(): logical vector, length matching number top-level tags possess relevant fill properties.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/as_fill_carrier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test and/or coerce fill behavior — as_fill_carrier","text":"Although as_fill(), as_fillable(), as_fill_carrier() can work non-tag objects htmltools::.tags method (e.g., htmlwidgets), return \"tagified\" version object.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/as_fill_carrier.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test and/or coerce fill behavior — as_fill_carrier","text":"Filling Layouts article bslib website introduces concept fillable containers fill items.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/as_fill_carrier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test and/or coerce fill behavior — as_fill_carrier","text":"","code":"if (FALSE) { # rlang::is_interactive() library(shiny) shinyApp(   page_fillable(     # without `as_fill_carrier()`, the plot won't fill the page because     # `uiOutput()` is neither a fillable container nor a fill item by default.     as_fill_carrier(uiOutput(\"ui\"))   ),   function(input, output) {     output$ui <- renderUI({       div(         class = \"bg-info text-white\",         as_fill_item(),         \"A fill item\"       )     })   } ) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/bind_task_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind input_task_button to ExtendedTask — bind_task_button","title":"Bind input_task_button to ExtendedTask — bind_task_button","text":"Sets shiny::ExtendedTask relay state existing input_task_button(), task button stays \"busy\" state long extended task running. Note bind_task_button automatically cause button presses invoke extended task; still need use shiny::bindEvent() (shiny::observeEvent()) cause button press trigger invocation, example . bind_task_button used bind one task button multiple ExtendedTask objects; attempt , bound ExtendedTask completes cause button return \"ready\" state.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bind_task_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind input_task_button to ExtendedTask — bind_task_button","text":"","code":"bind_task_button(target, task_button_id, ...)  # Default S3 method bind_task_button(target, task_button_id, ...)  # S3 method for class 'ExtendedTask' bind_task_button(target, task_button_id, ..., session = get_current_session())"},{"path":"https://rstudio.github.io/bslib/dev/reference/bind_task_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind input_task_button to ExtendedTask — bind_task_button","text":"target target object (.e. ExtendedTask). task_button_id string matching id argument passed corresponding input_task_button() call. ... arguments passed methods. session Shiny session object (default almost always used).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bind_task_button.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind input_task_button to ExtendedTask — bind_task_button","text":"target object passed .","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bind_task_button.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind input_task_button to ExtendedTask — bind_task_button","text":"","code":"if (FALSE) { # rlang::is_interactive()  library(shiny) library(bslib) library(future) plan(multisession)  ui <- page_sidebar(   sidebar = sidebar(     input_task_button(\"recalc\", \"Recalculate\")   ),   textOutput(\"outval\") )  server <- function(input, output) {   rand_task <- ExtendedTask$new(function() {     future({       # Slow operation goes here       Sys.sleep(2)       runif(1)     }, seed = TRUE)   })    # Make button state reflect task.   # If using R >=4.1, you can do this instead:   # rand_task <- ExtendedTask$new(...) |> bind_task_button(\"recalc\")   bind_task_button(rand_task, \"recalc\")    observeEvent(input$recalc, {     rand_task$invoke()   })    output$outval <- renderText({     rand_task$result()   }) }  shinyApp(ui, server) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/bootswatch_themes.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a list of all available bootswatch themes. — bootswatch_themes","title":"Obtain a list of all available bootswatch themes. — bootswatch_themes","text":"Obtain list available bootswatch themes.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bootswatch_themes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a list of all available bootswatch themes. — bootswatch_themes","text":"","code":"bootswatch_themes(version = version_default(), full_path = FALSE)"},{"path":"https://rstudio.github.io/bslib/dev/reference/bootswatch_themes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a list of all available bootswatch themes. — bootswatch_themes","text":"version major version Bootswatch. full_path Whether return path installed theme.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bootswatch_themes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a list of all available bootswatch themes. — bootswatch_themes","text":"Returns character vector Bootswatch themes.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/breakpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Define breakpoint values — breakpoints","title":"Define breakpoint values — breakpoints","text":"generic constructor responsive breakpoints.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/breakpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define breakpoint values — breakpoints","text":"","code":"breakpoints(..., xs = NULL, sm = NULL, md = NULL, lg = NULL)"},{"path":"https://rstudio.github.io/bslib/dev/reference/breakpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define breakpoint values — breakpoints","text":"... breakpoints (e.g., xl). xs default value apply xs breakpoint. Note breakpoint generally equivalent \"sizes\" typically treated base case value apply default across breakpoints unless overridden larger breakpoint. sm Values apply sm breakpoint. md Values apply md breakpoint. lg Values apply lg breakpoint.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/breakpoints.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Define breakpoint values — breakpoints","text":"Bootstrap's Breakpoints article provides detail breakpoints used customized.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/breakpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define breakpoint values — breakpoints","text":"","code":"breakpoints(sm = c(4, 4, 4), md = c(3, 3, 6), lg = c(-2, 8, -2)) #> <breakpoints> #>  sm:  4  4  4 #>  md:  3  3  6 #>  lg: -2  8 -2"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_bundle.html","id":null,"dir":"Reference","previous_headings":"","what":"Add low-level theming customizations — bs_add_variables","title":"Add low-level theming customizations — bs_add_variables","text":"functions provide direct access layers bslib theme created bs_theme(). Learn composable Sass layers sass website.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_bundle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add low-level theming customizations — bs_add_variables","text":"","code":"bs_add_variables(   theme,   ...,   .where = \"defaults\",   .default_flag = identical(.where, \"defaults\") )  bs_add_rules(theme, rules)  bs_add_functions(theme, functions)  bs_add_mixins(theme, mixins)  bs_bundle(theme, ...)"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_bundle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add low-level theming customizations — bs_add_variables","text":"theme bs_theme() object. ... bs_add_variables(): named Sass variables values can passed directly defaults argument sass::sass_layer(). bs_bundle(): arguments can handled sass::sass_bundle() appended theme .Whether place variable definitions Sass \"defaults\", Sass \"declarations\", Sass \"rules\". .default_flag Whether add !default flag (missing) variable expressions. recommended keep TRUE .= \"defaults\". rules Sass rules. Anything understood sass::as_sass() may provided (e.g., list, character vector, sass::sass_file(), etc) functions character vector sass::sass_file() containing functions definitions. mixins character vector sass::sass_file() containing mixin definitions.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_bundle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add low-level theming customizations — bs_add_variables","text":"Returns modified bs_theme() object.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_bundle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add low-level theming customizations — bs_add_variables","text":"Compared higher-level theme customization available bs_theme(), functions direct interface Bootstrap Sass, therefore, nothing ensure theme customizations portable major Bootstrap versions.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_bundle.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Add low-level theming customizations — bs_add_variables","text":"bs_add_variables(): Add Bootstrap Sass variable defaults. bs_add_rules(): Add additional Sass rules. bs_add_functions(): Add additional Sass functions. bs_add_mixins(): Add additional Sass mixins. bs_bundle(): Add additional sass::sass_bundle() objects existing theme.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_bundle.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add low-level theming customizations — bs_add_variables","text":"bslib's theming capabilities powered sass package. Learn composable Sass layers sass website.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_bundle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add low-level theming customizations — bs_add_variables","text":"","code":"if (FALSE) { # rlang::is_interactive()  # Function to preview the styling a (primary) Bootstrap button library(htmltools) button <- tags$a(class = \"btn btn-primary\", href = \"#\", role = \"button\", \"Hello\") preview_button <- function(theme) {   browsable(tags$body(bs_theme_dependencies(theme), button)) }  # Here we start with a theme based on a Bootswatch theme, # then override some variable defaults theme <- bs_add_variables(   bs_theme(bootswatch = \"sketchy\", primary = \"orange\"),   \"body-bg\" = \"#EEEEEE\",   \"font-family-base\" = \"monospace\",   \"font-size-base\" = \"1.4rem\",   \"btn-padding-y\" = \".16rem\",   \"btn-padding-x\" = \"2rem\" )  preview_button(theme)  # If you need to set a variable based on another Bootstrap variable theme <- bs_add_variables(theme, \"body-color\" = \"$success\", .where = \"declarations\") preview_button(theme)  # Start a new global theme and add some custom rules that # use Bootstrap variables to define a custom styling for a # 'person card' person_rules <- system.file(\"custom\", \"person.scss\", package = \"bslib\") theme <- bs_add_rules(bs_theme(), sass::sass_file(person_rules))  # Include custom CSS that leverages bootstrap Sass variables person <- function(name, title, company) {   tags$div(     class = \"person\",     h3(class = \"name\", name),     div(class = \"title\", title),     div(class = \"company\", company)   ) }  page_fluid(   theme = theme,   person(\"Andrew Carnegie\", \"Owner\", \"Carnegie Steel Company\"),   person(\"John D. Rockefeller\", \"Chairman\", \"Standard Oil\") ) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_current_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the currently active theme at render time — bs_current_theme","title":"Obtain the currently active theme at render time — bs_current_theme","text":"Intended advanced use developers obtain currently active theme render time primarily implementing themable widgets otherwise themed via bs_dependency_defer() .","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_current_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the currently active theme at render time — bs_current_theme","text":"","code":"bs_current_theme(session = get_current_session(FALSE))"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_current_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the currently active theme at render time — bs_current_theme","text":"session current Shiny session ().","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_current_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain the currently active theme at render time — bs_current_theme","text":"Returns bs_theme() object.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_current_theme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain the currently active theme at render time — bs_current_theme","text":"function generally called print/render time. example: Inside preRenderHook htmlwidgets::createWidget(). Inside custom print method generates htmltools::tags. Inside htmltools::tagFunction() Calling function print/render time important different things based context called: reactive context active, session$getCurrentTheme() called (reactive read). reactive context active, shiny::getCurrentTheme() called (returns current app's theme, relevant). shiny::getCurrentTheme() comes empty, bs_global_get() called, relevant rmarkdown::html_document(), possibly static rendering contexts.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_dependency.html","id":null,"dir":"Reference","previous_headings":"","what":"Themeable HTML components — bs_dependency","title":"Themeable HTML components — bs_dependency","text":"Themeable HTML components use Sass generate CSS rules Bootstrap Sass variables, functions, /mixins (.e., stuff inside theme). bs_dependencies() makes bit easier create themeable components compiling sass::sass() (input) together Bootstrap Sass inside theme, packaging result htmltools::htmlDependency(). Themable components can also  dynamically themed inside Shiny (.e., may themed 'real-time' via bs_themer(), generally, update styles response shiny::session's setCurrentTheme() method). Dynamically themeable components provide \"recipe\" (.e., function) bs_dependency_defer(), describing generate new CSS stylesheet(s) new theme. function called HTML page first rendered, may invoked new theme whenever shiny::session's setCurrentTheme() called.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_dependency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Themeable HTML components — bs_dependency","text":"","code":"bs_dependency(   input = list(),   theme,   name,   version,   cache_key_extra = NULL,   .dep_args = list(),   .sass_args = list() )  bs_dependency_defer(func, memoise = TRUE)"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_dependency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Themeable HTML components — bs_dependency","text":"input Sass rules compile, using theme. theme bs_theme() object. name Library name version Library version cache_key_extra Extra information add sass cache key. useful add version package. .dep_args list additional arguments pass htmltools::htmlDependency(). Note package effect script must absolute path(s). .sass_args list additional arguments pass sass::sass_partial(). func non-anonymous function, single argument. function accept bs_theme() object return single htmltools::htmlDependency(), list , NULL. memoise whether memoise (.e., cache) func results short period time. default, TRUE, can large performance benefits many instances themable widget rendered. Note may want avoid memoisation func relies side-effects (e.g., files -disk) need change themable widget instance.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_dependency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Themeable HTML components — bs_dependency","text":"bs_dependency() returns htmltools::htmlDependency() bs_dependency_defer() returns htmltools::tagFunction()","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_dependency.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Themeable HTML components — bs_dependency","text":"Theming: Custom components gives tutorial creating dynamically themable custom component.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_dependency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Themeable HTML components — bs_dependency","text":"","code":"if (FALSE) { # rlang::is_interactive() myWidgetVersion <- \"1.2.3\"  myWidgetDependency <- function() {   list(     bs_dependency_defer(myWidgetCss),     htmlDependency(       name = \"mywidget-js\",       version = myWidgetVersion,       src = system.file(package = \"mypackage\", \"js\"),       script = \"mywidget.js\"     )   ) }  myWidgetCSS <- function(theme) {   if (!is_bs_theme(theme)) {     return(       htmlDependency(         name = \"mywidget-css\",         version = myWidgetVersion,         src = system.file(package = \"mypackage\", \"css\"),         stylesheet = \"mywidget.css\"       )     )   }    # Compile mywidget.scss using the variables and defaults from the theme   # object.   sass_input <- sass::sass_file(system.file(package = \"mypackage\", \"scss/mywidget.scss\"))    bs_dependency(     input = sass_input,     theme = theme,     name = \"mywidget\",     version = myWidgetVersion,     cache_key_extra = utils::packageVersion(\"mypackage\")   ) }  # Note that myWidgetDependency is not defined inside of myWidget. This is so # that, if `myWidget()` is called multiple times, Shiny can tell that the # function objects are identical and deduplicate them. myWidget <- function(id) {   div(     id = id,     span(\"myWidget\"),     myWidgetDependency()   ) } }"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_get_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Sass variable values from the current theme — bs_get_variables","title":"Retrieve Sass variable values from the current theme — bs_get_variables","text":"Useful retrieving variable current theme using value inform another R function.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_get_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Sass variable values from the current theme — bs_get_variables","text":"","code":"bs_get_variables(theme, varnames)  bs_get_contrast(theme, varnames)"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_get_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Sass variable values from the current theme — bs_get_variables","text":"theme bs_theme() object. varnames character string referencing Sass variable current theme.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_get_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Sass variable values from the current theme — bs_get_variables","text":"Returns character string containing CSS/Sass value. variable(s) defined, value NA.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_get_variables.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve Sass variable values from the current theme — bs_get_variables","text":"Theming: Bootstrap 5 variables provides searchable reference theming variables available Bootstrap 5.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_get_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Sass variable values from the current theme — bs_get_variables","text":"","code":"vars <- c(\"body-bg\", \"body-color\", \"primary\", \"border-radius\") bs_get_variables(bs_theme(), varnames = vars) #>       body-bg    body-color       primary border-radius  #>     \"#ffffff\"     \"#1D1F21\"     \"#007bc2\"         \"3px\"  bs_get_variables(bs_theme(bootswatch = \"darkly\"), varnames = vars) #>       body-bg    body-color       primary border-radius  #>        \"#222\"        \"#fff\"     \"#375a7f\"    \"0.375rem\"   bs_get_contrast(bs_theme(), c(\"primary\", \"dark\", \"light\")) #>   primary      dark     light  #> \"#FFFFFF\" \"#FFFFFF\" \"#000000\"   library(htmltools) div(   class = \"bg-primary\",   style = css(     color = bs_get_contrast(bs_theme(), \"primary\")   ) ) #> <div class=\"bg-primary\" style=\"color:#FFFFFF;\"><\/div>"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_global_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Global theming — bs_global_theme","title":"Global theming — bs_global_theme","text":"bs_global_theme() creates sets global Bootstrap Sass theme. theme typically found bs_theme_dependencies() app document global theme used. can obtain current global theme bs_global_get() directly set global theme bs_global_set().","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_global_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global theming — bs_global_theme","text":"","code":"bs_global_theme(   version = version_default(),   preset = NULL,   bg = NULL,   fg = NULL,   primary = NULL,   secondary = NULL,   success = NULL,   info = NULL,   warning = NULL,   danger = NULL,   base_font = NULL,   code_font = NULL,   heading_font = NULL,   ...,   bootswatch = NULL )  bs_global_set(theme = bs_theme())  bs_global_get()  bs_global_clear()  bs_global_add_variables(   ...,   .where = \"defaults\",   .default_flag = identical(.where, \"defaults\") )  bs_global_add_rules(...)  bs_global_bundle(...)  bs_global_theme_update(   ...,   preset = NULL,   bg = NULL,   fg = NULL,   primary = NULL,   secondary = NULL,   success = NULL,   info = NULL,   warning = NULL,   danger = NULL,   base_font = NULL,   code_font = NULL,   heading_font = NULL,   bootswatch = NULL )"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_global_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global theming — bs_global_theme","text":"version major version Bootstrap use (see versions() possible values). Defaults currently recommended version new projects (currently Bootstrap 5). preset name theme preset, either built-theme provided bslib Bootswatch theme (see builtin_themes() bootswatch_themes() possible values). argument takes precedence bootswatch argument one preset bootswatch can provided. bootswatch theme specified, version 5 higher, preset defaults \"shiny\". remove \"shiny\" preset, provide value \"bootstrap\" (value also work bs_theme_update() remove preset bootswatch theme). bg color string background. fg color string foreground. primary color used hyperlinks, indicate primary/default actions, show active selection state Bootstrap components. Generally bold, saturated color contrasts theme's base colors. secondary color components messages need stand . (supported Bootstrap 3.) success color messages indicate operation succeeded. Typically green. info color messages informative critical. Typically shade blue-green. warning color warning messages. Typically yellow. danger color errors. Typically red. base_font default typeface. code_font typeface used code. sure monospace! heading_font typeface used heading elements. ... arguments passed along bs_add_variables(). bootswatch name bootswatch theme (see bootswatch_themes() possible values). provided bs_theme_update(), previous Bootswatch theme first removed new one applied (use bootswatch = \"bootstrap\" effectively remove Bootswatch theme). theme bs_theme() object. .Whether place variable definitions Sass \"defaults\", Sass \"declarations\", Sass \"rules\". .default_flag Whether add !default flag (missing) variable expressions. recommended keep TRUE .= \"defaults\".","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_global_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global theming — bs_global_theme","text":"Functions modify global theme (e.g., bs_global_set()) invisibly return previously set theme. bs_global_get() returns current global theme.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_global_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global theming — bs_global_theme","text":"","code":"# Remember the global state now (so we can restore later) theme <- bs_global_get()  # Use Bootstrap 3 (globally) with some theme customization bs_global_theme(3, bg = \"#444\", fg = \"#e4e4e4\", primary = \"#e39777\") if (rlang::is_interactive()) {   bs_theme_preview(with_themer = FALSE) }  # If no global theme is active, bs_global_get() returns NULL bs_global_clear() bs_global_get() #> NULL  # Restore the original state bs_global_set(theme)"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove or retrieve Sass code from a theme — bs_remove","title":"Remove or retrieve Sass code from a theme — bs_remove","text":"Bootstrap theme created bs_theme() comprised many Sass layers. bs_remove() bs_retrieve() allow remove retrieve individual layer, either reduce size compiled CSS extract styles theme.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove or retrieve Sass code from a theme — bs_remove","text":"","code":"bs_remove(theme, ids = character(0))  bs_retrieve(theme, ids = character(0), include_unnamed = TRUE)"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove or retrieve Sass code from a theme — bs_remove","text":"theme bs_theme() object. ids character vector ids include_unnamed whether include unnamed sass::sass_layer()s (e.g., Bootstrap Sass variables, functions, mixins).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove or retrieve Sass code from a theme — bs_remove","text":"Returns modified bs_theme() object.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_remove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove or retrieve Sass code from a theme — bs_remove","text":"","code":"bs4 <- bs_theme(version = 4)  # Retrieve sass bundle for print styles bs_retrieve(bs4, \"_print\", include_unnamed = FALSE) #> /* Sass Bundle: _print */ #> @import \"/home/runner/work/_temp/Library/bslib/lib/bs4/scss/_print.scss\"; #> /* *** */  # Remove CSS rules for print and carousels bs4_no_print <- bs_remove(bs4, c(\"_print\", \"_carousel\")) suppressWarnings(   bs_retrieve(bs4_no_print, \"_print\", include_unnamed = FALSE) ) #> /* Sass Bundle: (empty) *** */  # Remove BS3 compatibility layer bs4_no_compat <- bs_remove(bs4, \"bs3compat\")"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Bootstrap theme — bs_theme","title":"Create a Bootstrap theme — bs_theme","text":"Creates Bootstrap theme object, can: Choose (major) Bootstrap version. Choose Bootswatch theme (optional). Customize main colors fonts via explicitly named arguments (e.g., bg, fg, primary, etc). Customize , lower-level, Bootstrap Sass variable defaults via .... learn implement custom themes, well use inside Shiny R Markdown, see .","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Bootstrap theme — bs_theme","text":"","code":"bs_theme(   version = version_default(),   preset = NULL,   ...,   brand = NULL,   bg = NULL,   fg = NULL,   primary = NULL,   secondary = NULL,   success = NULL,   info = NULL,   warning = NULL,   danger = NULL,   base_font = NULL,   code_font = NULL,   heading_font = NULL,   font_scale = NULL,   bootswatch = NULL )  bs_theme_update(   theme,   ...,   preset = NULL,   bg = NULL,   fg = NULL,   primary = NULL,   secondary = NULL,   success = NULL,   info = NULL,   warning = NULL,   danger = NULL,   base_font = NULL,   code_font = NULL,   heading_font = NULL,   font_scale = NULL,   bootswatch = NULL )  is_bs_theme(x)"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Bootstrap theme — bs_theme","text":"version major version Bootstrap use (see versions() possible values). Defaults currently recommended version new projects (currently Bootstrap 5). preset name theme preset, either built-theme provided bslib Bootswatch theme (see builtin_themes() bootswatch_themes() possible values). argument takes precedence bootswatch argument one preset bootswatch can provided. bootswatch theme specified, version 5 higher, preset defaults \"shiny\". remove \"shiny\" preset, provide value \"bootstrap\" (value also work bs_theme_update() remove preset bootswatch theme). ... arguments passed along bs_add_variables(). brand Specifies apply branding theme using brand.yml, simple YAML file defines key brand elements like colors, fonts, logos. Valid options: NULL (default): Automatically looks _brand.yml file current directory _brand/ brand/ current directory. found, searches parent project directories _brand.yml file (also possibly _brand/ brand/). _brand.yml file found, applied Bootstrap theme. TRUE (default): Automatically looks _brand.yml file current app directory described . _brand.yml file found, bs_theme() throw error. FALSE: Disables brand.yml usage, even _brand.yml file present. file path directly points specific brand.yml file (file name) want use. Use list directly provide brand settings directly R, following brand.yml structure. Learn creating using brand.yml files brand.yml homepage run shiny::runExample(\"brand.yml\", package = \"bslib\") try brand.yml demo app. bg color string background. fg color string foreground. primary color used hyperlinks, indicate primary/default actions, show active selection state Bootstrap components. Generally bold, saturated color contrasts theme's base colors. secondary color components messages need stand . (supported Bootstrap 3.) success color messages indicate operation succeeded. Typically green. info color messages informative critical. Typically shade blue-green. warning color warning messages. Typically yellow. danger color errors. Typically red. base_font default typeface. code_font typeface used code. sure monospace! heading_font typeface used heading elements. font_scale scalar multiplier apply base font size. example, value 1.5 scales font sizes 150% value 0.8 scales 80%. Must positive number. bootswatch name bootswatch theme (see bootswatch_themes() possible values). provided bs_theme_update(), previous Bootswatch theme first removed new one applied (use bootswatch = \"bootstrap\" effectively remove Bootswatch theme). theme bs_theme() object. x object.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Bootstrap theme — bs_theme","text":"Returns sass::sass_bundle() (list-like) object.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme.html","id":"colors","dir":"Reference","previous_headings":"","what":"Colors","title":"Create a Bootstrap theme — bs_theme","text":"Colors may provided format htmltools::parseCssColors() can understand. control vast majority ('grayscale') color defaults, specify fg (foreground) bg (background) colors. primary secondary theme colors also useful accenting main grayscale colors things like hyperlinks, tabset panels, buttons.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme.html","id":"fonts","dir":"Reference","previous_headings":"","what":"Fonts","title":"Create a Bootstrap theme — bs_theme","text":"Use base_font, code_font, heading_font control main typefaces. arguments set new defaults relevant font-family CSS properties, necessarily import relevant font files. set CSS properties import font files, consider using various font_face() helpers. *_font argument may single font font_collection(). font can created font_google(), font_link(), font_face(), can character vector font names following format: single unquoted name (e.g., \"Source Sans Pro\"). single quoted name (e.g., \"'Source Sans Pro'\"). comma-separated list names w/ individual names quoted necessary. (e.g. c(\"Open Sans\", \"'Source Sans Pro'\", \"'Helvetica Neue', Helvetica, sans-serif\")) font_google() sets local = TRUE default, ensures font files downloaded Google Fonts document app rendered. guarantees client access font family, making relatively safe specify just one font family:   said, recommend specify multiple \"fallback\" font families, especially relying remote /system fonts available. Fallback fonts useful handling missing fonts, also ensure users experience Flash Invisible Text (FOIT) can quite noticeable remote web fonts slow internet connection.","code":"bs_theme(base_font = font_google(\"Pacifico\", local = TRUE)) bs_theme(base_font = font_collection(font_google(\"Pacifico\", local = FALSE), \"Roboto\", \"sans-serif\"))"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a Bootstrap theme — bs_theme","text":"Get Started: Theming introduces theming bslib Shiny apps R Markdown documents. Theming: Bootstrap 5 variables provides searchable reference theming variables available Bootstrap 5. Theming: Custom components gives tutorial creating dynamically themable custom component. bslib's theming capabilities powered sass package. Bootstrap's utility classes can helpful want change appearance element without writing CSS customizing bs_theme().","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Bootstrap theme — bs_theme","text":"","code":"if (FALSE) { # rlang::is_interactive()  theme <- bs_theme(   # Controls the default grayscale palette   bg = \"#202123\", fg = \"#B8BCC2\",   # Controls the accent (e.g., hyperlink, button, etc) colors   primary = \"#EA80FC\", secondary = \"#48DAC6\",   base_font = c(\"Grandstander\", \"sans-serif\"),   code_font = c(\"Courier\", \"monospace\"),   heading_font = \"'Helvetica Neue', Helvetica, sans-serif\",   # Can also add lower-level customization   \"input-border-color\" = \"#EA80FC\" )  bs_theme_preview(theme)  # Lower-level bs_add_*() functions allow you to work more # directly with the underlying Sass code theme <- bs_add_variables(theme, \"my-class-color\" = \"red\") theme <- bs_add_rules(theme, \".my-class { color: $my-class-color }\") }"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile Bootstrap Sass with (optional) theming — bs_theme_dependencies","title":"Compile Bootstrap Sass with (optional) theming — bs_theme_dependencies","text":"bs_theme_dependencies() compiles Bootstrap Sass CSS returns , along HTML dependencies, list htmltools::htmlDependency()s. users need call function directly Shiny & R Markdown perform compilation automatically handed bs_theme(). looking create themeable component, see bs_dependency().","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile Bootstrap Sass with (optional) theming — bs_theme_dependencies","text":"","code":"bs_theme_dependencies(   theme,   sass_options = sass::sass_options_get(output_style = \"compressed\"),   cache = sass::sass_cache_get(),   jquery = jquerylib::jquery_core(3),   precompiled = get_precompiled_option(\"bslib.precompiled\", default = TRUE) )"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile Bootstrap Sass with (optional) theming — bs_theme_dependencies","text":"theme bs_theme() object. sass_options sass::sass_options() object. cache can directory use cache, FileCache object created sass_file_cache(), FALSE NULL caching. jquery jquerylib::jquery_core() object. precompiled compiling theme object, first look precompiled CSS file theme_version().  precompiled = TRUE precompiled CSS file exists theme object, fetched immediately compiled. moment, provide precompiled CSS \"stock\" builds Bootstrap (.e., theming additions, Bootswatch themes, non-default sass_options).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile Bootstrap Sass with (optional) theming — bs_theme_dependencies","text":"Returns list HTML dependencies containing Bootstrap CSS, Bootstrap JavaScript, jquery. list may contain additional HTML dependencies bundled theme.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme_dependencies.html","id":"sass-caching-and-precompilation","dir":"Reference","previous_headings":"","what":"Sass caching and precompilation","title":"Compile Bootstrap Sass with (optional) theming — bs_theme_dependencies","text":"Shiny Developer Mode enabled (setting options(shiny.devmode = TRUE) calling shiny::devmode(TRUE)), sass caching bslib precompilation disabled default; , call bs_theme_dependencies(theme) expands bs_theme_dependencies(theme, cache = F, precompiled = F)). useful local development enabling caching/precompilation may produce incorrect results local changes made bslib's source files.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme_dependencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compile Bootstrap Sass with (optional) theming — bs_theme_dependencies","text":"","code":"if (FALSE) { # rlang::is_interactive()  # Function to preview the styling a (primary) Bootstrap button library(htmltools) button <- tags$a(class = \"btn btn-primary\", href = \"#\", role = \"button\", \"Hello\") preview_button <- function(theme) {   browsable(tags$body(bs_theme_dependencies(theme), button)) }  # Latest Bootstrap preview_button(bs_theme()) # Bootstrap 3 preview_button(bs_theme(3)) # Bootswatch 4 minty theme preview_button(bs_theme(4, bootswatch = \"minty\")) # Bootswatch 4 sketchy theme preview_button(bs_theme(4, bootswatch = \"sketchy\")) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme_preview.html","id":null,"dir":"Reference","previous_headings":"","what":"Preview a Bootstrap theme — bs_theme_preview","title":"Preview a Bootstrap theme — bs_theme_preview","text":"Launches example shiny app can used get quick preview bs_theme(), well interactive GUI tweaking main theme settings. Calling bs_theme_preview() arguments starts theme preview app default theme, great way see available theme presets start creating theme.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme_preview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preview a Bootstrap theme — bs_theme_preview","text":"","code":"bs_theme_preview(theme = bs_theme(), ..., with_themer = TRUE)"},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme_preview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preview a Bootstrap theme — bs_theme_preview","text":"theme bs_theme() object. ... passed along shiny::runApp(). with_themer whether run app run_with_themer().","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme_preview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preview a Bootstrap theme — bs_theme_preview","text":"nothing, function called side-effects (launching application).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme_preview.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preview a Bootstrap theme — bs_theme_preview","text":"app launches subject change new features developed bslib shiny.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/bs_theme_preview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preview a Bootstrap theme — bs_theme_preview","text":"","code":"if (FALSE) { # rlang::is_interactive() theme <- bs_theme(bg = \"#6c757d\", fg = \"white\", primary = \"orange\") bs_theme_preview(theme) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/bslib-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bslib: Custom 'Bootstrap' 'Sass' Themes for 'shiny' and 'rmarkdown' — bslib-package","title":"bslib: Custom 'Bootstrap' 'Sass' Themes for 'shiny' and 'rmarkdown' — bslib-package","text":"Simplifies custom 'CSS' styling 'shiny' 'rmarkdown' via 'Bootstrap' 'Sass'. Supports 'Bootstrap' 3, 4 5 well various 'Bootswatch' themes. interactive widget also provided previewing themes real time.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/bslib-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bslib: Custom 'Bootstrap' 'Sass' Themes for 'shiny' and 'rmarkdown' — bslib-package","text":"Maintainer: Carson Sievert carson@posit.co (ORCID) Authors: Joe Cheng joe@posit.co Garrick Aden-Buie garrick@posit.co (ORCID) contributors: Posit Software, PBC [copyright holder, funder] Bootstrap contributors (Bootstrap library) [contributor] Twitter, Inc (Bootstrap library) [copyright holder] Javi Aguilar (Bootstrap colorpicker library) [contributor, copyright holder] Thomas Park (Bootswatch library) [contributor, copyright holder] PayPal (Bootstrap accessibility plugin) [contributor, copyright holder]","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/builtin_themes.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a list of all available built-in bslib themes. — builtin_themes","title":"Obtain a list of all available built-in bslib themes. — builtin_themes","text":"Obtain list available built-bslib themes.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/builtin_themes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a list of all available built-in bslib themes. — builtin_themes","text":"","code":"builtin_themes(version = version_default(), full_path = FALSE)"},{"path":"https://rstudio.github.io/bslib/dev/reference/builtin_themes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a list of all available built-in bslib themes. — builtin_themes","text":"version major version Bootstrap. full_path whether return path installed theme.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/builtin_themes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a list of all available built-in bslib themes. — builtin_themes","text":"Returns character vector built-themes provided bslib.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/card.html","id":null,"dir":"Reference","previous_headings":"","what":"A Bootstrap card component — card","title":"A Bootstrap card component — card","text":"general purpose container grouping related UI elements together border optional padding. learn card()s, see Cards article articles listed References section .","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Bootstrap card component — card","text":"","code":"card(   ...,   full_screen = FALSE,   height = NULL,   max_height = NULL,   min_height = NULL,   fill = TRUE,   class = NULL,   wrapper = card_body,   id = NULL )"},{"path":"https://rstudio.github.io/bslib/dev/reference/card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Bootstrap card component — card","text":"... Unnamed arguments can valid child htmltools tag (includes card items card_body(). Named arguments become HTML attributes returned UI element. full_screen TRUE, icon appear hovering card body. Clicking icon expands card fit viewport size. height valid CSS unit (e.g., height=\"200px\"). apply card made full_screen (case, consider setting height card_body()). max_height, min_height valid CSS unit (e.g., max_height=\"200px\"). apply card made full_screen (case, consider setting max_height card_body()). fill Whether allow card grow/shrink fit fillable container opinionated height (e.g., page_fillable()). class Additional CSS classes returned UI element. wrapper function (returns UI element) call unnamed arguments ... already card item(s) (like card_header(), card_body(), etc.). Note non-card items grouped together one wrapper call (e.g. given card(\"\", \"b\", card_body(\"c\"), \"d\"), wrapper called twice, \"\" \"b\" \"d\"). id Provide unique identifier card() value_box() report full screen state Shiny. example, using id = \"my_card\", can observe card's full screen state input$my_card_full_screen.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Bootstrap card component — card","text":"htmltools::div() tag.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/card.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A Bootstrap card component — card","text":"Several articles bslib website feature card component: Cards Get Started: Dashboards Get Started: Project Column-based layouts Filling layouts: Full-screen cards","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Bootstrap card component — card","text":"","code":"if (FALSE) { # rlang::is_interactive() library(htmltools)  card(   full_screen = TRUE,   card_header(     \"This is the header\"   ),   card_body(     p(\"This is the body.\"),     p(\"This is still the body.\")   ),   card_footer(     \"This is the footer\"   ) ) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/card_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Card items — card_body","title":"Card items — card_body","text":"Components designed provided direct children card(). general overview card() API, see Cards article articles listed References section card() documentation.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/card_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Card items — card_body","text":"","code":"card_body(   ...,   fillable = TRUE,   min_height = NULL,   max_height = NULL,   max_height_full_screen = max_height,   height = NULL,   padding = NULL,   gap = NULL,   fill = TRUE,   class = NULL )  card_title(..., container = htmltools::h5)  card_header(..., class = NULL, container = htmltools::div)  card_footer(..., class = NULL)  card_image(   file,   ...,   alt = \"\",   src = NULL,   href = NULL,   border_radius = c(\"auto\", \"top\", \"bottom\", \"all\", \"none\"),   mime_type = NULL,   class = NULL,   height = NULL,   fill = FALSE,   width = NULL,   container = NULL )  as.card_item(x)  is.card_item(x)"},{"path":"https://rstudio.github.io/bslib/dev/reference/card_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Card items — card_body","text":"... Unnamed arguments can valid child htmltools tag. Named arguments become HTML attributes returned UI element. fillable Whether card item fillable (.e. flexbox) container. min_height, max_height, max_height_full_screen valid CSS length unit. height valid CSS unit (e.g., height=\"200px\"). apply card made full_screen (case, consider setting height card_body()). padding Padding use body. can numeric vector (interpreted pixels) character vector valid CSS lengths. length can one four. one, value used four sides. two, first value used top bottom, second value used left right. three, first used top, second left right, third bottom. four, values interpreted top, right, bottom, left respectively. gap CSS length unit defining gap (.e., spacing) elements provided .... argument applicable fillable = TRUE fill Whether allow element grow/shrink fit card() container. class Additional CSS classes returned UI element. container function generate HTML element contain image. Setting value card_body() places image inside card body area, otherwise image extend edges card. file file path pointing image. Local images (.e. URI starting https:// similar) base64 encoded provided src attribute <img>. Alternatively, may directly set image src, case file ignored. alt Alternate text image, used screen readers assistive devices. Provide alt text description image images important content. alt text provided, image considered decorative read announced screen readers. information, Web Accessibility Initiative (WAI) helpful tutorial alt text. src src attribute <img> tag. provided, file ignored entirely. Use src provide relative path file served Shiny application base64 encoded. href optional URL link user clicks image. border_radius side image rounded corners, useful card_image() used image cap top bottom card. value border_radius determines whether card-img-top (\"top\"), card-img-bottom (\"bottom\"), card-img (\"\") Bootstrap classes applied card. default \"auto\" value use image's position within card() automatically choose appropriate class. mime_type mime type file base64 encoded. argument available advanced use cases mime::guess_type() unable automatically determine file type. width valid CSS unit (e.g., width=\"100%\"). x object test (coerce ) card item.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/card_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Card items — card_body","text":"htmltools::div() tag.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/card_body.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Card items — card_body","text":"card_body(): general container \"main content\" card(). card_title(): Similar card_header() without border background color. card_header(): header (border background color) card(). Typically appears card_body(). card_footer(): header (border background color) card(). Typically appears card_body(). card_image(): Include static images card, example image cap top bottom card. .card_item(): Mark object card item. prevent card() putting object inside wrapper (.e., card_body()).","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — deprecated","title":"Deprecated functions — deprecated","text":"functions deprecated remain backwards compatibility.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — deprecated","text":"","code":"bs_theme_new(...)  bs_theme_clear(...)  bs_theme_get(...)  bs_theme_set(...)  bs_theme_base_colors(...)  bs_theme_accent_colors(...)  bs_theme_fonts(...)  bs_theme_add_variables(...)  bs_theme_add(...)  bs_theme_get_variables(...)  bootstrap(theme = bs_theme_get(), ...)  bootstrap_sass(rules = list(), theme = bs_theme_get(), ...)  bs_add_declarations(theme, declarations)  card_body_fill(...)  page_fill(...)  nav(...)  nav_content(...)  navs_tab(...)  navs_pill(...)  navs_pill_list(...)  navs_hidden(...)  navs_bar(...)  navs_tab_card(...)  navs_pill_card(...)"},{"path":"https://rstudio.github.io/bslib/dev/reference/deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated functions — deprecated","text":"bs_theme() object.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/deprecated.html","id":"navigation-containers","dir":"Reference","previous_headings":"","what":"Navigation Containers","title":"Deprecated functions — deprecated","text":"Several functions navigation containers renamed version 0.5.0: nav() renamed nav_panel() nav_content() renamed nav_panel_hidden() navs_tab() renamed navset_tab() navs_pill() renamed navset_pill() navs_pill_list() renamed navset_pill_list() navs_hidden() renamed navset_hidden() navs_bar() renamed navset_bar() navs_tab_card() renamed navset_card_tab() navs_pill_card() renamed navset_card_pill()","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/font_face.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for importing web fonts — font_face","title":"Helpers for importing web fonts — font_face","text":"font_google(), font_link(), font_face() re-exported sass package (see sass::font_face() details). quick example use functions bs_theme(), see examples section .","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/font_face.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helpers for importing web fonts — font_face","text":"","code":"# If you have an internet connection, running the following code # will download, cache, and import the relevant Google Font files # for local use theme <- bs_theme(   base_font = font_google(\"Fira Sans\"),   code_font = font_google(\"Fira Code\"),   heading_font = font_google(\"Fredoka One\") ) if (interactive()) {   bs_theme_preview(theme) }  # Three different yet equivalent ways of importing a remotely-hosted Google Font a <- font_google(\"Crimson Pro\", wght = \"200..900\", local = FALSE) b <- font_link(   \"Crimson Pro\",   href = \"https://fonts.googleapis.com/css2?family=Crimson+Pro:wght@200..900\" ) url <- \"https://fonts.gstatic.com/s/crimsonpro/v13/q5uDsoa5M_tv7IihmnkabARboYF6CsKj.woff2\" c <- font_face(   family = \"Crimson Pro\",   style = \"normal\",   weight = \"200 900\",   src = paste0(\"url(\", url, \") format('woff2')\") ) theme <- bs_theme(base_font = c) if (interactive()) {   bs_theme_preview(theme) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/html-browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a bslib page/fragment — print.bslib_fragment","title":"Print a bslib page/fragment — print.bslib_fragment","text":"Print bslib page/fragment","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/html-browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a bslib page/fragment — print.bslib_fragment","text":"","code":"# S3 method for class 'bslib_fragment' print(x, ...)  # S3 method for class 'bslib_page' print(x, ...)"},{"path":"https://rstudio.github.io/bslib/dev/reference/html-browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a bslib page/fragment — print.bslib_fragment","text":"x bslib page/fragment. ... passed along underlying print method.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/input_dark_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Dark mode input control — input_dark_mode","title":"Dark mode input control — input_dark_mode","text":"Creates button toggles dark light modes, specifically toggling light dark Bootstrap color modes – new feature added Bootstrap 5.3.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/input_dark_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dark mode input control — input_dark_mode","text":"","code":"input_dark_mode(..., id = NULL, mode = NULL)  toggle_dark_mode(mode = NULL, ..., session = get_current_session())"},{"path":"https://rstudio.github.io/bslib/dev/reference/input_dark_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dark mode input control — input_dark_mode","text":"... Additional attributes passed input control UI, class, style, etc. toggle_dark_mode(), ... included future extensibility currently ignored. id optional input id, required reactively read current color mode. mode initial mode dark mode switch. default set NULL, user's system settings preferred color scheme used. Otherwise, set \"light\" \"dark\" force particular initial mode. session Shiny session object (default almost always used).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/input_dark_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dark mode input control — input_dark_mode","text":"Returns UI element dark mode switch input control. server value received input corresponding id string value current color mode (\"light\" \"dark\").","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/input_dark_mode.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Dark mode input control — input_dark_mode","text":"input_dark_mode(): Create dark mode switch input control toggle_dark_mode(): Programmatically toggle set current light dark color mode.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/input_switch.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch input control — input_switch","title":"Switch input control — input_switch","text":"Create -style switch control specifying logical values.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/input_switch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch input control — input_switch","text":"","code":"input_switch(id, label, value = FALSE, width = NULL)  update_switch(id, label = NULL, value = NULL, session = get_current_session())  toggle_switch(id, value = NULL, session = get_current_session())"},{"path":"https://rstudio.github.io/bslib/dev/reference/input_switch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch input control — input_switch","text":"id input id. label label switch. value Whether switch checked default. width valid CSS unit (e.g., width=\"200px\"). session shiny session object (default almost always used).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/input_switch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Switch input control — input_switch","text":"Returns UI element switch input control. server value received input corresponding id logical (TRUE/FALSE) value.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/input_switch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switch input control — input_switch","text":"","code":"if (FALSE) { # rlang::is_interactive() library(shiny) library(bslib)  ui <- page_fixed(   title = \"Keyboard Settings\",   h2(\"Keyboard Settings\"),   input_switch(\"auto_capitalization\", \"Auto-Capitalization\", TRUE),   input_switch(\"auto_correction\", \"Auto-Correction\", TRUE),   input_switch(\"check_spelling\", \"Check Spelling\", TRUE),   input_switch(\"smart_punctuation\", \"Smart Punctuation\"),   h2(\"Preview\"),   verbatimTextOutput(\"preview\") )  server <- function(input, output, session) {   output$preview <- renderPrint({     list(       auto_capitalization = input$auto_capitalization,       auto_correction = input$auto_correction,       check_spelling = input$check_spelling,       smart_punctuation = input$smart_punctuation     )   }) }  shinyApp(ui, server) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/input_task_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Button for launching longer-running operations — input_task_button","title":"Button for launching longer-running operations — input_task_button","text":"input_task_button button can used conjuction shiny::bindEvent() (older shiny::eventReactive() shiny::observeEvent() functions) trigger actions recomputation. similar shiny::actionButton(), except prevents user clicking operation already progress. Upon click, automatically displays customizable progress message disables ; server dealt whatever reactivity triggered click, button automatically reverts original appearance re-enables .","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/input_task_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Button for launching longer-running operations — input_task_button","text":"","code":"input_task_button(   id,   label,   ...,   icon = NULL,   label_busy = \"Processing...\",   icon_busy = rlang::missing_arg(),   type = \"primary\",   auto_reset = TRUE )  update_task_button(id, ..., state = NULL, session = get_current_session())"},{"path":"https://rstudio.github.io/bslib/dev/reference/input_task_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Button for launching longer-running operations — input_task_button","text":"id input slot used access value. label label button ready (clickable) state; usually string. ... Named arguments become attributes include <button> element. icon optional icon display next label button ready state. See fontawesome::fa_i(). label_busy label button busy. icon_busy icon display button busy. default, fontawesome::fa_i(\"refresh\", class = \"fa-spin\", \"aria-hidden\" = \"true\") used, displays spinning \"chasing arrows\" icon. can create spinning icons Font Awesome icons using expression, replacing \"refresh\" different icon name. See fontawesome::fa_i(). type One Bootstrap theme colors (\"primary\", \"default\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"light\", \"dark\"), NULL leave Bootstrap-specific button CSS classes altogether. auto_reset TRUE (default), automatically put button back \"ready\" state click handled server. state \"busy\", put button busy/disabled state. \"ready\", put button ready/enabled state. session session object; using default recommended.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/input_task_button.html","id":"manual-button-reset","dir":"Reference","previous_headings":"","what":"Manual button reset","title":"Button for launching longer-running operations — input_task_button","text":"advanced use cases, may necessary keep task button busy state even normal reactive processing completed. Calling update_task_button(id, state = \"busy\") server opt currently pending reset specific task button. , button can re-enabled calling update_task_button(id, state = \"ready\") click's work complete. can also pass explicit auto_reset = FALSE input_task_button(), means button never automatically re-enabled require update_task_button(id, state = \"ready\") called time. Note , general rule, Shiny's update family functions take effect instant called, held end current reactive cycle. many different reactive calculations outputs, careful call update_task_button(id, state = \"ready\"), button client actually re-enable moment updated outputs simultaneously sent client.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/input_task_button.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Button for launching longer-running operations — input_task_button","text":"integer class \"shinyActionButtonValue\". class differs ordinary integers value 0 considered \"falsy\". implies two things: Event handlers (e.g., shiny::observeEvent(), shiny::eventReactive()) execute initial load. Input validation (e.g., shiny::req(), shiny::need()) fail initial load.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/input_task_button.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Button for launching longer-running operations — input_task_button","text":"","code":"if (FALSE) { # interactive() library(shiny) library(bslib)  ui <- page_sidebar(   sidebar = sidebar(     open = \"always\",     input_task_button(\"resample\", \"Resample\"),   ),   verbatimTextOutput(\"summary\") )  server <- function(input, output, session) {   sample <- eventReactive(input$resample, ignoreNULL=FALSE, {     Sys.sleep(2)  # Make this artificially slow     rnorm(100)   })    output$summary <- renderPrint({     summary(sample())   }) }  shinyApp(ui, server) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/layout_column_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Column-first uniform grid layouts — layout_column_wrap","title":"Column-first uniform grid layouts — layout_column_wrap","text":"Wraps 1d sequence UI elements 2d grid. number columns (rows) grid dependent column width well size display. explanation illustrative examples, see References section .","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/layout_column_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column-first uniform grid layouts — layout_column_wrap","text":"","code":"layout_column_wrap(   ...,   width = \"200px\",   fixed_width = FALSE,   heights_equal = c(\"all\", \"row\"),   fill = TRUE,   fillable = TRUE,   height = NULL,   height_mobile = NULL,   min_height = NULL,   max_height = NULL,   gap = NULL,   class = NULL )"},{"path":"https://rstudio.github.io/bslib/dev/reference/layout_column_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column-first uniform grid layouts — layout_column_wrap","text":"... Unnamed arguments UI elements (e.g., card()). Named arguments become attributes containing htmltools::tag element. width desired width card, can following: (unit-less) number 0 1. specified 1/num, num represents number desired columns. CSS length unit Either minimum (fixed_width=FALSE) fixed width (fixed_width=TRUE). NULL Allows power users set grid-template-columns CSS property manually, either via style attribute CSS stylesheet. fixed_width width greater 1 CSS length unit, e.g. \"200px\", fixed_width indicates whether width value represents absolute size column (fixed_width=TRUE) minimum size column (fixed_width=FALSE). fixed_width=FALSE, new columns added row width space available columns never exceed container viewport size. fixed_width=TRUE, columns exactly width wide, may result columns overflowing parent container. heights_equal \"\" (default), every card every row grid height. \"row\", every card row grid height, heights may vary rows. fill Whether allow layout grow/shrink fit fillable container opinionated height (e.g., page_fillable()). fillable Whether element wrapped fillable container. height valid CSS unit (e.g., height=\"200px\"). apply card made full_screen (case, consider setting height card_body()). height_mobile valid CSS unit use height mobile devices (narrow windows). min_height, max_height maximum minimum height layout container. Can valid CSS unit (e.g., max_height=\"200px\"). Use arguments filling layouts ensure layout container shrink min_height grow beyond max_height. gap CSS length unit defining gap (.e., spacing) elements provided .... argument applicable fillable = TRUE class Additional CSS classes returned UI element.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/layout_column_wrap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Column-first uniform grid layouts — layout_column_wrap","text":"bslib website features layout_column_wrap() two places: Column-based layouts Cards: Multiple cards","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/layout_column_wrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column-first uniform grid layouts — layout_column_wrap","text":"","code":"if (FALSE) { # rlang::is_interactive() x <- card(\"A simple card\")  # Always has 2 columns (on non-mobile) layout_column_wrap(width = 1/2, x, x, x)  # Automatically lays out three cards into columns # such that each column is at least 200px wide: layout_column_wrap(x, x, x)  # To use larger column widths by default, set `width`. # This example has 3 columns when the screen is at least 900px wide: layout_column_wrap(width = \"300px\", x, x, x)  # You can add a list of items, spliced with rlang's `!!!` operator layout_column_wrap(!!!list(x, x, x)) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/layout_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Responsive 12-column grid layouts — layout_columns","title":"Responsive 12-column grid layouts — layout_columns","text":"Create responsive, column-based grid layouts, based 12-column grid.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/layout_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Responsive 12-column grid layouts — layout_columns","text":"","code":"layout_columns(   ...,   col_widths = NA,   row_heights = NULL,   fill = TRUE,   fillable = TRUE,   gap = NULL,   class = NULL,   height = NULL,   min_height = NULL,   max_height = NULL )"},{"path":"https://rstudio.github.io/bslib/dev/reference/layout_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Responsive 12-column grid layouts — layout_columns","text":"... Unnamed arguments UI elements (e.g., card()). Named arguments become attributes containing htmltools::tag element. col_widths One following: NA (default): Automatically determines sensible number columns based number children. numeric vector integers 1 12, element represents number columns relevant UI element. Elements happen go beyond 12 columns wrap onto next row. example, col_widths = c(4, 8, 12) allocates 4 columns first element, 8 columns second element, 12 columns third element (wraps next row). Negative values also allowed, treated empty columns. example, col_widths = c(-2, 8, -2) allocate 8 columns element (2 empty columns either side). breakpoints() object, breakpoint may either . row_heights One following: numeric vector, value represents fractional unit (fr) height relevant row. rows values provided, pattern repeat. example, row_heights = c(1, 2) allows even rows take twice much space odd rows. list numeric CSS length units, value represents height relevant row. rows needed values provided, pattern repeat. example, row_heights = list(\"auto\", 1) allows height odd rows driven contents even rows 1fr. character vector/string CSS length units. case, value supplied directly grid-auto-rows. breakpoints() object, breakpoint may either . fill Whether allow layout grow/shrink fit fillable container opinionated height (e.g., page_fillable()). fillable Whether element wrapped fillable container. gap CSS length unit defining gap (.e., spacing) elements provided .... argument applicable fillable = TRUE class Additional CSS classes returned UI element. height valid CSS unit (e.g., height=\"200px\"). apply card made full_screen (case, consider setting height card_body()). min_height, max_height maximum minimum height layout container. Can valid CSS unit (e.g., max_height=\"200px\"). Use arguments filling layouts ensure layout container shrink min_height grow beyond max_height.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/layout_columns.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Responsive 12-column grid layouts — layout_columns","text":"Column-based layouts bslib website.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/layout_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Responsive 12-column grid layouts — layout_columns","text":"","code":"if (FALSE) { # rlang::is_interactive() x <- card(\"A simple card\")  page_fillable(   layout_columns(x, x, x, x) )  # Or add a list of items, spliced with rlang's `!!!` operator page_fillable(  layout_columns(!!!list(x, x, x)) )  page_fillable(   layout_columns(     col_widths = c(6, 6, 12),     x, x, x   ) )  page_fillable(   layout_columns(     col_widths = c(6, 6, -2, 8),     row_heights = c(1, 3),     x, x, x   ) )  page_fillable(   fillable_mobile = TRUE,   layout_columns(     col_widths = breakpoints(       sm = c(12, 12, 12),       md = c(6, 6, 12),       lg = c(4, 4, 4)     ),     x, x, x   ) ) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/nav-items.html","id":null,"dir":"Reference","previous_headings":"","what":"Navigation items — nav-items","title":"Navigation items — nav-items","text":"Create nav item(s) use inside nav containers (e.g., navset_tab(), navset_bar(), etc).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/nav-items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Navigation items — nav-items","text":"","code":"nav_panel(title, ..., value = title, icon = NULL)  nav_panel_hidden(value, ..., icon = NULL)  nav_menu(title, ..., value = title, icon = NULL, align = c(\"left\", \"right\"))  nav_item(...)  nav_spacer()"},{"path":"https://rstudio.github.io/bslib/dev/reference/nav-items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Navigation items — nav-items","text":"title title display. Can character string UI elements (.e., htmltools::tags). ... Depends function: nav_panel() nav_panel_hidden(): UI elements (.e., htmltools::tags) display item active. nav_menu(): collection nav items (e.g., nav_panel(), nav_item()). nav_item(): UI elements (.e., htmltools::tags) place directly navigation panel (e.g., search forms, links external content, etc). value character string assign nav item. value may supplied relevant container's selected argument order show particular nav item's content immediately page load. value also useful programmatically updating selected content via nav_select(), nav_hide(), etc (updating selected tabs way often useful showing/hiding panels content via UI controls like shiny::radioButtons() – scenario, consider using nav_panel_hidden() navset_hidden()). icon Optional icon appear next nav item's title. align horizontal alignment dropdown menu relative dropdown toggle.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/nav-items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Navigation items — nav-items","text":"nav item may passed nav container (e.g. navset_tab()).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/nav-items.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Navigation items — nav-items","text":"nav_panel(): Content display given item selected. nav_panel_hidden(): Create nav content use inside navset_hidden() (creating custom navigation controls via navs_select()), nav_menu(): Create menu nav items. nav_item(): Place arbitrary content navigation panel (e.g., search forms, links external content, etc.) nav_spacer(): Adding spacing nav items.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/nav_prepend.html","id":null,"dir":"Reference","previous_headings":"","what":"Append or prepend nav item to a dropdown menu — nav_prepend","title":"Append or prepend nav item to a dropdown menu — nav_prepend","text":"Exported use shiny::prependTab()/shiny::appendTab(). functions superseded nav_insert() (.e., shiny::insertTab()), since can everything functions (.e., add nav_panel() start end nav_menu()) (.e., insert nav_panel() anywhere inside nav container).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/nav_prepend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append or prepend nav item to a dropdown menu — nav_prepend","text":"","code":"nav_prepend(   id,   nav,   menu_title,   select = FALSE,   session = get_current_session() )  nav_append(   id,   nav,   menu_title,   select = FALSE,   session = get_current_session() )"},{"path":"https://rstudio.github.io/bslib/dev/reference/nav_prepend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append or prepend nav item to a dropdown menu — nav_prepend","text":"id character string used identify nav container. nav nav_panel() item. menu_title title nav_menu(). select nav selected upon inserted? session shiny session object (default almost always used).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/nav_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamically update nav containers — nav_select","title":"Dynamically update nav containers — nav_select","text":"Functions dynamically updating nav containers (e.g., select, insert, remove nav items). functions require id nav container specified must called within active Shiny session.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/nav_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamically update nav containers — nav_select","text":"","code":"nav_select(id, selected = NULL, session = get_current_session())  nav_insert(   id,   nav,   target = NULL,   position = c(\"after\", \"before\"),   select = FALSE,   session = get_current_session() )  nav_remove(id, target, session = get_current_session())  nav_show(id, target, select = FALSE, session = get_current_session())  nav_hide(id, target, session = get_current_session())"},{"path":"https://rstudio.github.io/bslib/dev/reference/nav_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamically update nav containers — nav_select","text":"id character string used identify nav container. selected character string used identify particular nav_panel() item. session shiny session object (default almost always used). nav nav_panel() item. target value existing nav_panel() item, next tab added. removing: value nav_panel() item want remove. position nav added target? select nav selected upon inserted?","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/nav_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamically update nav containers — nav_select","text":"","code":"can_browse <- function() rlang::is_interactive() && require(\"shiny\")  # Selecting a tab if (can_browse()) {   shinyApp(     page_fluid(       radioButtons(\"item\", \"Choose\", c(\"A\", \"B\")),       navset_hidden(         id = \"container\",         nav_panel_hidden(\"A\", \"a\"),         nav_panel_hidden(\"B\", \"b\")       )     ),     function(input, output) {       observe(nav_select(\"container\", input$item))     }   ) }  # Inserting and removing if (can_browse()) {   ui <- page_fluid(     actionButton(\"add\", \"Add 'Dynamic' tab\"),     actionButton(\"remove\", \"Remove 'Foo' tab\"),     navset_tab(       id = \"tabs\",       nav_panel(\"Hello\", \"hello\"),       nav_panel(\"Foo\", \"foo\"),       nav_panel(\"Bar\", \"bar tab\")     )   )   server <- function(input, output) {     observeEvent(input$add, {       nav_insert(         \"tabs\", target = \"Bar\", select = TRUE,         nav_panel(\"Dynamic\", \"Dynamically added content\")       )     })     observeEvent(input$remove, {       nav_remove(\"tabs\", target = \"Foo\")     })   }   shinyApp(ui, server) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/navbar_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a set of navbar options — navbar_options","title":"Create a set of navbar options — navbar_options","text":"navbar_options() object captures options specific appearance behavior navbar, independent content displayed page. helper used create list options expected navbar_options page_navbar() navset_bar().","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/navbar_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a set of navbar options — navbar_options","text":"","code":"navbar_options(   ...,   position = c(\"static-top\", \"fixed-top\", \"fixed-bottom\"),   bg = NULL,   theme = c(\"auto\", \"light\", \"dark\"),   collapsible = TRUE,   underline = TRUE )"},{"path":"https://rstudio.github.io/bslib/dev/reference/navbar_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a set of navbar options — navbar_options","text":"... Additional attributes passed directly navbar container element. position Determines whether navbar displayed top page normal scrolling behavior (\"static-top\"), pinned top (\"fixed-top\"), pinned bottom (\"fixed-bottom\"). Note using \"fixed-top\" \"fixed-bottom\" cause navbar overlay body content, unless add padding, e.g.: tags$style(type=\"text/css\", \"body   {padding-top: 70px;}\") bg CSS color use navbar's background color. theme Either \"dark\" light text color (dark background) \"light\" dark text color (light background). \"auto\" (default) bg provided, best contrast bg chosen. collapsible TRUE automatically collapse navigation elements expandable menu mobile devices narrow window widths. underline Whether add underline styling page navbar links active focused.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/navbar_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a set of navbar options — navbar_options","text":"Returns list navbar options.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/navbar_options.html","id":"navbar-style-with-bootstrap-and-bootswatch-themes","dir":"Reference","previous_headings":"","what":"Navbar style with Bootstrap 5 and Bootswatch themes","title":"Create a set of navbar options — navbar_options","text":"bslib v0.9.0, default navbar colors Bootswatch themes Bootstrap 5 changed. Prior v0.9.0, bslib pre-selected navbar background colors light dark mode; v0.9.0 default navbar colors less opinionated default follow light dark mode (see input_dark_mode()). can use navbar_options() adjust colors navbar using Bootswatch preset theme Bootstrap 5. example, Bootswatch documentation Flatly theme shows 4 navbar variations. Inspecting source code first example reveals following markup:   Note navbar uses bg-primary class dark navy background. navbar's white text controlled data-bs-theme=\"dark\" attribute, used Bootstrap light text dark background. bslib, can achieve look :   particular combination class = \"bg-primary\" theme = \"dark\" works well Bootswatch presets. Another variation Flatly documentation features navar dark text light background:   options set navbar foreground background colors always light dark modes. customize navbar colors used light dark mode, can use $navbar-light-bg $navbar-dark-bg Sass variables. provided, bslib automatically choose use light dark text foreground color.   Finally, can also use $navbar-bg Sass variable set navbar background color light dark modes:","code":"<nav class=\"navbar navbar-expand-lg bg-primary\" data-bs-theme=\"dark\">   <!-- all of the navbar html --> <\/nav> ui <- page_navbar(   theme = bs_theme(5, \"flatly\"),   navbar_options = navbar_options(class = \"bg-primary\", theme = \"dark\") ) ui <- page_navbar(   theme = bs_theme(5, \"flatly\"),   navbar_options = navbar_options(class = \"bg-light\", theme = \"light\") ) ui <- page_navbar(   theme = bs_theme(     5,     preset = \"flatly\",     navbar_light_bg = \"#18BC9C\", # flatly's success color (teal)     navbar_dark_bg = \"#2C3E50\"   # flatly's primary color (navy)   ) ) ui <- page_navbar(   theme = bs_theme(     5,     preset = \"flatly\",     navbar_bg = \"#E74C3C\" # flatly's danger color (red)   ) )"},{"path":"https://rstudio.github.io/bslib/dev/reference/navbar_options.html","id":"changelog","dir":"Reference","previous_headings":"","what":"Changelog","title":"Create a set of navbar options — navbar_options","text":"function introduced bslib v0.9.0, replacing position, bg, inverse, collapsible underline arguments page_navbar() navset_bar(). arguments deprecated warning removed future version bslib. Note deprecated inverse argument page_navbar() navset_bar() replaced theme argument navbar_options().","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/navbar_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a set of navbar options — navbar_options","text":"","code":"navbar_options(position = \"static-top\", bg = \"#2e9f7d\", underline = FALSE) #> <bslib_navbar_options> #>    position: static-top #>          bg: #2e9f7d #>       theme: (auto) #> collapsible: (TRUE) #>   underline: FALSE"},{"path":"https://rstudio.github.io/bslib/dev/reference/navset.html","id":null,"dir":"Reference","previous_headings":"","what":"Navigation containers — navset","title":"Navigation containers — navset","text":"Render collection nav_panel() items container.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/navset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Navigation containers — navset","text":"","code":"navset_tab(..., id = NULL, selected = NULL, header = NULL, footer = NULL)  navset_pill(..., id = NULL, selected = NULL, header = NULL, footer = NULL)  navset_underline(..., id = NULL, selected = NULL, header = NULL, footer = NULL)  navset_pill_list(   ...,   id = NULL,   selected = NULL,   header = NULL,   footer = NULL,   well = TRUE,   fluid = TRUE,   widths = c(4, 8) )  navset_hidden(..., id = NULL, selected = NULL, header = NULL, footer = NULL)  navset_bar(   ...,   title = NULL,   id = NULL,   selected = NULL,   sidebar = NULL,   fillable = TRUE,   gap = NULL,   padding = NULL,   header = NULL,   footer = NULL,   fluid = TRUE,   navbar_options = NULL,   position = deprecated(),   bg = deprecated(),   inverse = deprecated(),   collapsible = deprecated() )  navset_card_tab(   ...,   id = NULL,   selected = NULL,   title = NULL,   sidebar = NULL,   header = NULL,   footer = NULL,   height = NULL,   full_screen = FALSE,   wrapper = card_body )  navset_card_pill(   ...,   id = NULL,   selected = NULL,   title = NULL,   sidebar = NULL,   header = NULL,   footer = NULL,   height = NULL,   placement = c(\"above\", \"below\"),   full_screen = FALSE,   wrapper = card_body )  navset_card_underline(   ...,   id = NULL,   selected = NULL,   title = NULL,   sidebar = NULL,   header = NULL,   footer = NULL,   height = NULL,   full_screen = FALSE,   wrapper = card_body )"},{"path":"https://rstudio.github.io/bslib/dev/reference/navset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Navigation containers — navset","text":"... collection nav_panel() items. id character string used dynamically updating container (see nav_select()). selected character string matching value particular nav_panel() item selected default. header UI element(s) (htmltools::tags) display nav content. card-based navsets, elements implicitly wrapped card_body(). control things like padding, fill, etc., wrap elements explicit card_body(). footer UI element(s) (htmltools::tags) display nav content. card-based navsets, elements implicitly wrapped card_body(). control things like padding, fill, etc., wrap elements explicit card_body(). well TRUE place well (gray rounded rectangle) around navigation list. fluid TRUE use fluid layout; FALSE use fixed layout. widths Column widths navigation list tabset content areas respectively. title (left-aligned) title place card header/footer. provided, nav items automatically right aligned. sidebar sidebar() component display every nav_panel() page. fillable Whether allow fill items grow/shrink fit browser window. TRUE, nav_panel() pages fillable. character vector, matching value nav_panel()s filled, may also provided. Note , sidebar provided, fillable makes main content portion fillable. gap CSS length unit defining gap (.e., spacing) elements provided .... padding Padding use body. can numeric vector (interpreted pixels) character vector valid CSS lengths. length can one four. one, value used four sides. two, first value used top bottom, second value used left right. three, first used top, second left right, third bottom. four, values interpreted top, right, bottom, left respectively. navbar_options Options control appearance behavior navbar. Use navbar_options() create list options. position Please use navbar_options = navbar_options(position=) instead. bg Please use navbar_options = navbar_options(bg=) instead. inverse Please use navbar_options = navbar_options(inverse=) instead. collapsible Please use navbar_options = navbar_options(collapsible=) instead. height valid CSS unit (e.g., height=\"200px\"). apply card made full_screen (case, consider setting height card_body()). full_screen TRUE, icon appear hovering card body. Clicking icon expands card fit viewport size. wrapper function (returns UI element) call unnamed arguments ... already card item(s) (like card_header(), card_body(), etc.). Note non-card items grouped together one wrapper call (e.g. given card(\"\", \"b\", card_body(\"c\"), \"d\"), wrapper called twice, \"\" \"b\" \"d\"). placement placement nav items relative content.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/navset.html","id":"a-basic-example","dir":"Reference","previous_headings":"","what":"A basic example","title":"Navigation containers — navset","text":"first example creates simple tabbed navigation container two tabs. tab name content tab specified nav_panel() calls navset_tab() creates tabbed navigation around two tabs.    rest examples, include links among tabs (pills) navigation controls.","code":"library(htmltools)  navset_tab(   nav_panel(title = \"One\", p(\"First tab content.\")),   nav_panel(title = \"Two\", p(\"Second tab content.\")) ) link_shiny <- tags$a(shiny::icon(\"github\"), \"Shiny\", href = \"https://github.com/rstudio/shiny\", target = \"_blank\") link_posit <- tags$a(shiny::icon(\"r-project\"), \"Posit\", href = \"https://posit.co\", target = \"_blank\")"},{"path":"https://rstudio.github.io/bslib/dev/reference/navset.html","id":"navset-tab-","dir":"Reference","previous_headings":"","what":"navset_tab()","title":"Navigation containers — navset","text":"can fully customize controls navigation component. example, added direct link Shiny repository using nav_item(). also included dropdown menu using nav_menu() containing option select third tab panel another direct link Posit's website. Finally, separated primary tabs left direct link dropdown menu right using nav_spacer().","code":"navset_tab(   nav_panel(title = \"One\", p(\"First tab content.\")),   nav_panel(title = \"Two\", p(\"Second tab content.\")),   nav_panel(title = \"Three\", p(\"Third tab content\")),   nav_spacer(),   nav_menu(     title = \"Links\",     nav_item(link_shiny),     nav_item(link_posit)   ) )"},{"path":"https://rstudio.github.io/bslib/dev/reference/navset.html","id":"navset-pill-","dir":"Reference","previous_headings":"","what":"navset_pill()","title":"Navigation containers — navset","text":"navset_pill() creates navigation container behaves exactly like navset_tab(), tab toggles pills button-shaped.","code":"navset_pill(   nav_panel(title = \"One\", p(\"First tab content.\")),   nav_panel(title = \"Two\", p(\"Second tab content.\")),   nav_panel(title = \"Three\", p(\"Third tab content\")),   nav_spacer(),   nav_menu(     title = \"Links\",     nav_item(link_shiny),     nav_item(link_posit)   ) )"},{"path":"https://rstudio.github.io/bslib/dev/reference/navset.html","id":"navset-underline-","dir":"Reference","previous_headings":"","what":"navset_underline()","title":"Navigation containers — navset","text":"navset_underline() creates navigation container behaves exactly like navset_tab() navset_pill(), active/focused navigation links styled underline.","code":"navset_underline(   nav_panel(title = \"One\", p(\"First tab content.\")),   nav_panel(title = \"Two\", p(\"Second tab content.\")),   nav_panel(title = \"Three\", p(\"Third tab content\")),   nav_spacer(),   nav_menu(     title = \"Links\",     nav_item(link_shiny),     nav_item(link_posit)   ) )"},{"path":"https://rstudio.github.io/bslib/dev/reference/navset.html","id":"navset-card-tab-","dir":"Reference","previous_headings":"","what":"navset_card_tab()","title":"Navigation containers — navset","text":"tabbed navigation container can also used card() component thanks navset_card_tab(). Learn approach article Cards, including add shared sidebar tabs card using sidebar argument navset_card_tab().","code":"navset_card_tab(   nav_panel(title = \"One\", p(\"First tab content.\")),   nav_panel(title = \"Two\", p(\"Second tab content.\")),   nav_panel(title = \"Three\", p(\"Third tab content\")),   nav_spacer(),   nav_menu(     title = \"Links\",     nav_item(link_shiny),     nav_item(link_posit)   ) )"},{"path":"https://rstudio.github.io/bslib/dev/reference/navset.html","id":"navset-card-pill-","dir":"Reference","previous_headings":"","what":"navset_card_pill()","title":"Navigation containers — navset","text":"Similar navset_pill(), navset_card_pill() provides pill-shaped variant navset_card_tab(). can use placement argument position navbar \"\" \"\" card body.","code":"navset_card_pill(   placement = \"above\",   nav_panel(title = \"One\", p(\"First tab content.\")),   nav_panel(title = \"Two\", p(\"Second tab content.\")),   nav_panel(title = \"Three\", p(\"Third tab content\")),   nav_spacer(),   nav_menu(     title = \"Links\",     nav_item(link_shiny),     nav_item(link_posit)   ) )"},{"path":"https://rstudio.github.io/bslib/dev/reference/navset.html","id":"navset-card-underline-","dir":"Reference","previous_headings":"","what":"navset_card_underline()","title":"Navigation containers — navset","text":"navset_card_underline() provides card-based variant navset_underline().","code":"navset_card_underline(   nav_panel(title = \"One\", p(\"First tab content.\")),   nav_panel(title = \"Two\", p(\"Second tab content.\")),   nav_panel(title = \"Three\", p(\"Third tab content\")),   nav_spacer(),   nav_menu(     title = \"Links\",     nav_item(link_shiny),     nav_item(link_posit)   ) )"},{"path":"https://rstudio.github.io/bslib/dev/reference/navset.html","id":"navset-pill-list-","dir":"Reference","previous_headings":"","what":"navset_pill_list()","title":"Navigation containers — navset","text":"Furthermore, navset_pill_list() creates vertical list navigation controls adjacent , rather top , tab content panels.","code":"navset_pill_list(   nav_panel(title = \"One\", p(\"First tab content.\")),   nav_panel(title = \"Two\", p(\"Second tab content.\")),   nav_panel(title = \"Three\", p(\"Third tab content\")),   nav_spacer(),   nav_menu(     title = \"Links\",     nav_item(link_shiny),     nav_item(link_posit)   ) )"},{"path":"https://rstudio.github.io/bslib/dev/reference/navset.html","id":"page-navbar-","dir":"Reference","previous_headings":"","what":"page_navbar()","title":"Navigation containers — navset","text":"Finally, page_navbar() provides full-page navigation container similar navset_underline() nav_panel() treated full page content navigation controls appear top-level navigation bar. Note navbar background underline styling can controlled via navbar_options. page_navbar() complimented navset_bar() produces similar layout intended used within app.","code":"page_navbar(   title = \"My App\",   navbar_options = navbar_options(     bg = \"#0062cc\",     underline = TRUE   ),   nav_panel(title = \"One\", p(\"First tab content.\")),   nav_panel(title = \"Two\", p(\"Second tab content.\")),   nav_panel(title = \"Three\", p(\"Third tab content\")),   nav_spacer(),   nav_menu(     title = \"Links\",     align = \"right\",     nav_item(link_shiny),     nav_item(link_posit)   ) )"},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/page.html","id":null,"dir":"Reference","previous_headings":"","what":"Modern Bootstrap page layouts — page","title":"Modern Bootstrap page layouts — page","text":"functions small wrappers around shiny's page constructors (.e., shiny::fluidPage(), shiny::navbarPage(), etc) differ two ways: theme parameter defaults bslib's recommended version Bootstrap (new projects). return value rendered static HTML page printed interactively console.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modern Bootstrap page layouts — page","text":"","code":"page(..., title = NULL, theme = bs_theme(), lang = NULL)  page_fluid(..., title = NULL, theme = bs_theme(), lang = NULL)  page_fixed(..., title = NULL, theme = bs_theme(), lang = NULL)"},{"path":"https://rstudio.github.io/bslib/dev/reference/page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modern Bootstrap page layouts — page","text":"... UI elements page. Named arguments become HTML attributes. title browser window title (defaults host URL page) theme bs_theme() object. lang ISO 639-1 language code HTML page, \"en\" \"ko\". used lang <html> tag, <html lang=\"en\">. default (NULL) results empty string.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/page.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Modern Bootstrap page layouts — page","text":"page(): bslib wrapper shiny::bootstrapPage(), basic Boostrap page content added directly page body. page_fluid(): bslib wrapper shiny::fluidPage(), fluid Bootstrap-based page layout extends full viewport width. page_fixed(): bslib wrapper shiny::fixedPage(), fixed Bootstrap-based page layout page content container centered horizontally width constrained.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/page_fillable.html","id":null,"dir":"Reference","previous_headings":"","what":"A screen-filling page layout — page_fillable","title":"A screen-filling page layout — page_fillable","text":"Bootstrap-based page layout whose contents fill full height width browser window.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/page_fillable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A screen-filling page layout — page_fillable","text":"","code":"page_fillable(   ...,   padding = NULL,   gap = NULL,   fillable_mobile = FALSE,   title = NULL,   theme = bs_theme(),   lang = NULL )"},{"path":"https://rstudio.github.io/bslib/dev/reference/page_fillable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A screen-filling page layout — page_fillable","text":"... UI elements page. Named arguments become HTML attributes. padding Padding use body. can numeric vector (interpreted pixels) character vector valid CSS lengths. length can one four. one, value used four sides. two, first value used top bottom, second value used left right. three, first used top, second left right, third bottom. four, values interpreted top, right, bottom, left respectively. gap CSS length unit defining gap (.e., spacing) elements provided .... fillable_mobile Whether page fill viewport's height mobile devices (.e., narrow windows). title browser window title (defaults host URL page) theme bs_theme() object. lang ISO 639-1 language code HTML page, \"en\" \"ko\". used lang <html> tag, <html lang=\"en\">. default (NULL) results empty string.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/page_fillable.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A screen-filling page layout — page_fillable","text":"Filling Layouts bslib website. Getting Started Dashboards bslib website.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/page_fillable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A screen-filling page layout — page_fillable","text":"","code":"if (FALSE) { # rlang::is_interactive()  library(shiny) library(ggplot2)  ui <- page_fillable(   h1(\"Example\", code(\"mtcars\"), \"dashboard\"),   layout_columns(     card(       full_screen = TRUE,       card_header(\"Number of forward gears\"),       plotOutput(\"gear\")     ),     card(       full_screen = TRUE,       card_header(\"Number of carburetors\"),       plotOutput(\"carb\")     )   ),   card(     full_screen = TRUE,     card_header(\"Weight vs. Quarter Mile Time\"),     layout_sidebar(       sidebar = sidebar(         varSelectInput(\"var_x\", \"Compare to qsec:\", mtcars[-7], \"wt\"),         varSelectInput(\"color\", \"Color by:\", mtcars[-7], \"cyl\"),         position = \"right\"       ),       plotOutput(\"var_vs_qsec\")     )   ) )  server <- function(input, output) {   for (var in c(\"cyl\", \"vs\", \"am\", \"gear\", \"carb\")) {     mtcars[[var]] <- as.factor(mtcars[[var]])   }    output$gear <- renderPlot({     ggplot(mtcars, aes(gear)) + geom_bar()   })    output$carb <- renderPlot({     ggplot(mtcars, aes(carb)) + geom_bar()   })    output$var_vs_qsec <- renderPlot({     req(input$var_x, input$color)      ggplot(mtcars) +       aes(y = qsec, x = !!input$var_x, color = !!input$color) +       geom_point()   }) }  shinyApp(ui, server) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/page_navbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-page app with a top navigation bar — page_navbar","title":"Multi-page app with a top navigation bar — page_navbar","text":"Create page contains top level navigation bar can used toggle set nav_panel() elements. Use page layout create effect multi-page app, app's content broken multiple \"pages\" can navigated via top navigation bar.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/page_navbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-page app with a top navigation bar — page_navbar","text":"","code":"page_navbar(   ...,   title = NULL,   id = NULL,   selected = NULL,   sidebar = NULL,   fillable = TRUE,   fillable_mobile = FALSE,   gap = NULL,   padding = NULL,   header = NULL,   footer = NULL,   navbar_options = NULL,   fluid = TRUE,   theme = bs_theme(),   window_title = NA,   lang = NULL,   position = deprecated(),   bg = deprecated(),   inverse = deprecated(),   underline = deprecated(),   collapsible = deprecated() )"},{"path":"https://rstudio.github.io/bslib/dev/reference/page_navbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-page app with a top navigation bar — page_navbar","text":"... collection nav_panel() items. title (left-aligned) title place card header/footer. provided, nav items automatically right aligned. id character string used dynamically updating container (see nav_select()). selected character string matching value particular nav_panel() item selected default. sidebar sidebar() component display every nav_panel() page. fillable Whether allow fill items grow/shrink fit browser window. TRUE, nav_panel() pages fillable. character vector, matching value nav_panel()s filled, may also provided. Note , sidebar provided, fillable makes main content portion fillable. fillable_mobile Whether fillable pages fill viewport's height mobile devices (.e., narrow windows). gap CSS length unit defining gap (.e., spacing) elements provided .... padding Padding use body. can numeric vector (interpreted pixels) character vector valid CSS lengths. length can one four. one, value used four sides. two, first value used top bottom, second value used left right. three, first used top, second left right, third bottom. four, values interpreted top, right, bottom, left respectively. header UI element(s) (htmltools::tags) display nav content. card-based navsets, elements implicitly wrapped card_body(). control things like padding, fill, etc., wrap elements explicit card_body(). footer UI element(s) (htmltools::tags) display nav content. card-based navsets, elements implicitly wrapped card_body(). control things like padding, fill, etc., wrap elements explicit card_body(). navbar_options Options control appearance behavior navbar. Use navbar_options() create list options. fluid TRUE use fluid layout; FALSE use fixed layout. theme bs_theme() object. window_title browser window title. default value, NA, means use character strings appear title (none found, host URL page displayed default). lang ISO 639-1 language code HTML page, \"en\" \"ko\". used lang <html> tag, <html lang=\"en\">. default (NULL) results empty string. position Please use navbar_options = navbar_options(position=) instead. bg Please use navbar_options = navbar_options(bg=) instead. inverse Please use navbar_options = navbar_options(inverse=) instead. underline Please use navbar_options = navbar_options(underline=) instead. collapsible Please use navbar_options = navbar_options(collapsible=) instead.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/page_navbar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multi-page app with a top navigation bar — page_navbar","text":"Getting Started Dashboards bslib website.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/page_navbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi-page app with a top navigation bar — page_navbar","text":"","code":"if (FALSE) { # rlang::is_interactive() library(shiny) library(bslib)  link_shiny <- tags$a(   shiny::icon(\"github\"), \"Shiny\",   href = \"https://github.com/rstudio/shiny\",   target = \"_blank\" ) link_posit <- tags$a(   shiny::icon(\"r-project\"), \"Posit\",   href = \"https://posit.co\",   target = \"_blank\" )  ui <- page_navbar(   title = \"My App\",   nav_panel(title = \"One\", p(\"First page content.\")),   nav_panel(title = \"Two\", p(\"Second page content.\")),   nav_panel(\"Three\", p(\"Third page content.\")),   nav_spacer(),   nav_menu(     title = \"Links\",     align = \"right\",     nav_item(link_shiny),     nav_item(link_posit)   ) )  server <- function(...) { } # not used in this example  shinyApp(ui, server) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/page_sidebar.html","id":null,"dir":"Reference","previous_headings":"","what":"A sidebar page (i.e., dashboard) — page_sidebar","title":"A sidebar page (i.e., dashboard) — page_sidebar","text":"Create dashboard layout full-width header (title) sidebar().","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/page_sidebar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A sidebar page (i.e., dashboard) — page_sidebar","text":"","code":"page_sidebar(   ...,   sidebar = NULL,   title = NULL,   fillable = TRUE,   fillable_mobile = FALSE,   theme = bs_theme(),   window_title = NA,   lang = NULL )"},{"path":"https://rstudio.github.io/bslib/dev/reference/page_sidebar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sidebar page (i.e., dashboard) — page_sidebar","text":"... UI elements display 'main' content area (.e., next sidebar). arguments passed layout_sidebar(), details. sidebar sidebar() object. title string, number, htmltools::tag() child display title (just sidebar). fillable Whether main content area considered fillable (.e., flexbox) container. fillable_mobile Whether page fill viewport's height mobile devices (.e., narrow windows). theme bs_theme() object. window_title browser window title. default value, NA, means use character strings appear title (none found, host URL page displayed default). lang ISO 639-1 language code HTML page, \"en\" \"ko\". used lang <html> tag, <html lang=\"en\">. default (NULL) results empty string.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/page_sidebar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A sidebar page (i.e., dashboard) — page_sidebar","text":"Getting Started Dashboards bslib website.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/page_sidebar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A sidebar page (i.e., dashboard) — page_sidebar","text":"","code":"if (FALSE) { # rlang::is_interactive()  library(shiny) library(ggplot2)  ui <- page_sidebar(   title = \"Example dashboard\",   sidebar = sidebar(     varSelectInput(\"var\", \"Select variable\", mtcars)   ),   card(     full_screen = TRUE,     card_header(\"My plot\"),     plotOutput(\"p\")   ) )  server <- function(input, output) {   output$p <- renderPlot({     ggplot(mtcars) + geom_histogram(aes(!!input$var))   }) }  shinyApp(ui, server) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/popover.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a popover to a UI element — popover","title":"Add a popover to a UI element — popover","text":"Display additional information clicking UI element (typically button).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/popover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a popover to a UI element — popover","text":"","code":"popover(   trigger,   ...,   title = NULL,   id = NULL,   placement = c(\"auto\", \"top\", \"right\", \"bottom\", \"left\"),   options = list() )  toggle_popover(id, show = NULL, session = get_current_session())  update_popover(id, ..., title = NULL, session = get_current_session())"},{"path":"https://rstudio.github.io/bslib/dev/reference/popover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a popover to a UI element — popover","text":"trigger UI element serve popover trigger (typically shiny::actionButton() similar). trigger renders multiple HTML elements (e.g., tagList()), last HTML element used trigger. trigger contain elements, wrap object htmltools::div() htmltools::span(). ... UI elements popover's body. Character strings automatically escaped unless marked htmltools::HTML(). title title (header) popover. remove header update_popover(), provide either empty string character(0). id character string. Required re-actively respond visibility popover (via input[[id]] value) /update visibility/contents popover. placement placement popover relative trigger. options list additional options. show Whether show (TRUE) hide (FALSE) popover. default (NULL) show currently hidden hide currently shown. Note popover shown trigger visible (e.g., hidden behind tab). session Shiny session object (default almost always used).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/popover.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Add a popover to a UI element — popover","text":"popover(): Add popover UI element toggle_popover(): Programmatically show/hide popover. update_popover(): Update contents popover.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/popover.html","id":"closing-popovers","dir":"Reference","previous_headings":"","what":"Closing popovers","title":"Add a popover to a UI element — popover","text":"addition clicking close_button, popovers can closed pressing Esc/Space key popover (/trigger) focused.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/popover.html","id":"theming-styling","dir":"Reference","previous_headings":"","what":"Theming/Styling","title":"Add a popover to a UI element — popover","text":"Like bslib components, popovers can themed supplying relevant theming variables bs_theme(), effects styling every popover page. style specific popover differently popover, utilize customClass option:   add relevant rules bs_theme() via bs_add_rules():","code":"popover(   \"Trigger\", \"Popover message\",   options = list(customClass = \"my-pop\") ) bs_theme() |> bs_add_rules(\".my-pop { max-width: none; }\")"},{"path":"https://rstudio.github.io/bslib/dev/reference/popover.html","id":"accessibility-of-popover-triggers","dir":"Reference","previous_headings":"","what":"Accessibility of Popover Triggers","title":"Add a popover to a UI element — popover","text":"user needs interact trigger element see popover, best practice use element typically accessible via keyboard interactions, like button link. use non-interactive element, like <span> text, bslib automatically add tabindex=\"0\" attribute trigger element make sure users can reach element keyboard. means cases can use element want trigger. One place important consider accessibility trigger using icon without accompanying text. cases, many R packages provide icons create icon element assumption icon decorative, make inaccessible users assistive technologies. using icon primary trigger, ensure icon aria-hidden=\"true\" role=\"presentation\" attributes. Icon packages typically provide way specify title icon, well way specify icon decorative. title short description purpose trigger, rather description icon . using bsicons::bs_icon(), provide title. using fontawesome::fa(), set a11y = \"sem\" provide title. example:","code":"popover(   bsicons::bs_icon(\"gear\", title = \"Settings\"),   title = \"Settings\",   sliderInput(\"n\", \"Number of points\", 1, 100, 50) ) popover(   fontawesome::fa(\"gear\", a11y = \"sem\", title = \"Settings\"),   title = \"Settings\",   sliderInput(\"n\", \"Number of points\", 1, 100, 50) )"},{"path":"https://rstudio.github.io/bslib/dev/reference/popover.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add a popover to a UI element — popover","text":"Popovers based Bootstrap's Popover component. See bslib website interactive introduction tooltips popovers.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/popover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a popover to a UI element — popover","text":"","code":"if (FALSE) { # rlang::is_interactive()  popover(   shiny::actionButton(\"btn\", \"A button\"),   \"Popover body content...\",   title = \"Popover title\" )  library(shiny)  ui <- page_fixed(   card(class = \"mt-5\",     card_header(       popover(         uiOutput(\"card_title\", inline = TRUE),         title = \"Provide a new title\",         textInput(\"card_title\", NULL, \"An editable title\")       )     ),     \"The card body...\"   ) )  server <- function(input, output) {   output$card_title <- renderUI({     list(input$card_title, bsicons::bs_icon(\"pencil-square\"))   }) }  shinyApp(ui, server) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/precompiled_css_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the path to a precompiled CSS file — precompiled_css_path","title":"Get the path to a precompiled CSS file — precompiled_css_path","text":"function meant development debugging purposes. can used test precompiled CSS file exists given theme object.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/precompiled_css_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the path to a precompiled CSS file — precompiled_css_path","text":"","code":"precompiled_css_path(theme = bs_theme())"},{"path":"https://rstudio.github.io/bslib/dev/reference/precompiled_css_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the path to a precompiled CSS file — precompiled_css_path","text":"theme bs_theme() object.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/precompiled_css_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the path to a precompiled CSS file — precompiled_css_path","text":"path precompiled CSS file, exists, NULL, .","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. htmltools css","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/run_with_themer.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme customization UI — run_with_themer","title":"Theme customization UI — run_with_themer","text":"'real-time' theme customization UI can use easily make common tweaks Bootstrap variables immediately see affect app's appearance. two ways can launch theming UI. Shiny apps, just use run_with_themer() place shiny::runApp(); take arguments work way. Alternatively, can call bs_themer() function inside server function (R Markdown app using runtime: shiny, can call code chunk). Note function intended used development!","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/run_with_themer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme customization UI — run_with_themer","text":"","code":"run_with_themer(appDir = getwd(), ..., gfonts = TRUE, gfonts_update = FALSE)  bs_themer(gfonts = TRUE, gfonts_update = FALSE)"},{"path":"https://rstudio.github.io/bslib/dev/reference/run_with_themer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme customization UI — run_with_themer","text":"appDir application run. can file directory path, shiny::shinyApp() object. See shiny::runApp() details. ... Additional parameters pass shiny::runApp(). gfonts whether detect Google Fonts wrap font_google() (font files automatically imported). gfonts_update whether update internal database Google Fonts.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/run_with_themer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme customization UI — run_with_themer","text":"nothing. functions called side-effects.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/run_with_themer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Theme customization UI — run_with_themer","text":"help utilize changes see preview, utility prints bs_theme() code R console.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/run_with_themer.html","id":"limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Theme customization UI — run_with_themer","text":"work Bootstrap 3. work IE11. works inside Shiny apps runtime: shiny R Markdown documents. used static R Markdown documents. Can used extent runtime: shiny_prerendered, UI rendered context=\"server\" may update real-time. work '3rd party' custom widgets make use bs_dependency_defer() bs_current_theme().","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/run_with_themer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme customization UI — run_with_themer","text":"","code":"library(shiny)  ui <- fluidPage(   theme = bs_theme(bg = \"black\", fg = \"white\"),   h1(\"Heading 1\"),   h2(\"Heading 2\"),   p(     \"Paragraph text;\",     tags$a(href = \"https://www.rstudio.com\", \"a link\")   ),   p(     actionButton(\"cancel\", \"Cancel\"),     actionButton(\"continue\", \"Continue\", class = \"btn-primary\")   ),   tabsetPanel(     tabPanel(\"First tab\",       \"The contents of the first tab\"     ),     tabPanel(\"Second tab\",       \"The contents of the second tab\"     )   ) )  if (interactive()) {   run_with_themer(shinyApp(ui, function(input, output) {})) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/save-html.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a bslib page/fragment as HTML — save_html.bslib_fragment","title":"Save a bslib page/fragment as HTML — save_html.bslib_fragment","text":"Save bslib page/fragment HTML","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/save-html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a bslib page/fragment as HTML — save_html.bslib_fragment","text":"","code":"# S3 method for class 'bslib_fragment' save_html(html, file, ...)  # S3 method for class 'bslib_page' save_html(html, file, ...)"},{"path":"https://rstudio.github.io/bslib/dev/reference/save-html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a bslib page/fragment as HTML — save_html.bslib_fragment","text":"html bslib page/fragment. ... passed along underlying htmltools::save_html() method.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/sidebar.html","id":null,"dir":"Reference","previous_headings":"","what":"Sidebar layouts — sidebar","title":"Sidebar layouts — sidebar","text":"Sidebar layouts place UI elements, like input controls additional context, next main content area often holds output elements like plots tables. several page, navigation, layout functions allow create sidebar layout. case, can create collapsing sidebar layout providing sidebar() object sidebar argument following functions. page_sidebar() creates \"page-level\" sidebar. page_navbar() creates multi-panel app (optional, page-level) sidebar shown every panel. layout_sidebar() creates \"floating\" sidebar layout component can used inside page() /card() context. navset_card_tab() navset_card_pill() create multi-tab cards shared sidebar accessible every panel. See Sidebars article bslib website learn .","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/sidebar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sidebar layouts — sidebar","text":"","code":"sidebar(   ...,   width = 250,   position = c(\"left\", \"right\"),   open = NULL,   id = NULL,   title = NULL,   bg = NULL,   fg = NULL,   class = NULL,   max_height_mobile = NULL,   gap = NULL,   padding = NULL )  layout_sidebar(   ...,   sidebar = NULL,   fillable = TRUE,   fill = TRUE,   bg = NULL,   fg = NULL,   border = NULL,   border_radius = NULL,   border_color = NULL,   padding = NULL,   gap = NULL,   height = NULL )  toggle_sidebar(id, open = NULL, session = get_current_session())"},{"path":"https://rstudio.github.io/bslib/dev/reference/sidebar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sidebar layouts — sidebar","text":"... Unnamed arguments can valid child htmltools tag named arguments become HTML attributes returned UI element. case layout_sidebar(), arguments passed main content tag (sidebar+main content container). width valid CSS unit used width sidebar. position sidebar appear relative main content. open initial state sidebar, choosing following options: \"desktop\": sidebar starts open desktop screen, closed mobile. default sidebar behavior. \"open\" TRUE: sidebar starts open. \"closed\" FALSE: sidebar starts closed. \"always\" NA: sidebar always open closed. Alternatively, can use list desktop mobile items set initial sidebar state independently desktop mobile screen sizes. case, desktop mobile can use options except \"desktop\", equivalent list(desktop = \"open\", mobile = \"closed\"). can also choose place always open sidebar main content mobile devices setting mobile = \"always-\". sidebar_toggle(), open indicates desired state sidebar, default open = NULL cause sidebar toggled open closed vice versa. Note sidebar_toggle() can open close sidebar, support \"desktop\" \"always\" options. id character string. Required wanting re-actively read (update) collapsible state Shiny app. title character title used sidebar title, wrapped <header> element class sidebar-title. can also provide custom htmltools::tag() title element, case likely want give element class = \"sidebar-title\". bg, fg background foreground color. one either provided, accessible contrasting color provided opposite color, e.g. setting bg chooses appropriate fg color. class CSS classes sidebar container element, addition fixed .sidebar class. max_height_mobile CSS length unit defining maximum height horizontal sidebar viewed mobile devices. applies always-open sidebars use open = \"always\", default sidebar container placed main content container mobile devices. gap CSS length unit defining vertical gap (.e., spacing) adjacent elements provided .... padding Padding within sidebar . can numeric vector (interpreted pixels) character vector valid CSS lengths. padding may one four values. one, value used four sides. two, first value used top bottom, second value used left right. three, first used top, second left right, third bottom. four, values interpreted top, right, bottom, left respectively. sidebar sidebar() object. fillable Whether main content area considered fillable (.e., flexbox) container. fill Whether allow layout container grow/shrink fit fillable container opinionated height (e.g., page_fillable()). border Whether add border. border_radius Whether add border radius. border_color border color applied entire layout (border = TRUE) color border sidebar main content area. height valid CSS unit (e.g., height=\"200px\"). apply card made full_screen (case, consider setting height card_body()). session Shiny session object (default almost always used).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/sidebar.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Sidebar layouts — sidebar","text":"toggle_sidebar(): Toggle sidebar() state active Shiny user session.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/sidebar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sidebar layouts — sidebar","text":"Sidebar layouts featured number pages bslib website: Sidebars Cards: Sidebars Getting Started: Dashboards","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/theme_bootswatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a theme's Bootswatch theme name — theme_bootswatch","title":"Obtain a theme's Bootswatch theme name — theme_bootswatch","text":"Obtain theme's Bootswatch theme name","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/theme_bootswatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a theme's Bootswatch theme name — theme_bootswatch","text":"","code":"theme_bootswatch(theme)"},{"path":"https://rstudio.github.io/bslib/dev/reference/theme_bootswatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a theme's Bootswatch theme name — theme_bootswatch","text":"theme bs_theme() object.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/theme_bootswatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a theme's Bootswatch theme name — theme_bootswatch","text":"Returns Bootswatch theme named used () theme.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/theme_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a theme's Bootstrap version — theme_version","title":"Obtain a theme's Bootstrap version — theme_version","text":"Obtain theme's Bootstrap version","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/theme_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a theme's Bootstrap version — theme_version","text":"","code":"theme_version(theme)"},{"path":"https://rstudio.github.io/bslib/dev/reference/theme_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a theme's Bootstrap version — theme_version","text":"theme bs_theme() object.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/theme_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a theme's Bootstrap version — theme_version","text":"Returns major version Bootstrap used theme.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/tooltip.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a tooltip to a UI element — tooltip","title":"Add a tooltip to a UI element — tooltip","text":"Display additional information focusing (hovering ) UI element.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/tooltip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a tooltip to a UI element — tooltip","text":"","code":"tooltip(   trigger,   ...,   id = NULL,   placement = c(\"auto\", \"top\", \"right\", \"bottom\", \"left\"),   options = list() )  toggle_tooltip(id, show = NULL, session = get_current_session())  update_tooltip(id, ..., session = get_current_session())"},{"path":"https://rstudio.github.io/bslib/dev/reference/tooltip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a tooltip to a UI element — tooltip","text":"trigger UI element (.e., htmltools tag) serve tooltip trigger. trigger renders multiple HTML elements (e.g., tagList()), last HTML element used trigger. trigger contain elements, wrap object htmltools::div() htmltools::span(). ... UI elements tooltip. Character strings automatically escaped unless marked htmltools::HTML(). id character string matches existing tooltip id. placement placement tooltip relative trigger. options list additional options. show Whether show (TRUE) hide (FALSE) tooltip. default (NULL) show currently hidden hide currently shown. Note tooltip shown trigger visible (e.g., hidden behind tab). session Shiny session object (default almost always used).","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/tooltip.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Add a tooltip to a UI element — tooltip","text":"tooltip(): Add tooltip UI element toggle_tooltip(): Programmatically show/hide tooltip. update_tooltip(): Update contents tooltip.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/tooltip.html","id":"theming-styling","dir":"Reference","previous_headings":"","what":"Theming/Styling","title":"Add a tooltip to a UI element — tooltip","text":"Like bslib components, tooltips can themed supplying relevant theming variables bs_theme(), effects styling every tooltip page. style specific tooltip differently tooltip, utilize customClass option:   add relevant rules bs_theme() via bs_add_rules():","code":"tooltip(   \"Trigger\", \"Tooltip message\",   options = list(customClass = \"my-tip\") ) bs_theme() |> bs_add_rules(\".my-tip { max-width: none; }\")"},{"path":"https://rstudio.github.io/bslib/dev/reference/tooltip.html","id":"accessibility-of-tooltip-triggers","dir":"Reference","previous_headings":"","what":"Accessibility of Tooltip Triggers","title":"Add a tooltip to a UI element — tooltip","text":"user needs interact trigger element see tooltip, best practice use element typically accessible via keyboard interactions, like button link. use non-interactive element, like <span> text, bslib automatically add tabindex=\"0\" attribute trigger element make sure users can reach element keyboard. means cases can use element want trigger. One place important consider accessibility trigger using icon without accompanying text. cases, many R packages provide icons create icon element assumption icon decorative, make inaccessible users assistive technologies. using icon primary trigger, ensure icon aria-hidden=\"true\" role=\"presentation\" attributes. Icon packages typically provide way specify title icon, well way specify icon decorative. title short description purpose trigger, rather description icon . using bsicons::bs_icon(), provide title. using fontawesome::fa(), set a11y = \"sem\" provide title. example:","code":"tooltip(   bsicons::bs_icon(\"info-circle\", title = \"About tooltips\"),   \"Text shown in the tooltip.\" ) tooltip(   fontawesome::fa(\"info-circle\", a11y = \"sem\", title = \"About tooltips\"),   \"Text shown in the tooltip.\" )"},{"path":"https://rstudio.github.io/bslib/dev/reference/tooltip.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add a tooltip to a UI element — tooltip","text":"Tooltips based Bootstrap's Tooltip component. See bslib website interactive introduction tooltips popovers.","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/tooltip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a tooltip to a UI element — tooltip","text":"","code":"if (FALSE) { # rlang::is_interactive()  tooltip(   shiny::actionButton(\"btn\", \"A button\"),   \"A message\" )  card(   card_header(     tooltip(       span(\"Card title \", bsicons::bs_icon(\"question-circle-fill\")),       \"Additional info\",       placement = \"right\"     )   ),   \"Card body content...\" ) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Value box — value_box","title":"Value box — value_box","text":"opinionated (card()-powered) box, designed displaying value title. Optionally, showcase can provide context value represents (example, hold bsicons::bs_icon(), even shiny::plotOutput()). Find examples template code can use create engaging value boxes bslib website.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value box — value_box","text":"","code":"value_box(   title,   value,   ...,   showcase = NULL,   showcase_layout = c(\"left center\", \"top right\", \"bottom\"),   full_screen = FALSE,   theme = NULL,   height = NULL,   max_height = NULL,   min_height = NULL,   fill = TRUE,   class = NULL,   id = NULL,   theme_color = deprecated() )  value_box_theme(name = NULL, bg = NULL, fg = NULL)  showcase_left_center(   width = 0.3,   width_full_screen = \"1fr\",   max_height = \"100px\",   max_height_full_screen = 0.67 )  showcase_top_right(   width = 0.4,   width_full_screen = \"1fr\",   max_height = \"75px\",   max_height_full_screen = 0.67 )  showcase_bottom(   width = \"100%\",   width_full_screen = NULL,   height = \"auto\",   height_full_screen = \"2fr\",   max_height = \"100px\",   max_height_full_screen = NULL )"},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value box — value_box","text":"title, value string, number, htmltools::tag() child display title value value box. title appears value. ... Unnamed arguments may htmltools::tag() children display value. Named arguments become attributes containing element. showcase htmltools::tag() child showcase (e.g., bsicons::bs_icon(), plotly::plotlyOutput(), etc). showcase_layout One \"left center\" (default), \"top right\" \"bottom\". Alternatively, can customize showcase layout options showcase_left_center(), showcase_top_right(), showcase_bottom() functions. Use options functions want control height width showcase area. full_screen TRUE, icon appear hovering card body. Clicking icon expands card fit viewport size. theme name theme value box, theme constructed value_box_theme(). theme names provide convenient way use app's Bootstrap theme colors foreground background colors value box. See details provided themes. control, can create theme value_box_theme() can pass foreground background colors directly. See Themes section details. max_height maximum height value_box() showcase area used showcase_layout_*() function. Can valid CSS unit (e.g., max_height=\"200px\"). min_height minimum height values box. Can valid CSS unit (e.g., min_height=\"200px\"). fill Whether allow value box grow/shrink fit fillable container opinionated height (e.g., page_fillable()). class Utility classes customizing appearance summary card. Use bg-* text-* classes (e.g, \"bg-danger\" \"text-light\") customize background/foreground colors. id Provide unique identifier card() value_box() report full screen state Shiny. example, using id = \"my_card\", can observe card's full screen state input$my_card_full_screen. theme_color Use theme instead. name name theme, e.g. \"primary\", \"danger\", \"purple\". bg, fg background foreground colors theme. bg provided, foreground color automatically chosen $black $white provide best contrast background color. width, width_full_screen, height, height_full_screen one following: proportion (.e., number 0 1) available width height allocate showcase. valid CSS unit defining width height showcase column, valid value accepted grid-template-columns (width) grid-template-rows (height) CSS property define width height showcase column row. Accepted values second category \"auto\", \"min-content\", \"max-content\", fractional unit (e.g. 2fr), minmax() function (e.g., minmax(100px, 1fr)). max_height_full_screen proportion (.e., number 0 1) valid CSS unit defining showcase max_height full screen card.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"build-a-box-app","dir":"Reference","previous_headings":"","what":"Build-a-Box App","title":"Value box — value_box","text":"Explore value_box() options layouts interactively Build--Box app, available online thanks shinyapps.io. , can run app locally :","code":"# shiny >= 1.8.1 shiny::runExample(\"build-a-box\", package = \"bslib\")  # shiny < 1.8.1 shiny::runApp(system.file(\"examples-shiny\", \"build-a-box\", package = \"bslib\"))"},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"themes","dir":"Reference","previous_headings":"","what":"Themes","title":"Value box — value_box","text":"appearance value_box() can controlled via theme argument one two ways: character value describing theme, theme = \"primary\" theme = \"blue\"; theme = value_box_theme() create custom theme. recommend using named themes value boxes (first approach), themes automatically match Bootstrap theme.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"named-themes","dir":"Reference","previous_headings":"","what":"Named themes","title":"Value box — value_box","text":"Bootstrap provides list theme colors, semantic names like \"primary\", \"secondary\", \"success\", \"danger\", etc. can set theme one names use corresponding theme color background color value box.    Bootstrap's theme colors drawn second color list includes variations several main colors, named literally. colors include \"blue\", \"purple\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"teal\", \"cyan\".","code":"value_box(   title = \"Customer lifetime value\",   value = \"$5,000\",   showcase = bsicons::bs_icon(\"bank2\"),   theme = \"primary\" ) value_box(   title = \"Customer lifetime value\",   value = \"$5,000\",   showcase = bsicons::bs_icon(\"bank2\"),   theme = \"teal\" )"},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"background-colors","dir":"Reference","previous_headings":"","what":"Background colors","title":"Value box — value_box","text":"theme color name provided without prefix, color used background value box. can also explicitly prefix theme color name bg- indicate apply value box background. theme sets background color, either black white chosen automatically text color using Bootstrap's color contrast algorithm. , can reference semantic theme color names literal color names.","code":"value_box(   title = \"Customer lifetime value\",   value = \"$5,000\",   showcase = bsicons::bs_icon(\"bank2\"),   theme = \"bg-success\" ) value_box(   title = \"Customer lifetime value\",   value = \"$5,000\",   showcase = bsicons::bs_icon(\"bank2\"),   theme = \"bg-purple\" )"},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"foreground-colors","dir":"Reference","previous_headings":"","what":"Foreground colors","title":"Value box — value_box","text":"set foreground colors value box, can prefix theme color name text-. changes text color without affecting background color.       Occasionally may want adjust use background foreground themes value box. achieve , set theme one theme names use class complementary style. example uses theme = \"purple\" (also \"bg-purple\") purple background, class = \"text-light\" light-colored text.","code":"value_box(   title = \"Customer lifetime value\",   value = \"$5,000\",   showcase = bsicons::bs_icon(\"bank2\"),   theme = \"text-success\" ) value_box(   title = \"Customer lifetime value\",   value = \"$5,000\",   showcase = bsicons::bs_icon(\"bank2\"),   theme = \"text-purple\" ) value_box(   title = \"Customer lifetime value\",   value = \"$5,000\",   showcase = bsicons::bs_icon(\"bank2\"),   theme = \"purple\",   class = \"text-light\" )"},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"gradient-backgrounds","dir":"Reference","previous_headings":"","what":"Gradient backgrounds","title":"Value box — value_box","text":"vibrant attention-grabbing effect, bslib provides array gradient background options. Provide theme theme name form bg-gradient-{}-{}, {} {} named main colors, e.g. bg-gradient-indigo-blue.","code":"value_box(   title = \"Customer lifetime value\",   value = \"$5,000\",   showcase = bsicons::bs_icon(\"bank2\"),   theme = \"bg-gradient-indigo-blue\" )"},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"custom-colors","dir":"Reference","previous_headings":"","what":"Custom colors","title":"Value box — value_box","text":"Finally, complete customization, can use value_box_theme() create custom theme. function takes arguments bg fg set background foreground colors, respectively. Like bg- theme names, bg provided, value_box_theme() choose appropriate light dark color text color.    Note value_box_theme() optionally takes theme name, can helpful want use named theme modify default bg fg colors theme.   Also note bg/fg must CSS colors, Bootstrap theme color names. means theme = \"purple\" use Bootstrap theme's purple color, bg = \"purple\" use CSS color purple, .e. \"#800080\".","code":"value_box(   title = \"Customer lifetime value\",   value = \"$5,000\",   showcase = bsicons::bs_icon(\"bank2\"),   theme = value_box_theme(bg = \"#e6f2fd\", fg = \"#0B538E\"),   class = \"border\" ) value_box_theme(name = \"orange\", bg = \"#FFFFFF\") value_box_theme(name = \"text-danger\", fg = \"#FFB6C1\")"},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"showcase-layouts","dir":"Reference","previous_headings":"","what":"Showcase Layouts","title":"Value box — value_box","text":"Use showcase argument add plot icon value_box(). three layouts available: \"left center\", \"top right\", \"bottom\". Set showcase name layout like, use showcase_left_center(), showcase_top_right(), showcase_bottom() helper functions customize showcase area's size. using plot showcase, may also want set fullscreen = TRUE users can expand value box full screen card. See value box article details.","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"left-center-showcase","dir":"Reference","previous_headings":"","what":"Left-center showcase","title":"Value box — value_box","text":"\"left center\" showcase layout default, perfect icon small plot. layout works best short value boxes.","code":"value_box(   title = \"Energy consumption\",   value = \"345 kwh/month\",   showcase = bsicons::bs_icon(\"ev-station-fill\") )"},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"top-right-showcase","dir":"Reference","previous_headings":"","what":"Top-right showcase","title":"Value box — value_box","text":"\"top right\" showcase layout places icon plot upper right corner value box. layout works best medium-height square value boxes.","code":"value_box(   title = \"Energy consumption\",   value = \"345 kwh/month\",   showcase = bsicons::bs_icon(\"ev-station-fill\"),   showcase_layout = \"top right\" )"},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"bottom-showcase","dir":"Reference","previous_headings":"","what":"Bottom showcase","title":"Value box — value_box","text":"Finally, \"bottom\" showcase layout perfect full-bleed plots. layout places plot title value, plot taking full width bottom half. Try layout sparkline-style plots. can little tricky set , sure check Expandable sparklines section value boxes article bslib website. example, created sparkline plot using base R graphics, generally recommended. Code sparkline plot base Rset.seed(4242)random_sparkline_plot <- function() {  timeseries <- cumsum(runif(100, -2, 2))  x_axis <- seq_along(timeseries)  x_lim <- c(1, length(timeseries))  y_lim <- range(timeseries) + c(-2, 0)  par(mar = c(0, 0, 0, 0))  # Set plot area  plot(    timeseries, type = \"n\",    axes = FALSE, frame.plot = FALSE,    ylim = y_lim, xlim = x_lim,    ylab = \"\",    xlab = \"\",    yaxs = \"\",   xaxs = \"\",  )  # Add sparkline line  lines(timeseries, type = \"l\", pch = NA, col = \"#0B538E\", lwd = 3)  # Create polygon coordinates shading  polygon_x <- c(1, x_axis, length(timeseries))  polygon_y <- c(min(y_lim), timeseries, min(y_lim))  # Add shading line  polygon(polygon_x, polygon_y, col = \"#e6f2fd\", border = NA)}sparkline_plot <- function() {  as_fill_item(    htmltools::plotTag(      random_sparkline_plot(),      width = 500,      height = 125,      suppressSize = \"xy\",      alt = paste(        \"sparkline plot randomly-generated timeseries.\",        \"timeseries starts high ends low, lots variation.\"      )    )  )}","code":"set.seed(4242)random_sparkline_plot <- function() {  timeseries <- cumsum(runif(100, -2, 2))  x_axis <- seq_along(timeseries)  x_lim <- c(1, length(timeseries))  y_lim <- range(timeseries) + c(-2, 0)  par(mar = c(0, 0, 0, 0))  # Set up the plot area  plot(    timeseries, type = \"n\",    axes = FALSE, frame.plot = FALSE,    ylim = y_lim, xlim = x_lim,    ylab = \"\",    xlab = \"\",    yaxs = \"i\",   xaxs = \"i\",  )  # Add the sparkline line  lines(timeseries, type = \"l\", pch = NA, col = \"#0B538E\", lwd = 3)  # Create polygon coordinates for shading  polygon_x <- c(1, x_axis, length(timeseries))  polygon_y <- c(min(y_lim), timeseries, min(y_lim))  # Add shading under the line  polygon(polygon_x, polygon_y, col = \"#e6f2fd\", border = NA)}sparkline_plot <- function() {  as_fill_item(    htmltools::plotTag(      random_sparkline_plot(),      width = 500,      height = 125,      suppressSize = \"xy\",      alt = paste(        \"A sparkline plot with a randomly-generated timeseries.\",        \"The timeseries starts high and ends low, with lots of variation.\"      )    )  )} value_box(   title = \"Energy consumption\",   value = \"345 kwh/month\",   showcase = sparkline_plot(),   showcase_layout = \"bottom\" )"},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Value box — value_box","text":"Value boxes featured bslib website articles: Value boxes Build--Box App Get Started: Dashboards","code":""},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/reference/value_box.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value box — value_box","text":"","code":"if (FALSE) { # rlang::is_interactive() library(htmltools)  value_box(   \"KPI Title\",   h1(HTML(\"$1 <i>Billion<\/i> Dollars\")),   span(     bsicons::bs_icon(\"arrow-up\"),     \" 30% VS PREVIOUS 30 DAYS\"   ),   showcase = bsicons::bs_icon(\"piggy-bank\"),   theme = \"success\" ) }"},{"path":"https://rstudio.github.io/bslib/dev/reference/versions.html","id":null,"dir":"Reference","previous_headings":"","what":"Available Bootstrap versions — versions","title":"Available Bootstrap versions — versions","text":"Available Bootstrap versions","code":""},{"path":"https://rstudio.github.io/bslib/dev/reference/versions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available Bootstrap versions — versions","text":"","code":"versions()  version_default()"},{"path":"https://rstudio.github.io/bslib/dev/reference/versions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available Bootstrap versions — versions","text":"Returns list Bootstrap versions available.","code":""},{"path":[]},{"path":[]},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"improvements-and-bug-fixes-development-version","dir":"Changelog","previous_headings":"","what":"Improvements and bug fixes","title":"bslib (development version)","text":"bs_theme_dependencies() now avoids unecessarily copying internal package files R’s temporary directory preparing precompiled theme dependencies (e.g. standard bs_theme() theme). (#1184) Fixed issue <main> areas page_sidebar() page_navbar() (sidebar) made fillable containers even fillable = FALSE. (#1188)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-090","dir":"Changelog","previous_headings":"","what":"bslib 0.9.0","title":"bslib 0.9.0","text":"CRAN release: 2025-01-30","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"breaking-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"bslib 0.9.0","text":"navbar-related style options page_navbar() navset_bar() consolidated single navbar_options argument pairs new navbar_options() helper. Using direct position, bg, inverse, collapsible, underline arguments continue work deprecation message. (#1141) Related change, navset_bar() now defaults using underline = TRUE page_navbar() navset_bar() use set default navbar_options(). navbar_options(), inverse replaced theme, takes values \"light\" (dark text light background), \"dark\" (light text dark background), \"auto\" (follow page settings, default). change affects default navbar foreground background colors Bootswatch preset themes Bootstrap 5. Detailed instructions customizing navbar appearance, especially Bootswatch themes, can found ?navbar_options. (#1146)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bslib 0.9.0","text":"bslib now supports unified theming brand.yml. brand.yml lets theme Shiny apps, Quarto documents single, portable YAML file. Learn new Unified theming brand.yml article. (#1148)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"improvements-and-bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Improvements and bug fixes","title":"bslib 0.9.0","text":"navset_card_pills(), navset_card_underline(), navset_card_tabs() fixed now respect header/footer arguments (@tanho63, #1024) Fixed bug bs_themer() (bs_theme_preview()) caused stop applying changes Sass variable NULL. (@meztez, #1112) Optimized better performance internal functions compile Sass call color-contrast() algorithm. (#1140) input_switch() input_dark_mode() can included Shiny’s bookmarking feature. (#1166) Fixed issue Shiny preset (bs_theme(5, \"shiny\")) caused floating underling appear nav_panel_hidden() used active. (#1170) bslib now uses navbar markup Bootstrap 5 ’s closer expected markup Bootstrap. still include navbar-default navbar-inverse classes <nav> element, backwards compatibility, apps use Bootstrap 5 classes styles. (#1146) following functions longer marked “experimental”: accordion(), breakpoints(), card(), input_dark_mode(), input_switch(), layout_columns(), layout_column_wrap(), page_fillable(), page_sidebar(), layout_sidebar(), sidebar(), popover(), tooltip() value_box().","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-080","dir":"Changelog","previous_headings":"","what":"bslib 0.8.0","title":"bslib 0.8.0","text":"CRAN release: 2024-07-29","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"breaking-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"bslib 0.8.0","text":"help reduce potential squashed content, main content area page_sidebar() page_navbar() sidebar now (customizable) minimum height width “medium-sized” window. revert previous behavior, set theme = bs_theme(\"bslib-page-main-min-height\" = \"unset\", \"bslib-page-main-min-width\" = \"unset\"). (#1057, #1059, #1084) card_image() couple breaking changes (#1076): fill now defaults FALSE avoid stretching/shrinking image vertically (thus, changing ’s aspect ratio). restore previous behavior, set fill = TRUE. container now defaults NULL instead card_body. result, card_image() longer padding around , making easier create “full-bleed” card images (example). restore previous behavior, wrap card_image() card_body().","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bslib 0.8.0","text":"alt now formal argument set \"\" default. default value marks images decorative; please describe image alt attribute decorative. border_radius now defaults \"auto\" default, case image’s position card automatically determine whether receive .card-img-top (first child), .card-img-bottom (last child) .card-img (child). file designed accept path local (server-side) file, now recognizes remote files start protocol prefix, e.g. https://, two slashes, e.g. //. Local files base64-encoded embedded HTML output, remote files linked directly. use relative path file served Shiny app, use src instead file, e.g. card_image(src = \"cat.jpg\") cat.jpg stored www/. open argument sidebar() now includes option place sidebar ’s always open mobile screens main content open = list(mobile = \"always-\"). (#1088)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"improvements-0-8-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"bslib 0.8.0","text":"Adjusted border color checkbox radio buttons match border color input group bs_theme(preset=\"shiny\"). (#1038) mobile, main sidebar content areas layout_sidebar() longer overlap sidebar toggle button. (#1084) bslib now re-exports htmltools::css() make easier specify style declarations. (#1086) Example apps provided bslib now moved examples examples-shiny take advantage new package argument shiny::runExample() shiny >= 1.8.1. example, try shiny::runExample(\"build--box\", package = \"bslib\"). (#1049)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bslib 0.8.0","text":"toggle_sidebar() correctly closes sidebar. (@fredericva, #1043) bslib now avoids re-defining components used context already available, e.g. Quarto dashboard. (#1045) Improved appearance cards sidebars headers Shiny preset, especially custom card color themes used, e.g. text-bg-primary Bootstrap utility classes. (#1056) card_body(fillable = FALSE), bslib now preserves flow-layout margin bottom settings. (#1073) Fixed bug layout_sidebar() caused spurious confusing error message. (#1081)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-070","dir":"Changelog","previous_headings":"","what":"bslib 0.7.0","title":"bslib 0.7.0","text":"CRAN release: 2024-03-29 large release includes many improvements bug fixes newer UI components like layout_columns(), card(), sidebar(). addition, new input_task_button() offers drop-replacement shiny::actionButton() (prevent multiple submissions operation) well pairing nicely new shiny::ExtendedTask implementing truly non-blocking operations Shiny.","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bslib 0.7.0","text":"Added input_task_button(), replacement shiny::actionButton() automatically prevents operation submitted multiple times. , upon click, immediately transitioning “Processing…” visual state let button clicked . button resets clickable state automatically reactive flush causes complete; , advanced scenarios, update_task_button() can used manually control button resets. card() value_box() now take id argument , provided, used report full screen state card value box server. example, using card(id = \"my_card\", full_screen = TRUE) can determine card currently full screen mode reading boolean value input$my_card_full_screen. (#1006, #1032)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"changes--improvements-0-7-0","dir":"Changelog","previous_headings":"","what":"Changes & improvements","title":"bslib 0.7.0","text":"sidebar(): page-level sidebar page_sidebar()/page_navbar() now always open (collapsible) default mobile screens. revert old behavior, set open = \"desktop\" sidebar. (#943) open now accepts list mobile desktop values control sidebar’s initial state screen size, choosing \"open\", \"closed\", \"always\" (always-open sidebar collapsed). (#943) collapse toggle now high z-index value ensure always appears elements main content area. sidebar overlay also now receives high z-index mobile layouts. (#958) Improved card(full_screen = TRUE, ...) accessibility: Full-screen cards now supported mobile devices: Expand card button revealed user taps card (thanks @Damonsoul, #961). Expand card button now accessible via keyboard navigation appropriate ARIA attributes connect card expand close buttons. JavaScript-oriented users, expansion/collapse now accompanied custom bslib.card event full screen state reported event.detail.fullScreen property. (#959) Improvements default theme (.e., Shiny preset): default theme, cards now use slightly smaller shadow shadow style also now used popovers. (#998) Increased spacing elements. change noticeable layout_columns() layout_column_wrap() component. components, can use gap padding arguments choose values, can set $bslib-spacer (Sass) --bslib-spacer (CSS) variable. (#998) layout_columns(): col_widths now sets sm breakpoint default, rather md breakpoint. example, col_widths = c(12, 6, 6) now equivalent breakpoints(sm = c(12, 6, 6)) rather breakpoints(md = c(12, 6, 6)). (#1014) col_widths breakpoints() lg wider, now uses better default column width smaller breakpoints listed col_widths value. said, can always include sm md breakpoints() definition complete control column widths sizes. (#931) row_heights non-breakpoints() object, value used row heights breakpoints. Previously, used row heights \"sm\" . (#931) integer value breakpoint provided col_widths, 12-unit grid always used. example, breakpoints(md = 3, lg = NA) pick best-fitting layout large screen sizes using 12-column grid. Previously, best fit algorithm might adjust number columns shortcut easy solution. shortcut taken auto-fit layout requested every breakpoint, e.g. col_widths = breakpoints(md = NA, lg = NA) col_widths = NA. (#928) Underlying logic moved R Typescript improve portability component. (#931) value_box(), layout_columns() layout_column_wrap() now min_height max_height arguments. useful filling layouts, like page_fillable(), page_sidebar(fillable = TRUE) page_navbar(fillable = TRUE). example, can use layout_columns(min_height = 300, max_height = 500) ensure set items (likely arranged row columns) always 300 500 pixels tall. (#1016) page_sidebar() now places title element .navbar container matches structure page_navbar(). ensures title elements page_sidebar() page_navbar() consistent appearance. (#998) as_fillable_container(), as_fill_item() as_fill_carrier() now always include htmltools fill CSS dependency. means longer usable $addAttr() htmltools::tagQuery method; authors instead pass elements as_fillable_container() as_fill_*() functions use css_selector argument apply fill options specific elements. (#946)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bslib 0.7.0","text":"Fixed issue page might given window title NA primary title argument page function, page_sidebar(), NULL suitable window title inferred. (#933) card()s (value_box()s) now correctly exit full screen mode removed UI. want update card without potentially exiting full-screen mode, update specific parts card using uiOutput() textOutput(). (#1005) Fixed handful update_popover() bugs. (#747, #1017) tooltip() popover() now work expected inserted navbar/navset via nav_insert(). (#1020) uiOutput() conditionalPanel() longer result unwanted double padding parent container uses gap spacing multiple elements (e.g., layout_columns(), page_fillable(), etc). (#992, #1031) page_navbar() navset_bar() now validate transform padding gap arguments appropriate CSS values. (#991) Fixed issue xs breakpoint breakpoints() object used row_heights layout_columns() override breakpoints. (#1014)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-062","dir":"Changelog","previous_headings":"","what":"bslib 0.6.2","title":"bslib 0.6.2","text":"CRAN release: 2024-03-22 Increased version requirement sass package 0.4.9. result, font_google(local=TRUE) longer fail download font files.","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-061","dir":"Changelog","previous_headings":"","what":"bslib 0.6.1","title":"bslib 0.6.1","text":"CRAN release: 2023-11-28","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bug-fixes-0-6-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bslib 0.6.1","text":"Fixed CSS bslib-page-dashboard class Shiny preset correctly support page_sidebar(class = \"bslib-page-dashboard\") page_navbar(nav_panel(class = \"bslib-page-dashboard\")). (#917) Fixed minor bug allow themer demo run directly, outside bs_theme_preview(). (#918)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-060","dir":"Changelog","previous_headings":"","what":"bslib 0.6.0","title":"bslib 0.6.0","text":"CRAN release: 2023-11-21","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"breaking-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"bslib 0.6.0","text":"bs_theme() now defaults preset=\"shiny\". provides additional set theming defaults rules make easier create Shiny apps (particular, dashboards) look good box. revert previous behavior, set bs_theme(preset=\"bootstrap\"). (#711) value_box() longer defaults theme_color = \"primary\". restore previous behavior, please use theme = \"primary\". addition default style change, theme_color now deprecated favor theme. (#758) page_navbar() now defaults underline = TRUE, meaning navigation links navbar now underline styling default (set underline = FALSE revert previous behavior). (#784) page() now returns <body> tag instead tagList(). change allows page() treat named arguments HTML attributes <body> tag, making possible add page-level classes attributes. (#809) JS/CSS assets behind bslib components (e.g., card(), value_box(), etc) now bundled one htmlDependency() included return value bs_theme_dependencies() (previously attached component-level). (#810) layout_column_wrap() longer requires width width longer first argument, meaning width must named used. new default width = \"200px\", combines fixed_width = FALSE produce responsive layout column least 200px wide. means , cases, layout_column_wrap() can automatically layout unknown number items without set width. (#853)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bslib 0.6.0","text":"default version Bootstrap now v5.3.1, upgraded v5.2.2. notable thing comes update ability toggle light/dark color modes purely client-side (.e., calls Sass required). (#749, #764) Added input_dark_mode(), new input control provides toggle button can used switch dark light modes using Bootstrap 5.3. default, dark mode applied automatically user’s operating system also dark mode. App authors can toggle dark mode programmatically server using toggle_dark_mode(), provide input_dark_mode() id, can read current color mode via corresponding input value. (#787) Shiny’s Bootstrap theme preset now used default bs_theme() related page_*() functions bslib. theme brings fresh new design Shiny apps dashboards created bslib. dashboard design anticipates heavy use cards organizing content, works best gray background contrast minimalistic white cards. treatment can enabled page_sidebar(), page_fillable() page_*() functions adding bslib-page-dashboard class page container body tag. preset can also customized using $bslib-dashboard-design $bslib-enable-shadows Sass variables. Set false disable dashboard treatment card shadows, respectively. variables can set via bs_theme(), e.g. bs_theme(\"bslib-dashboard-design\" = \"false\"). (#897, #906) value_box() updated number new features improvements: value_box() now supports many new themes styles, fully customizable themes using new value_box_theme() function. reflect new capabilities, ’ve replaced theme_color new theme argument. previous argument continue work expected, deprecation warning. (#758) addition Bootstrap theme names (primary ,secondary, etc.), can now use main Boostrap colors (purple, blue, red, etc.). can also choose apply color background foreground prepending bg- text- prefix theme color name. Finally, ’ve also added new gradient themes allowing pair two color names bg-gradient-{}-{} (e.g., bg-gradient-purple-blue). named color themes aren’t limited value boxes: ’re powered small utility classes, can use anywhere within bslib-powered UI. Added showcase_bottom(), new value_box() layout places showcase value box title value, perfect full-bleed plot. (#758) showcase_left_center() showcase_top_right() longer take two values width argument. Instead, now take single value (e.g., width = \"30%\") representing width showcase value box. Furthermore, ’ve gained width_full_screen arguments determine width showcase area value box expanded fill screen. (#758) showcase_layout argument value_box() now accepts one three character values: \"left center\", \"top right\", \"bottom\". (#758) new Build Box app now available online via bslib. See ?value_box() details. app helps preview set value boxes configure customize appearance provides code copy paste app. (#790) Added new navset_underline() & navset_card_underline() functions well underline argument page_navbar() leverage new nav-underline styling navigation links. (#784)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"improvements-0-6-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"bslib 0.6.0","text":"bs_themer() app now supports previewing dark mode variant Bootstrap 5 themes. (#767) Improved style appearance button enter full screen card()s value_box()es better adapt Bootstrap’s dark mode. (#780) htmltools::save_html() now works expected applied directly components (e.g., card(), etc) pages non-default theme. (#823, #815) layout_sidebar() received new design. button collapse expand sidebar now appears top (instead bottom) sidebar. mobile devices, sidebar now fills layout_sidebar() area overlay, rather expanding main content area. Note max_mobile_height argument sidebar() determines maximum height sidebar area mobile, now applies open = \"always\". (#798) layout_sidebar() now uses <aside> element sidebar’s container <header> element sidebar title. classes element remain , semantic meaning elements now better reflected HTML markup. (#580) layout_column_wrap(), width CSS unit – e.g. width = \"400px\" width = \"25%\" – fixed_width = FALSE, layout_column_wrap() ensure columns least width wide, unless parent container narrower width. (#851) bs_global_theme() gains preset argument match function signature bs_theme(). (#896)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bslib 0.6.0","text":"toggle_switch() now works correctly called within Shiny module. update_switch() worked expected, toggle_switch() didn’t apply module’s namespace id switch updated. (#769) Filter controls popovers DT::datatable() tables now better match current Bootstrap theme responsive dark mode setting Bootstrap 5.3. (#267, #775). double border longer appears accordion used inside sidebar(open=\"always\") context. (#795) layout_sidebar() longer gives sidebar main content area role=\"main\" attribute. (#580)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-051","dir":"Changelog","previous_headings":"","what":"bslib 0.5.1","title":"bslib 0.5.1","text":"CRAN release: 2023-08-11","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"new-features-0-5-1","dir":"Changelog","previous_headings":"","what":"New features","title":"bslib 0.5.1","text":"Added tooltip(), update_tooltip(), toggle_tooltip() easy creation (server-side updating) Bootstrap tooltips (way display additional information focusing (hovering ) UI element). (#662) Added popover(), update_popover(), toggle_popover() easy creation (server-side updating) Bootstrap popovers. Popovers similar tooltips, persistent, primarily used button-like UI elements (e.g., actionButton(), bsicons::bs_icon(), etc). (#702) Added input_switch() update_switch() easy creation (server-side updating) Bootstrap’s switch input (-toggle binary input values). (#483) Added two new toggle functions: toggle_switch() toggling state input_switch() element toggle_sidebar() toggling state sidebar() element (sidebar_toggle() remains alias toggle_sidebar()). (#709)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"improvements-0-5-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"bslib 0.5.1","text":"Closed quarto-dev/quarto-cli#6081: bslib’s components (e.g., card(), sidebar(), etc.) now work sensibly Quarto docs. (#664) Closed #672: sidebar() gains gap padding arguments control vertical gap items sidebar padding around sidebar’s content. (#725)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bug-fixes-0-5-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bslib 0.5.1","text":"Closed #636: Outputs sidebars now work expected initially-closed sidebar opened. (#624) Closed #640: accordion() longer errors id isn’t supplied inside Shiny session context. (#646) Closed #639: nav_panel()’s icon argument now supports generic HTML(), meaning things like bsicons::bs_icon() fontawesome::fa() can used values. (#645) Light-styled buttons bslib-provided Bootswatch themes now consistent design Bootswatch. Previously, inadvertently styled similarly secondary buttons. (#687) Closed #727: layout_column_wrap() now enforces equal column widths avoiding layout issues caused grid container overflow. (#729)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-050","dir":"Changelog","previous_headings":"","what":"bslib 0.5.0","title":"bslib 0.5.0","text":"CRAN release: 2023-06-09 significant release focuses making dashboards filling/responsive layouts easier. See new Getting Started Dashboards article learn . also includes new components (accordion()) well many improvements bug fixes existing features components. bslib’s dashboarding features still experimental point, release represents significant step towards recommended way create Shiny dashboards.","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"breaking-changes--improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"Breaking changes / improvements","title":"bslib 0.5.0","text":"card_body() now provides behavior card_body_fill() (.e., fillable container fill item) default. , now, since card_body() can everything card_body_fill() can , card_body_fill() deprecated. main benefit change card(full_screen = TRUE, ...) output(s) passed ... “just works” intuitive way. revert previous behavior, set fillable = FALSE fill = FALSE calls card_body() set wrapper = function(x) card_body(x, fillable = FALSE, fill = FALSE) calls card(). (#498) Closed #375: margin-top longer included header tags aren’t created via pandoc. negatively impacts spacing headers, consider adding suitable utility class (example, change shiny::titlePanel(\"title\") tagAppendAttributes(titlePanel(\"title\"), class = \"mt-3\", .selector = \"h2\")). (#396) page_fill() now produces <body> tag display:flex (instead display:block). page_fill() longer fills windows height mobile (.e., narrow screens) default (set fillable_mobile = TRUE restore old behavior). page_fill() now adds padding gap default, set padding = 0 gap = 0 restore old behavior. container page now display:flex (instead display:block). breaks existing behavior, set page_navbar()’s fillable argument FALSE. header footer longer wrapped additional shiny::fluidRow() container. breaks existing behavior, consider wrapping header footer value(s) shiny::fluidRow()). (#479) layout_column_wrap()’s fill argument now controls whether layout container allowed grow/shrink fit fillable container (e.g., page_fillable()). also gains new fillable argument controlling whether UI elements allowed fill row height. consistent meaning fill functions, like card(), card_body(), layout_sidebar(), etc. (#498) Defaults following Bootstrap 5 Sass variables changed null: $accordion-button-active-bg, $accordion-button-active-color, $accordion-icon-active-color. restore old behavior, bs_add_variables(theme, \"accordion-button-active-bg\" = \"tint-color($component-active-bg, 90%)\", \"accordion-button-active-color\" = \"shade-color($primary, 10%)\", \"accordion-icon-active-color\" = \"$accordion-button-active-color\", .= \"declarations\"). (#475)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bslib 0.5.0","text":"Added page_sidebar(), easy dashboard creation. (#588) Added sidebar() API creating sidebar layouts various contexts. See article learn . (#479) Added layout_columns(), responsive column-based grid layouts. (#587) Adds new accordion() API. See help(accordion) examples details. Note also accordion() designed work well inside sidebar(). (#475) page_navbar(), navset_card_tab(), navset_card_pill() gain sidebar argument putting sidebar() every page/tab/pill. (#479) page_navbar() gains fillable argument make content particular page(s) fit window/card. (#479) page_fillable() (aka, page_fill()) now considered fillable container, meaning fill items like card(), layout_column_wrap(), layout_sidebar() now grow/shrink fit window’s height appear direct child page_fillable(). (#479) page_navbar() page_fillable() gain fillable_mobile arguments control whether page grow/shrink fit viewport mobile. (#479) card(), value_box(), card_image() gain max_height/min_height fill arguments. (#498) card_body() gains padding argument. (#587) Added new as_fill(), as_fillable(), as_fill_carrier(), is_fill(), is_fillable() testing coercing potential fill. (#498)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bslib 0.5.0","text":"Closed #558: nested cards fullscreen = TRUE now correctly individually expand fill window. Tab focus behavior full screen mode also improved. (#557) Closed #573: Improved styling dynamic result supplied value_box()’s title/value (e.g., value_box(\"Dynamic value\", uiOutput(\"value\"))). (#605)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"deprecations-0-5-0","dir":"Changelog","previous_headings":"","what":"Deprecations","title":"bslib 0.5.0","text":"card_body_fill() deprecated favor card_body(). (#498) page_fill() deprecated favor page_fillable(). (#498) nav() deprecated favor nav_panel() nav_content() favor nav_panel_hidden(). (#476) navs_tab() now navset_tab() navs_pill() now navset_pill() navs_pill_list() now navset_pill_list() navs_bar() now navset_bar() navs_tab_card() navs_pill_card() now navset_card_tab() navset_card_pill(), respectively.","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-042","dir":"Changelog","previous_headings":"","what":"bslib 0.4.2","title":"bslib 0.4.2","text":"CRAN release: 2022-12-16","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"potentially-breaking-changes-0-4-2","dir":"Changelog","previous_headings":"","what":"Potentially breaking changes","title":"bslib 0.4.2","text":"Upgraded Bootstrap 5 (.e., bs_theme(version = 5)) 5.1.3 5.2.2. (#438, #455)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"new-features-0-4-2","dir":"Changelog","previous_headings":"","what":"New features","title":"bslib 0.4.2","text":"Adds new card() API well value_box() layout_column_wrap(). learn new functionality, refer new pkgdown articles: https://rstudio.github.io/bslib/articles/cards.html https://rstudio.github.io/bslib/articles/value-boxes.html https://rstudio.github.io/bslib/articles/column-layout.html","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-041","dir":"Changelog","previous_headings":"","what":"bslib 0.4.1","title":"bslib 0.4.1","text":"CRAN release: 2022-11-02","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"bslib 0.4.1","text":"Closed #458. release bslib now requires memoise 2.0.1 .","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-040","dir":"Changelog","previous_headings":"","what":"bslib 0.4.0","title":"bslib 0.4.0","text":"CRAN release: 2022-07-16","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"bslib 0.4.0","text":"bs_theme() now defaults version = 5 (.e., Bootstrap 5). change happens break existing app, consider specifying bs_theme(version = 4) revert change Bootstrap version. (#374) default coloring Bootswatch 4+ theme’s .navbar-default/.navbar-inverse class changed slightly better match Bootswatch 3 coloring. Also, since coloring now based solely $navbar-* variables, Bootswatch themes now work better combination custom $navbar-* values (e.g., bs_theme(\"navbar-bg\" = ...) can used provide background color, foreground colors automatically contrast appropriately). (#392)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bslib 0.4.0","text":"Upgraded Bootstrap 5 (.e., bs_theme(version = 5)) 5.1.0 5.1.3 (#378) Closed #369: bs_dependency_defer() now memoises func (default), reducing time required render multiple instances dynamically themable widget. (#405)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bslib 0.4.0","text":"Closed #393: Bootstrap 5’s $form-check-label-* variables now work expected shiny::radioButtons(), shiny::checkboxInput(), shiny::checkboxGroupInput(). (#395) Closed #382: Various fixes using shiny::checkboxInput(), shiny::checkboxGroupInput(), shiny::radioButton() bs_theme(version = 5, bootswatch = \"sketchy\"). (#385) Closed #377: make sure shiny::tabsetPanel(type = \"hidden\") (.e., bslib::navs_hidden()) stays hidden used bs_theme(). (#379) Closed #424: fixed issue nav_menu() appearing first navs_*() container Bootstrap 4+. Closed #431: Bootstrap 5 navbars longer unwanted “Toggle Navigation” label collapsed. (#432) Closed #400: nav_menu(align=\"right\") now works Bootstrap 5. (#401) Closed #390: using bs_theme(bootswatch = \"paper\", version = 5) bs_theme(bootswatch = \"readable\", version = 5) longer errors. (#391)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-031","dir":"Changelog","previous_headings":"","what":"bslib 0.3.1","title":"bslib 0.3.1","text":"CRAN release: 2021-10-06","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"new-features-0-3-1","dir":"Changelog","previous_headings":"","what":"New features","title":"bslib 0.3.1","text":"Upgraded Bootstrap 5 (.e., bs_theme(version = 5)) 5.0.2 5.1.0 (#365)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bslib 0.3.1","text":"Closed rstudio/shiny#3519: nav_menu() (.e., shiny::navbarMenu()) wasn’t producing .active class ’s .dropdown container properly. (#372)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-030","dir":"Changelog","previous_headings":"","what":"bslib 0.3.0","title":"bslib 0.3.0","text":"CRAN release: 2021-09-02","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"bslib 0.3.0","text":"Closed rstudio/rmarkdown#2154: magrittr’s pipe operator (%>%) longer re-exported bslib. Either library(magrittr) make %>% available /use use R 4.1’s pipe operator (|>).","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bslib 0.3.0","text":"Closed #82: Added support Bootstrap 5 (via bs_theme(version = 5)). Bootstrap 4 remains default release, next release, default likely change Bootstrap 5.","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bslib 0.3.0","text":"Closed #6: rmarkdown’s .tabset-fade class now works Bootstrap 4+ since legacy use .nav .fade now officially supported Bootstrap 4+. (#325)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-0251","dir":"Changelog","previous_headings":"","what":"bslib 0.2.5.1","title":"bslib 0.2.5.1","text":"CRAN release: 2021-05-18 Small patch release fix failing test Solaris.","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-025","dir":"Changelog","previous_headings":"","what":"bslib 0.2.5","title":"bslib 0.2.5","text":"CRAN release: 2021-05-12","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"new-features-and-improvements-0-2-5","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"bslib 0.2.5","text":"Closed #251: New bs_theme() options (navbar-bg, navbar-light-bg, navbar-dark-bg) easily customizing navbar’s background (foreground) color (#253, #271). Closed #281: New bs_theme() argument (font_scale) easier scaling base font size (#288). Closed #256 #282: Font file importers (font_google(), font_link(), font_face()) now re-exported sass package. result, may now used Sass variable (e.g., bs_theme(\"input-font-family\" = font_google(\"Pacifico\"))) well inside Rmd yaml without !expr (e.g., input-font-family: google: Pacifico – see #256 details). new font_collection() function also added convenient way specify font fallbacks (#291). Closed #255: bs_themer() now emits sensible yaml front matter used within Rmd document (#288). Closed #227: bs_themer() now overlays spinner Sass compilation (#243). Closed #278: bslib now includes rmarkdown::html_document templates demonstrating example usage bslib thematic (#288). Closed #231: Upgraded Bootstrap 4.5.3 4.6.0 (#254). Closed #237: <blockquote> tags now border-left/padding styles version = 4 (mirror version = 3 behavior) (#239). Closed #279: Warnings low color contrasts now suppressed default, unless shiny::devmode() enabled. enable/disable warnings, set new options(bslib.color_contrast_warnings = ) TRUE/FALSE (#287). bs_theme_dependencies() now includes Sass source maps shiny::devmode() enabled (#312). Added new bs_add_functions()/bs_add_mixins() deprecated bs_add_declarations() reflect sass::sass_layer()’s new ability place functions variable defaults. result, variable definitions may now use functions defined bs_add_functions(). (#311)","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bug-fixes-0-2-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bslib 0.2.5","text":"Closed #236, #230, #242, #187, #215, #250: Addressed various cosmetic issues CSS (#249). Closed #289: collapsed navbar toggle now correctly floats right (#290). Closed rstudio/flexdashboard#316: fixed issue navbar nav spacing/alignment (#286).","code":""},{"path":"https://rstudio.github.io/bslib/dev/news/index.html","id":"bslib-024","dir":"Changelog","previous_headings":"","what":"bslib 0.2.4","title":"bslib 0.2.4","text":"CRAN release: 2021-01-25 Initial release package, see https://rstudio.github.io/bslib/","code":""}]
